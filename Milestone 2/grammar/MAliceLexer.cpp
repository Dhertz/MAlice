/** \file
 *  This C++ source file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g
 *     -                            On : 2012-11-07 23:05:26
 *     -                 for the lexer : MAliceLexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C++ language generator and runtime by Gokulakannan Somasundaram ( heavy lifting from C Run-time by Jim Idle )
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Gokulakannan Somasundaram, ElectronDB
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "MAliceLexer.hpp"
/* ----------------------------------------- */



	namespace  MAlice  {


/** String literals used by MAliceLexer that we must do things like MATCHS() with.
 *  C will normally just lay down 8 bit characters, and you can use L"xxx" to
 *  get wchar_t, but wchar_t is 16 bits on Windows, which is not UTF32 and so
 *  we perform this little trick of defining the literals as arrays of UINT32
 *  and passing in the address of these.
 */
static ANTLR_UCHAR	lit_1[]  = { 0x21, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_2[]  = { 0x26, 0x26,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_3[]  = { 0x3C, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_4[]  = { 0x3D, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_5[]  = { 0x3E, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_6[]  = { 0x54, 0x68, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_7[]  = { 0x61, 0x6E, 0x64,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_8[]  = { 0x62, 0x75, 0x74,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_9[]  = { 0x63, 0x6C, 0x6F, 0x73, 0x65, 0x64,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_10[]  = { 0x63, 0x6F, 0x6E, 0x74, 0x61, 0x69, 0x6E, 0x65, 0x64,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_11[]  = { 0x67, 0x6C, 0x61, 0x73, 0x73,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_12[]  = { 0x68, 0x61, 0x64,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_13[]  = { 0x6C, 0x6F, 0x6F, 0x6B, 0x69, 0x6E, 0x67,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_14[]  = { 0x6F, 0x66,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_15[]  = { 0x6F, 0x70, 0x65, 0x6E, 0x65, 0x64,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_16[]  = { 0x70, 0x69, 0x65, 0x63, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_17[]  = { 0x72, 0x6F, 0x6F, 0x6D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_18[]  = { 0x73, 0x70, 0x69, 0x64, 0x65, 0x72,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_19[]  = { 0x74, 0x68, 0x65, 0x6E,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_20[]  = { 0x74, 0x6F, 0x6F,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_21[]  = { 0x77, 0x61, 0x73,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_22[]  = { 0x7C, 0x7C,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_23[]  = { 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_24[]  = { 0x6C, 0x65, 0x74, 0x74, 0x65, 0x72,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_25[]  = { 0x73, 0x65, 0x6E, 0x74, 0x65, 0x6E, 0x63, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_26[]  = { 0x23, 0x23, 0x23,  antlr3::ANTLR_STRING_TERMINATOR};

	}



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */

using namespace antlr3;

	namespace  MAlice  {


/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */



MAliceLexer::~MAliceLexer()
{
}

void
MAliceLexer::reset()
{
    this->get_rec()->reset();
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g";

/** \brief Return the name of the grammar file that generated this code.
 */
const char* MAliceLexer::getGrammarFileName()
{
	return fileName;
}

/** \brief Create a new lexer called MAliceLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \return
 *     - Success pMAliceLexer initialized for the lex start
 *     - Fail NULL
 */
MAliceLexer::MAliceLexer(StreamType* instream)
:MAliceLexerImplTraits::BaseLexerType(ANTLR_SIZE_HINT, instream, NULL)
{
	// See if we can create a new lexer with the standard constructor
	//
	this->init(instream );
}

/** \brief Create a new lexer called MAliceLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \param[state] state Previously created shared recognizer stat
 * \return
 *     - Success pMAliceLexer initialized for the lex start
 *     - Fail NULL
 */
MAliceLexer::MAliceLexer(StreamType* instream, RecognizerSharedStateType* state)
:MAliceLexerImplTraits::BaseLexerType(ANTLR_SIZE_HINT, instream, state)
{
	this->init(instream );
}

void MAliceLexer::init(StreamType* instream)
{
    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * in base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 lexer function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function.
     *
     * We don't use the macros defined in MAliceLexer.h here so you can get a sense
     * of what goes where.
     */

}

/* =========================================================================
 * Functions to match the lexer grammar defined tokens from the input stream
 */

//   Comes from: 15:7: ( '!' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__11
 *
 * Looks to match the characters the constitute the token T__11
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__11()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__11;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:15:7: ( '!' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:15:9: '!'
    {
         this->matchc('!');
        if  (this->hasException())
        {
            goto ruleT__11Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__11Ex; /* Prevent compiler warnings */
    ruleT__11Ex: ;

}
// $ANTLR end T__11

//   Comes from: 16:7: ( '!=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__12
 *
 * Looks to match the characters the constitute the token T__12
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__12()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__12;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:16:7: ( '!=' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:16:9: '!='
    {
        this->matchs(lit_1);
        if  (this->hasException())
        {
            goto ruleT__12Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__12Ex; /* Prevent compiler warnings */
    ruleT__12Ex: ;

}
// $ANTLR end T__12

//   Comes from: 17:7: ( '%' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__13
 *
 * Looks to match the characters the constitute the token T__13
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__13()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__13;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:17:7: ( '%' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:17:9: '%'
    {
         this->matchc('%');
        if  (this->hasException())
        {
            goto ruleT__13Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__13Ex; /* Prevent compiler warnings */
    ruleT__13Ex: ;

}
// $ANTLR end T__13

//   Comes from: 18:7: ( '&&' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__14
 *
 * Looks to match the characters the constitute the token T__14
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__14()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__14;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:18:7: ( '&&' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:18:9: '&&'
    {
        this->matchs(lit_2);
        if  (this->hasException())
        {
            goto ruleT__14Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__14Ex; /* Prevent compiler warnings */
    ruleT__14Ex: ;

}
// $ANTLR end T__14

//   Comes from: 19:7: ( '&' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__15
 *
 * Looks to match the characters the constitute the token T__15
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__15()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__15;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:19:7: ( '&' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:19:9: '&'
    {
         this->matchc('&');
        if  (this->hasException())
        {
            goto ruleT__15Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__15Ex; /* Prevent compiler warnings */
    ruleT__15Ex: ;

}
// $ANTLR end T__15

//   Comes from: 20:7: ( '(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__16
 *
 * Looks to match the characters the constitute the token T__16
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__16()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__16;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:20:7: ( '(' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:20:9: '('
    {
         this->matchc('(');
        if  (this->hasException())
        {
            goto ruleT__16Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__16Ex; /* Prevent compiler warnings */
    ruleT__16Ex: ;

}
// $ANTLR end T__16

//   Comes from: 21:7: ( ')' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__17
 *
 * Looks to match the characters the constitute the token T__17
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__17()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__17;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:21:7: ( ')' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:21:9: ')'
    {
         this->matchc(')');
        if  (this->hasException())
        {
            goto ruleT__17Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__17Ex; /* Prevent compiler warnings */
    ruleT__17Ex: ;

}
// $ANTLR end T__17

//   Comes from: 22:7: ( '*' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__18
 *
 * Looks to match the characters the constitute the token T__18
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__18()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__18;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:22:7: ( '*' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:22:9: '*'
    {
         this->matchc('*');
        if  (this->hasException())
        {
            goto ruleT__18Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__18Ex; /* Prevent compiler warnings */
    ruleT__18Ex: ;

}
// $ANTLR end T__18

//   Comes from: 23:7: ( '+' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__19
 *
 * Looks to match the characters the constitute the token T__19
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__19()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__19;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:23:7: ( '+' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:23:9: '+'
    {
         this->matchc('+');
        if  (this->hasException())
        {
            goto ruleT__19Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__19Ex; /* Prevent compiler warnings */
    ruleT__19Ex: ;

}
// $ANTLR end T__19

//   Comes from: 24:7: ( ',' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__20
 *
 * Looks to match the characters the constitute the token T__20
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__20()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__20;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:24:7: ( ',' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:24:9: ','
    {
         this->matchc(',');
        if  (this->hasException())
        {
            goto ruleT__20Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__20Ex; /* Prevent compiler warnings */
    ruleT__20Ex: ;

}
// $ANTLR end T__20

//   Comes from: 25:7: ( '-' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__21
 *
 * Looks to match the characters the constitute the token T__21
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__21()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__21;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:25:7: ( '-' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:25:9: '-'
    {
         this->matchc('-');
        if  (this->hasException())
        {
            goto ruleT__21Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__21Ex; /* Prevent compiler warnings */
    ruleT__21Ex: ;

}
// $ANTLR end T__21

//   Comes from: 26:7: ( '.' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__22
 *
 * Looks to match the characters the constitute the token T__22
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__22()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__22;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:26:7: ( '.' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:26:9: '.'
    {
         this->matchc('.');
        if  (this->hasException())
        {
            goto ruleT__22Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__22Ex; /* Prevent compiler warnings */
    ruleT__22Ex: ;

}
// $ANTLR end T__22

//   Comes from: 27:7: ( '/' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__23
 *
 * Looks to match the characters the constitute the token T__23
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__23()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__23;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:27:7: ( '/' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:27:9: '/'
    {
         this->matchc('/');
        if  (this->hasException())
        {
            goto ruleT__23Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__23Ex; /* Prevent compiler warnings */
    ruleT__23Ex: ;

}
// $ANTLR end T__23

//   Comes from: 28:7: ( '<' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__24
 *
 * Looks to match the characters the constitute the token T__24
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__24()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__24;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:28:7: ( '<' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:28:9: '<'
    {
         this->matchc('<');
        if  (this->hasException())
        {
            goto ruleT__24Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__24Ex; /* Prevent compiler warnings */
    ruleT__24Ex: ;

}
// $ANTLR end T__24

//   Comes from: 29:7: ( '<=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__25
 *
 * Looks to match the characters the constitute the token T__25
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__25()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__25;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:29:7: ( '<=' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:29:9: '<='
    {
        this->matchs(lit_3);
        if  (this->hasException())
        {
            goto ruleT__25Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__25Ex; /* Prevent compiler warnings */
    ruleT__25Ex: ;

}
// $ANTLR end T__25

//   Comes from: 30:7: ( '==' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__26
 *
 * Looks to match the characters the constitute the token T__26
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__26()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__26;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:30:7: ( '==' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:30:9: '=='
    {
        this->matchs(lit_4);
        if  (this->hasException())
        {
            goto ruleT__26Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__26Ex; /* Prevent compiler warnings */
    ruleT__26Ex: ;

}
// $ANTLR end T__26

//   Comes from: 31:7: ( '>' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__27
 *
 * Looks to match the characters the constitute the token T__27
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__27()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__27;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:31:7: ( '>' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:31:9: '>'
    {
         this->matchc('>');
        if  (this->hasException())
        {
            goto ruleT__27Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__27Ex; /* Prevent compiler warnings */
    ruleT__27Ex: ;

}
// $ANTLR end T__27

//   Comes from: 32:7: ( '>=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__28
 *
 * Looks to match the characters the constitute the token T__28
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__28()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__28;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:32:7: ( '>=' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:32:9: '>='
    {
        this->matchs(lit_5);
        if  (this->hasException())
        {
            goto ruleT__28Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__28Ex; /* Prevent compiler warnings */
    ruleT__28Ex: ;

}
// $ANTLR end T__28

//   Comes from: 33:7: ( 'The' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__29
 *
 * Looks to match the characters the constitute the token T__29
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__29()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__29;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:33:7: ( 'The' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:33:9: 'The'
    {
        this->matchs(lit_6);
        if  (this->hasException())
        {
            goto ruleT__29Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__29Ex; /* Prevent compiler warnings */
    ruleT__29Ex: ;

}
// $ANTLR end T__29

//   Comes from: 34:7: ( '\\'' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__30
 *
 * Looks to match the characters the constitute the token T__30
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__30()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__30;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:34:7: ( '\\'' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:34:9: '\\''
    {
         this->matchc('\'');
        if  (this->hasException())
        {
            goto ruleT__30Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__30Ex; /* Prevent compiler warnings */
    ruleT__30Ex: ;

}
// $ANTLR end T__30

//   Comes from: 35:7: ( '^' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__31
 *
 * Looks to match the characters the constitute the token T__31
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__31()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__31;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:35:7: ( '^' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:35:9: '^'
    {
         this->matchc('^');
        if  (this->hasException())
        {
            goto ruleT__31Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__31Ex; /* Prevent compiler warnings */
    ruleT__31Ex: ;

}
// $ANTLR end T__31

//   Comes from: 36:7: ( 'a' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__32
 *
 * Looks to match the characters the constitute the token T__32
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__32()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__32;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:36:7: ( 'a' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:36:9: 'a'
    {
         this->matchc('a');
        if  (this->hasException())
        {
            goto ruleT__32Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__32Ex; /* Prevent compiler warnings */
    ruleT__32Ex: ;

}
// $ANTLR end T__32

//   Comes from: 37:7: ( 'and' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__33
 *
 * Looks to match the characters the constitute the token T__33
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__33()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__33;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:37:7: ( 'and' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:37:9: 'and'
    {
        this->matchs(lit_7);
        if  (this->hasException())
        {
            goto ruleT__33Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__33Ex; /* Prevent compiler warnings */
    ruleT__33Ex: ;

}
// $ANTLR end T__33

//   Comes from: 38:7: ( 'but' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__34
 *
 * Looks to match the characters the constitute the token T__34
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__34()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__34;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:38:7: ( 'but' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:38:9: 'but'
    {
        this->matchs(lit_8);
        if  (this->hasException())
        {
            goto ruleT__34Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__34Ex; /* Prevent compiler warnings */
    ruleT__34Ex: ;

}
// $ANTLR end T__34

//   Comes from: 39:7: ( 'closed' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__35
 *
 * Looks to match the characters the constitute the token T__35
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__35()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__35;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:39:7: ( 'closed' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:39:9: 'closed'
    {
        this->matchs(lit_9);
        if  (this->hasException())
        {
            goto ruleT__35Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__35Ex; /* Prevent compiler warnings */
    ruleT__35Ex: ;

}
// $ANTLR end T__35

//   Comes from: 40:7: ( 'contained' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__36
 *
 * Looks to match the characters the constitute the token T__36
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__36()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__36;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:40:7: ( 'contained' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:40:9: 'contained'
    {
        this->matchs(lit_10);
        if  (this->hasException())
        {
            goto ruleT__36Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__36Ex; /* Prevent compiler warnings */
    ruleT__36Ex: ;

}
// $ANTLR end T__36

//   Comes from: 41:7: ( 'glass' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__37
 *
 * Looks to match the characters the constitute the token T__37
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__37()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__37;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:41:7: ( 'glass' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:41:9: 'glass'
    {
        this->matchs(lit_11);
        if  (this->hasException())
        {
            goto ruleT__37Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__37Ex; /* Prevent compiler warnings */
    ruleT__37Ex: ;

}
// $ANTLR end T__37

//   Comes from: 42:7: ( 'had' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__38
 *
 * Looks to match the characters the constitute the token T__38
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__38()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__38;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:42:7: ( 'had' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:42:9: 'had'
    {
        this->matchs(lit_12);
        if  (this->hasException())
        {
            goto ruleT__38Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__38Ex; /* Prevent compiler warnings */
    ruleT__38Ex: ;

}
// $ANTLR end T__38

//   Comes from: 43:7: ( 'looking' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__39
 *
 * Looks to match the characters the constitute the token T__39
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__39()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__39;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:43:7: ( 'looking' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:43:9: 'looking'
    {
        this->matchs(lit_13);
        if  (this->hasException())
        {
            goto ruleT__39Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__39Ex; /* Prevent compiler warnings */
    ruleT__39Ex: ;

}
// $ANTLR end T__39

//   Comes from: 44:7: ( 'of' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__40
 *
 * Looks to match the characters the constitute the token T__40
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__40()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__40;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:44:7: ( 'of' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:44:9: 'of'
    {
        this->matchs(lit_14);
        if  (this->hasException())
        {
            goto ruleT__40Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__40Ex; /* Prevent compiler warnings */
    ruleT__40Ex: ;

}
// $ANTLR end T__40

//   Comes from: 45:7: ( 'opened' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__41
 *
 * Looks to match the characters the constitute the token T__41
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__41()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__41;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:45:7: ( 'opened' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:45:9: 'opened'
    {
        this->matchs(lit_15);
        if  (this->hasException())
        {
            goto ruleT__41Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__41Ex; /* Prevent compiler warnings */
    ruleT__41Ex: ;

}
// $ANTLR end T__41

//   Comes from: 46:7: ( 'piece' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__42
 *
 * Looks to match the characters the constitute the token T__42
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__42()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__42;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:46:7: ( 'piece' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:46:9: 'piece'
    {
        this->matchs(lit_16);
        if  (this->hasException())
        {
            goto ruleT__42Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__42Ex; /* Prevent compiler warnings */
    ruleT__42Ex: ;

}
// $ANTLR end T__42

//   Comes from: 47:7: ( 'room' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__43
 *
 * Looks to match the characters the constitute the token T__43
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__43()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__43;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:47:7: ( 'room' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:47:9: 'room'
    {
        this->matchs(lit_17);
        if  (this->hasException())
        {
            goto ruleT__43Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__43Ex; /* Prevent compiler warnings */
    ruleT__43Ex: ;

}
// $ANTLR end T__43

//   Comes from: 48:7: ( 's' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__44
 *
 * Looks to match the characters the constitute the token T__44
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__44()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__44;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:48:7: ( 's' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:48:9: 's'
    {
         this->matchc('s');
        if  (this->hasException())
        {
            goto ruleT__44Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__44Ex; /* Prevent compiler warnings */
    ruleT__44Ex: ;

}
// $ANTLR end T__44

//   Comes from: 49:7: ( 'spider' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__45
 *
 * Looks to match the characters the constitute the token T__45
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__45()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__45;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:49:7: ( 'spider' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:49:9: 'spider'
    {
        this->matchs(lit_18);
        if  (this->hasException())
        {
            goto ruleT__45Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__45Ex; /* Prevent compiler warnings */
    ruleT__45Ex: ;

}
// $ANTLR end T__45

//   Comes from: 50:7: ( 'then' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__46
 *
 * Looks to match the characters the constitute the token T__46
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__46()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__46;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:50:7: ( 'then' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:50:9: 'then'
    {
        this->matchs(lit_19);
        if  (this->hasException())
        {
            goto ruleT__46Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__46Ex; /* Prevent compiler warnings */
    ruleT__46Ex: ;

}
// $ANTLR end T__46

//   Comes from: 51:7: ( 'too' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__47
 *
 * Looks to match the characters the constitute the token T__47
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__47()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__47;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:51:7: ( 'too' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:51:9: 'too'
    {
        this->matchs(lit_20);
        if  (this->hasException())
        {
            goto ruleT__47Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__47Ex; /* Prevent compiler warnings */
    ruleT__47Ex: ;

}
// $ANTLR end T__47

//   Comes from: 52:7: ( 'was' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__48
 *
 * Looks to match the characters the constitute the token T__48
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__48()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__48;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:52:7: ( 'was' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:52:9: 'was'
    {
        this->matchs(lit_21);
        if  (this->hasException())
        {
            goto ruleT__48Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__48Ex; /* Prevent compiler warnings */
    ruleT__48Ex: ;

}
// $ANTLR end T__48

//   Comes from: 53:7: ( '|' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__49
 *
 * Looks to match the characters the constitute the token T__49
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__49()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__49;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:53:7: ( '|' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:53:9: '|'
    {
         this->matchc('|');
        if  (this->hasException())
        {
            goto ruleT__49Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__49Ex; /* Prevent compiler warnings */
    ruleT__49Ex: ;

}
// $ANTLR end T__49

//   Comes from: 54:7: ( '||' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__50
 *
 * Looks to match the characters the constitute the token T__50
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__50()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__50;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:54:7: ( '||' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:54:9: '||'
    {
        this->matchs(lit_22);
        if  (this->hasException())
        {
            goto ruleT__50Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__50Ex; /* Prevent compiler warnings */
    ruleT__50Ex: ;

}
// $ANTLR end T__50

//   Comes from: 55:7: ( '~' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__51
 *
 * Looks to match the characters the constitute the token T__51
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__51()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__51;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:55:7: ( '~' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:55:9: '~'
    {
         this->matchc('~');
        if  (this->hasException())
        {
            goto ruleT__51Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__51Ex; /* Prevent compiler warnings */
    ruleT__51Ex: ;

}
// $ANTLR end T__51

//   Comes from: 74:5: ( 'number' | 'letter' | 'sentence' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start TYPE
 *
 * Looks to match the characters the constitute the token TYPE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mTYPE()
{
    ANTLR_UINT32	_type;
      


    _type	    = TYPE;


    {
        //  E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:74:5: ( 'number' | 'letter' | 'sentence' )

        ANTLR_UINT32 alt1;

        alt1=3;

        switch ( this->LA(1) )
        {
        case 'n':
        	{
        		alt1=1;
        	}
            break;
        case 'l':
        	{
        		alt1=2;
        	}
            break;
        case 's':
        	{
        		alt1=3;
        	}
            break;

        default:
            ExceptionBaseType* ex = new ANTLR_Exception< MAliceLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            ex->set_decisionNum( 1 );
            ex->set_state( 0 );


            goto ruleTYPEEx;

        }

        switch (alt1)
        {
    	case 1:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:74:9: 'number'
    	    {
    	        this->matchs(lit_23);
    	        if  (this->hasException())
    	        {
    	            goto ruleTYPEEx;
    	        }




    	    }
    	    break;
    	case 2:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:74:20: 'letter'
    	    {
    	        this->matchs(lit_24);
    	        if  (this->hasException())
    	        {
    	            goto ruleTYPEEx;
    	        }




    	    }
    	    break;
    	case 3:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:74:31: 'sentence'
    	    {
    	        this->matchs(lit_25);
    	        if  (this->hasException())
    	        {
    	            goto ruleTYPEEx;
    	        }




    	    }
    	    break;

        }
    }
	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleTYPEEx; /* Prevent compiler warnings */
    ruleTYPEEx: ;

}
// $ANTLR end TYPE

//   Comes from: 75:4: ( ( '0' .. '9' )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start INT
 *
 * Looks to match the characters the constitute the token INT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mINT()
{
    ANTLR_UINT32	_type;
      


    _type	    = INT;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:75:4: ( ( '0' .. '9' )+ )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:75:9: ( '0' .. '9' )+
    {
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:75:9: ( '0' .. '9' )+
        {
            int cnt2=0;

            for (;;)
            {
                int alt2=2;
        	switch ( this->LA(1) )
        	{
        	case '0':
        	case '1':
        	case '2':
        	case '3':
        	case '4':
        	case '5':
        	case '6':
        	case '7':
        	case '8':
        	case '9':
        		{
        			alt2=1;
        		}
        	    break;

        	}

        	switch (alt2)
        	{
        	    case 1:
        	        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:
        	        {
        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
        	            {
        	                this->consume();
        	            }
        	            else
        	            {
        	                new ANTLR_Exception< MAliceLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	                this->recover();
        	                goto ruleINTEx;
        	            }


        	        }
        	        break;

        	    default:

        		if ( cnt2 >= 1 )
        		{
        		    goto loop2;
        		}
        		/* mismatchedSetEx()
        		 */
        		new ANTLR_Exception< MAliceLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


        		goto ruleINTEx;
        	}
        	cnt2++;
            }
            loop2: ;	/* Jump to here if this rule does not match */
        }

    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleINTEx; /* Prevent compiler warnings */
    ruleINTEx: ;

}
// $ANTLR end INT

//   Comes from: 76:3: ( ( 'a' .. 'z' | 'A' .. 'Z' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ID
 *
 * Looks to match the characters the constitute the token ID
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mID()
{
    ANTLR_UINT32	_type;
      


    _type	    = ID;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:76:3: ( ( 'a' .. 'z' | 'A' .. 'Z' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:76:9: ( 'a' .. 'z' | 'A' .. 'Z' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
    {
        if ( ((this->LA(1) >= 'A') && (this->LA(1) <= 'Z')) || ((this->LA(1) >= 'a') && (this->LA(1) <= 'z')) )
        {
            this->consume();
        }
        else
        {
            new ANTLR_Exception< MAliceLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

            this->recover();
            goto ruleIDEx;
        }


        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:76:29: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*

        for (;;)
        {
            int alt3=2;
            switch ( this->LA(1) )
            {
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'G':
            case 'H':
            case 'I':
            case 'J':
            case 'K':
            case 'L':
            case 'M':
            case 'N':
            case 'O':
            case 'P':
            case 'Q':
            case 'R':
            case 'S':
            case 'T':
            case 'U':
            case 'V':
            case 'W':
            case 'X':
            case 'Y':
            case 'Z':
            case '_':
            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
            case 'g':
            case 'h':
            case 'i':
            case 'j':
            case 'k':
            case 'l':
            case 'm':
            case 'n':
            case 'o':
            case 'p':
            case 'q':
            case 'r':
            case 's':
            case 't':
            case 'u':
            case 'v':
            case 'w':
            case 'x':
            case 'y':
            case 'z':
            	{
            		alt3=1;
            	}
                break;

            }

            switch (alt3)
            {
        	case 1:
        	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:
        	    {
        	        if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) || ((this->LA(1) >= 'A') && (this->LA(1) <= 'Z')) || this->LA(1) == '_' || ((this->LA(1) >= 'a') && (this->LA(1) <= 'z')) )
        	        {
        	            this->consume();
        	        }
        	        else
        	        {
        	            new ANTLR_Exception< MAliceLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	            this->recover();
        	            goto ruleIDEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop3;	/* break out of the loop */
        	    break;
            }
        }
        loop3: ; /* Jump out to here if this rule does not match */


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleIDEx; /* Prevent compiler warnings */
    ruleIDEx: ;

}
// $ANTLR end ID

//   Comes from: 77:5: ( '\\'' 'a' .. 'z' '\\'' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start CHAR
 *
 * Looks to match the characters the constitute the token CHAR
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mCHAR()
{
    ANTLR_UINT32	_type;
      


    _type	    = CHAR;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:77:5: ( '\\'' 'a' .. 'z' '\\'' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:77:9: '\\'' 'a' .. 'z' '\\''
    {
         this->matchc('\'');
        if  (this->hasException())
        {
            goto ruleCHAREx;
        }


        this->matchRange('a', 'z');
        if  (this->hasException())
        {
            goto ruleCHAREx;
        }


         this->matchc('\'');
        if  (this->hasException())
        {
            goto ruleCHAREx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleCHAREx; /* Prevent compiler warnings */
    ruleCHAREx: ;

}
// $ANTLR end CHAR

//   Comes from: 78:7: ( '\"' (~ ( '\"' ) )* '\"' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start STRING
 *
 * Looks to match the characters the constitute the token STRING
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mSTRING()
{
    ANTLR_UINT32	_type;
      


    _type	    = STRING;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:78:7: ( '\"' (~ ( '\"' ) )* '\"' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:78:9: '\"' (~ ( '\"' ) )* '\"'
    {
         this->matchc('"');
        if  (this->hasException())
        {
            goto ruleSTRINGEx;
        }


        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:78:13: (~ ( '\"' ) )*

        for (;;)
        {
            int alt4=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA4_0 = this->LA(1);
                if ( (((LA4_0 >= 0x0000) && (LA4_0 <= '!')) || ((LA4_0 >= '#') && (LA4_0 <= 0xFFFF))))
                {
                    alt4=1;
                }

            }
            switch (alt4)
            {
        	case 1:
        	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:
        	    {
        	        if ( ((this->LA(1) >= 0x0000) && (this->LA(1) <= '!')) || ((this->LA(1) >= '#') && (this->LA(1) <= 0xFFFF)) )
        	        {
        	            this->consume();
        	        }
        	        else
        	        {
        	            new ANTLR_Exception< MAliceLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	            this->recover();
        	            goto ruleSTRINGEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop4;	/* break out of the loop */
        	    break;
            }
        }
        loop4: ; /* Jump out to here if this rule does not match */


         this->matchc('"');
        if  (this->hasException())
        {
            goto ruleSTRINGEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleSTRINGEx; /* Prevent compiler warnings */
    ruleSTRINGEx: ;

}
// $ANTLR end STRING

//   Comes from: 80:3: ( ( ' ' | '\\t' | '\\r' | '\\n' )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start WS
 *
 * Looks to match the characters the constitute the token WS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mWS()
{
    ANTLR_UINT32	_type;
      


    _type	    = WS;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:80:3: ( ( ' ' | '\\t' | '\\r' | '\\n' )+ )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:80:10: ( ' ' | '\\t' | '\\r' | '\\n' )+
    {
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:80:10: ( ' ' | '\\t' | '\\r' | '\\n' )+
        {
            int cnt5=0;

            for (;;)
            {
                int alt5=2;
        	switch ( this->LA(1) )
        	{
        	case '\t':
        	case '\n':
        	case '\r':
        	case ' ':
        		{
        			alt5=1;
        		}
        	    break;

        	}

        	switch (alt5)
        	{
        	    case 1:
        	        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:
        	        {
        	            if ( ((this->LA(1) >= '\t') && (this->LA(1) <= '\n')) || this->LA(1) == '\r' || this->LA(1) == ' ' )
        	            {
        	                this->consume();
        	            }
        	            else
        	            {
        	                new ANTLR_Exception< MAliceLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	                this->recover();
        	                goto ruleWSEx;
        	            }


        	        }
        	        break;

        	    default:

        		if ( cnt5 >= 1 )
        		{
        		    goto loop5;
        		}
        		/* mismatchedSetEx()
        		 */
        		new ANTLR_Exception< MAliceLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


        		goto ruleWSEx;
        	}
        	cnt5++;
            }
            loop5: ;	/* Jump to here if this rule does not match */
        }

        {
            this->get_state()->get_channel() = HIDDEN;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleWSEx; /* Prevent compiler warnings */
    ruleWSEx: ;

}
// $ANTLR end WS

//   Comes from: 81:8: ( '###' (~ ( '\\r' | '\\n' ) )* )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start COMMENT
 *
 * Looks to match the characters the constitute the token COMMENT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mCOMMENT()
{
    ANTLR_UINT32	_type;
      


    _type	    = COMMENT;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:81:8: ( '###' (~ ( '\\r' | '\\n' ) )* )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:81:10: '###' (~ ( '\\r' | '\\n' ) )*
    {
        this->matchs(lit_26);
        if  (this->hasException())
        {
            goto ruleCOMMENTEx;
        }




        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:81:16: (~ ( '\\r' | '\\n' ) )*

        for (;;)
        {
            int alt6=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA6_0 = this->LA(1);
                if ( (((LA6_0 >= 0x0000) && (LA6_0 <= '\t')) || ((LA6_0 >= 0x000B) && (LA6_0 <= '\f')) || ((LA6_0 >= 0x000E) && (LA6_0 <= 0xFFFF))))
                {
                    alt6=1;
                }

            }
            switch (alt6)
            {
        	case 1:
        	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:
        	    {
        	        if ( ((this->LA(1) >= 0x0000) && (this->LA(1) <= '\t')) || ((this->LA(1) >= 0x000B) && (this->LA(1) <= '\f')) || ((this->LA(1) >= 0x000E) && (this->LA(1) <= 0xFFFF)) )
        	        {
        	            this->consume();
        	        }
        	        else
        	        {
        	            new ANTLR_Exception< MAliceLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	            this->recover();
        	            goto ruleCOMMENTEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop6;	/* break out of the loop */
        	    break;
            }
        }
        loop6: ; /* Jump out to here if this rule does not match */


        {
            this->get_state()->get_channel() = HIDDEN;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleCOMMENTEx; /* Prevent compiler warnings */
    ruleCOMMENTEx: ;

}
// $ANTLR end COMMENT

/** This is the entry point in to the lexer from an object that
 *  wants to generate the next token, such as a pCOMMON_TOKEN_STREAM
 */
void
MAliceLexer::mTokens()
{
    {
        //  E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:1:8: ( T__11 | T__12 | T__13 | T__14 | T__15 | T__16 | T__17 | T__18 | T__19 | T__20 | T__21 | T__22 | T__23 | T__24 | T__25 | T__26 | T__27 | T__28 | T__29 | T__30 | T__31 | T__32 | T__33 | T__34 | T__35 | T__36 | T__37 | T__38 | T__39 | T__40 | T__41 | T__42 | T__43 | T__44 | T__45 | T__46 | T__47 | T__48 | T__49 | T__50 | T__51 | TYPE | INT | ID | CHAR | STRING | WS | COMMENT )

        ANTLR_UINT32 alt7;

        alt7=48;

        switch ( this->LA(1) )
        {
        case '!':
        	{
        		switch ( this->LA(2) )
        		{
        		case '=':
        			{
        				alt7=2;
        			}
        		    break;

        		default:
        		    alt7=1;
        		}

        	}
            break;
        case '%':
        	{
        		alt7=3;
        	}
            break;
        case '&':
        	{
        		switch ( this->LA(2) )
        		{
        		case '&':
        			{
        				alt7=4;
        			}
        		    break;

        		default:
        		    alt7=5;
        		}

        	}
            break;
        case '(':
        	{
        		alt7=6;
        	}
            break;
        case ')':
        	{
        		alt7=7;
        	}
            break;
        case '*':
        	{
        		alt7=8;
        	}
            break;
        case '+':
        	{
        		alt7=9;
        	}
            break;
        case ',':
        	{
        		alt7=10;
        	}
            break;
        case '-':
        	{
        		alt7=11;
        	}
            break;
        case '.':
        	{
        		alt7=12;
        	}
            break;
        case '/':
        	{
        		alt7=13;
        	}
            break;
        case '<':
        	{
        		switch ( this->LA(2) )
        		{
        		case '=':
        			{
        				alt7=15;
        			}
        		    break;

        		default:
        		    alt7=14;
        		}

        	}
            break;
        case '=':
        	{
        		alt7=16;
        	}
            break;
        case '>':
        	{
        		switch ( this->LA(2) )
        		{
        		case '=':
        			{
        				alt7=18;
        			}
        		    break;

        		default:
        		    alt7=17;
        		}

        	}
            break;
        case 'T':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'h':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'e':
        					{
        						switch ( this->LA(4) )
        						{
        						case '0':
        						case '1':
        						case '2':
        						case '3':
        						case '4':
        						case '5':
        						case '6':
        						case '7':
        						case '8':
        						case '9':
        						case 'A':
        						case 'B':
        						case 'C':
        						case 'D':
        						case 'E':
        						case 'F':
        						case 'G':
        						case 'H':
        						case 'I':
        						case 'J':
        						case 'K':
        						case 'L':
        						case 'M':
        						case 'N':
        						case 'O':
        						case 'P':
        						case 'Q':
        						case 'R':
        						case 'S':
        						case 'T':
        						case 'U':
        						case 'V':
        						case 'W':
        						case 'X':
        						case 'Y':
        						case 'Z':
        						case '_':
        						case 'a':
        						case 'b':
        						case 'c':
        						case 'd':
        						case 'e':
        						case 'f':
        						case 'g':
        						case 'h':
        						case 'i':
        						case 'j':
        						case 'k':
        						case 'l':
        						case 'm':
        						case 'n':
        						case 'o':
        						case 'p':
        						case 'q':
        						case 'r':
        						case 's':
        						case 't':
        						case 'u':
        						case 'v':
        						case 'w':
        						case 'x':
        						case 'y':
        						case 'z':
        							{
        								alt7=44;
        							}
        						    break;

        						default:
        						    alt7=19;
        						}

        					}
        				    break;

        				default:
        				    alt7=44;
        				}

        			}
        		    break;

        		default:
        		    alt7=44;
        		}

        	}
            break;
        case '\'':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'a':
        		case 'b':
        		case 'c':
        		case 'd':
        		case 'e':
        		case 'f':
        		case 'g':
        		case 'h':
        		case 'i':
        		case 'j':
        		case 'k':
        		case 'l':
        		case 'm':
        		case 'n':
        		case 'o':
        		case 'p':
        		case 'q':
        		case 'r':
        		case 's':
        		case 't':
        		case 'u':
        		case 'v':
        		case 'w':
        		case 'x':
        		case 'y':
        		case 'z':
        			{
        				alt7=45;
        			}
        		    break;

        		default:
        		    alt7=20;
        		}

        	}
            break;
        case '^':
        	{
        		alt7=21;
        	}
            break;
        case 'a':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'n':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'd':
        					{
        						switch ( this->LA(4) )
        						{
        						case '0':
        						case '1':
        						case '2':
        						case '3':
        						case '4':
        						case '5':
        						case '6':
        						case '7':
        						case '8':
        						case '9':
        						case 'A':
        						case 'B':
        						case 'C':
        						case 'D':
        						case 'E':
        						case 'F':
        						case 'G':
        						case 'H':
        						case 'I':
        						case 'J':
        						case 'K':
        						case 'L':
        						case 'M':
        						case 'N':
        						case 'O':
        						case 'P':
        						case 'Q':
        						case 'R':
        						case 'S':
        						case 'T':
        						case 'U':
        						case 'V':
        						case 'W':
        						case 'X':
        						case 'Y':
        						case 'Z':
        						case '_':
        						case 'a':
        						case 'b':
        						case 'c':
        						case 'd':
        						case 'e':
        						case 'f':
        						case 'g':
        						case 'h':
        						case 'i':
        						case 'j':
        						case 'k':
        						case 'l':
        						case 'm':
        						case 'n':
        						case 'o':
        						case 'p':
        						case 'q':
        						case 'r':
        						case 's':
        						case 't':
        						case 'u':
        						case 'v':
        						case 'w':
        						case 'x':
        						case 'y':
        						case 'z':
        							{
        								alt7=44;
        							}
        						    break;

        						default:
        						    alt7=23;
        						}

        					}
        				    break;

        				default:
        				    alt7=44;
        				}

        			}
        		    break;
        		case '0':
        		case '1':
        		case '2':
        		case '3':
        		case '4':
        		case '5':
        		case '6':
        		case '7':
        		case '8':
        		case '9':
        		case 'A':
        		case 'B':
        		case 'C':
        		case 'D':
        		case 'E':
        		case 'F':
        		case 'G':
        		case 'H':
        		case 'I':
        		case 'J':
        		case 'K':
        		case 'L':
        		case 'M':
        		case 'N':
        		case 'O':
        		case 'P':
        		case 'Q':
        		case 'R':
        		case 'S':
        		case 'T':
        		case 'U':
        		case 'V':
        		case 'W':
        		case 'X':
        		case 'Y':
        		case 'Z':
        		case '_':
        		case 'a':
        		case 'b':
        		case 'c':
        		case 'd':
        		case 'e':
        		case 'f':
        		case 'g':
        		case 'h':
        		case 'i':
        		case 'j':
        		case 'k':
        		case 'l':
        		case 'm':
        		case 'o':
        		case 'p':
        		case 'q':
        		case 'r':
        		case 's':
        		case 't':
        		case 'u':
        		case 'v':
        		case 'w':
        		case 'x':
        		case 'y':
        		case 'z':
        			{
        				alt7=44;
        			}
        		    break;

        		default:
        		    alt7=22;
        		}

        	}
            break;
        case 'b':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'u':
        			{
        				switch ( this->LA(3) )
        				{
        				case 't':
        					{
        						switch ( this->LA(4) )
        						{
        						case '0':
        						case '1':
        						case '2':
        						case '3':
        						case '4':
        						case '5':
        						case '6':
        						case '7':
        						case '8':
        						case '9':
        						case 'A':
        						case 'B':
        						case 'C':
        						case 'D':
        						case 'E':
        						case 'F':
        						case 'G':
        						case 'H':
        						case 'I':
        						case 'J':
        						case 'K':
        						case 'L':
        						case 'M':
        						case 'N':
        						case 'O':
        						case 'P':
        						case 'Q':
        						case 'R':
        						case 'S':
        						case 'T':
        						case 'U':
        						case 'V':
        						case 'W':
        						case 'X':
        						case 'Y':
        						case 'Z':
        						case '_':
        						case 'a':
        						case 'b':
        						case 'c':
        						case 'd':
        						case 'e':
        						case 'f':
        						case 'g':
        						case 'h':
        						case 'i':
        						case 'j':
        						case 'k':
        						case 'l':
        						case 'm':
        						case 'n':
        						case 'o':
        						case 'p':
        						case 'q':
        						case 'r':
        						case 's':
        						case 't':
        						case 'u':
        						case 'v':
        						case 'w':
        						case 'x':
        						case 'y':
        						case 'z':
        							{
        								alt7=44;
        							}
        						    break;

        						default:
        						    alt7=24;
        						}

        					}
        				    break;

        				default:
        				    alt7=44;
        				}

        			}
        		    break;

        		default:
        		    alt7=44;
        		}

        	}
            break;
        case 'c':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'l':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'o':
        					{
        						switch ( this->LA(4) )
        						{
        						case 's':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'e':
        									{
        										switch ( this->LA(6) )
        										{
        										case 'd':
        											{
        												switch ( this->LA(7) )
        												{
        												case '0':
        												case '1':
        												case '2':
        												case '3':
        												case '4':
        												case '5':
        												case '6':
        												case '7':
        												case '8':
        												case '9':
        												case 'A':
        												case 'B':
        												case 'C':
        												case 'D':
        												case 'E':
        												case 'F':
        												case 'G':
        												case 'H':
        												case 'I':
        												case 'J':
        												case 'K':
        												case 'L':
        												case 'M':
        												case 'N':
        												case 'O':
        												case 'P':
        												case 'Q':
        												case 'R':
        												case 'S':
        												case 'T':
        												case 'U':
        												case 'V':
        												case 'W':
        												case 'X':
        												case 'Y':
        												case 'Z':
        												case '_':
        												case 'a':
        												case 'b':
        												case 'c':
        												case 'd':
        												case 'e':
        												case 'f':
        												case 'g':
        												case 'h':
        												case 'i':
        												case 'j':
        												case 'k':
        												case 'l':
        												case 'm':
        												case 'n':
        												case 'o':
        												case 'p':
        												case 'q':
        												case 'r':
        												case 's':
        												case 't':
        												case 'u':
        												case 'v':
        												case 'w':
        												case 'x':
        												case 'y':
        												case 'z':
        													{
        														alt7=44;
        													}
        												    break;

        												default:
        												    alt7=25;
        												}

        											}
        										    break;

        										default:
        										    alt7=44;
        										}

        									}
        								    break;

        								default:
        								    alt7=44;
        								}

        							}
        						    break;

        						default:
        						    alt7=44;
        						}

        					}
        				    break;

        				default:
        				    alt7=44;
        				}

        			}
        		    break;
        		case 'o':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'n':
        					{
        						switch ( this->LA(4) )
        						{
        						case 't':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'a':
        									{
        										switch ( this->LA(6) )
        										{
        										case 'i':
        											{
        												switch ( this->LA(7) )
        												{
        												case 'n':
        													{
        														switch ( this->LA(8) )
        														{
        														case 'e':
        															{
        																switch ( this->LA(9) )
        																{
        																case 'd':
        																	{
        																		switch ( this->LA(10) )
        																		{
        																		case '0':
        																		case '1':
        																		case '2':
        																		case '3':
        																		case '4':
        																		case '5':
        																		case '6':
        																		case '7':
        																		case '8':
        																		case '9':
        																		case 'A':
        																		case 'B':
        																		case 'C':
        																		case 'D':
        																		case 'E':
        																		case 'F':
        																		case 'G':
        																		case 'H':
        																		case 'I':
        																		case 'J':
        																		case 'K':
        																		case 'L':
        																		case 'M':
        																		case 'N':
        																		case 'O':
        																		case 'P':
        																		case 'Q':
        																		case 'R':
        																		case 'S':
        																		case 'T':
        																		case 'U':
        																		case 'V':
        																		case 'W':
        																		case 'X':
        																		case 'Y':
        																		case 'Z':
        																		case '_':
        																		case 'a':
        																		case 'b':
        																		case 'c':
        																		case 'd':
        																		case 'e':
        																		case 'f':
        																		case 'g':
        																		case 'h':
        																		case 'i':
        																		case 'j':
        																		case 'k':
        																		case 'l':
        																		case 'm':
        																		case 'n':
        																		case 'o':
        																		case 'p':
        																		case 'q':
        																		case 'r':
        																		case 's':
        																		case 't':
        																		case 'u':
        																		case 'v':
        																		case 'w':
        																		case 'x':
        																		case 'y':
        																		case 'z':
        																			{
        																				alt7=44;
        																			}
        																		    break;

        																		default:
        																		    alt7=26;
        																		}

        																	}
        																    break;

        																default:
        																    alt7=44;
        																}

        															}
        														    break;

        														default:
        														    alt7=44;
        														}

        													}
        												    break;

        												default:
        												    alt7=44;
        												}

        											}
        										    break;

        										default:
        										    alt7=44;
        										}

        									}
        								    break;

        								default:
        								    alt7=44;
        								}

        							}
        						    break;

        						default:
        						    alt7=44;
        						}

        					}
        				    break;

        				default:
        				    alt7=44;
        				}

        			}
        		    break;

        		default:
        		    alt7=44;
        		}

        	}
            break;
        case 'g':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'l':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'a':
        					{
        						switch ( this->LA(4) )
        						{
        						case 's':
        							{
        								switch ( this->LA(5) )
        								{
        								case 's':
        									{
        										switch ( this->LA(6) )
        										{
        										case '0':
        										case '1':
        										case '2':
        										case '3':
        										case '4':
        										case '5':
        										case '6':
        										case '7':
        										case '8':
        										case '9':
        										case 'A':
        										case 'B':
        										case 'C':
        										case 'D':
        										case 'E':
        										case 'F':
        										case 'G':
        										case 'H':
        										case 'I':
        										case 'J':
        										case 'K':
        										case 'L':
        										case 'M':
        										case 'N':
        										case 'O':
        										case 'P':
        										case 'Q':
        										case 'R':
        										case 'S':
        										case 'T':
        										case 'U':
        										case 'V':
        										case 'W':
        										case 'X':
        										case 'Y':
        										case 'Z':
        										case '_':
        										case 'a':
        										case 'b':
        										case 'c':
        										case 'd':
        										case 'e':
        										case 'f':
        										case 'g':
        										case 'h':
        										case 'i':
        										case 'j':
        										case 'k':
        										case 'l':
        										case 'm':
        										case 'n':
        										case 'o':
        										case 'p':
        										case 'q':
        										case 'r':
        										case 's':
        										case 't':
        										case 'u':
        										case 'v':
        										case 'w':
        										case 'x':
        										case 'y':
        										case 'z':
        											{
        												alt7=44;
        											}
        										    break;

        										default:
        										    alt7=27;
        										}

        									}
        								    break;

        								default:
        								    alt7=44;
        								}

        							}
        						    break;

        						default:
        						    alt7=44;
        						}

        					}
        				    break;

        				default:
        				    alt7=44;
        				}

        			}
        		    break;

        		default:
        		    alt7=44;
        		}

        	}
            break;
        case 'h':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'a':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'd':
        					{
        						switch ( this->LA(4) )
        						{
        						case '0':
        						case '1':
        						case '2':
        						case '3':
        						case '4':
        						case '5':
        						case '6':
        						case '7':
        						case '8':
        						case '9':
        						case 'A':
        						case 'B':
        						case 'C':
        						case 'D':
        						case 'E':
        						case 'F':
        						case 'G':
        						case 'H':
        						case 'I':
        						case 'J':
        						case 'K':
        						case 'L':
        						case 'M':
        						case 'N':
        						case 'O':
        						case 'P':
        						case 'Q':
        						case 'R':
        						case 'S':
        						case 'T':
        						case 'U':
        						case 'V':
        						case 'W':
        						case 'X':
        						case 'Y':
        						case 'Z':
        						case '_':
        						case 'a':
        						case 'b':
        						case 'c':
        						case 'd':
        						case 'e':
        						case 'f':
        						case 'g':
        						case 'h':
        						case 'i':
        						case 'j':
        						case 'k':
        						case 'l':
        						case 'm':
        						case 'n':
        						case 'o':
        						case 'p':
        						case 'q':
        						case 'r':
        						case 's':
        						case 't':
        						case 'u':
        						case 'v':
        						case 'w':
        						case 'x':
        						case 'y':
        						case 'z':
        							{
        								alt7=44;
        							}
        						    break;

        						default:
        						    alt7=28;
        						}

        					}
        				    break;

        				default:
        				    alt7=44;
        				}

        			}
        		    break;

        		default:
        		    alt7=44;
        		}

        	}
            break;
        case 'l':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'o':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'o':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'k':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'i':
        									{
        										switch ( this->LA(6) )
        										{
        										case 'n':
        											{
        												switch ( this->LA(7) )
        												{
        												case 'g':
        													{
        														switch ( this->LA(8) )
        														{
        														case '0':
        														case '1':
        														case '2':
        														case '3':
        														case '4':
        														case '5':
        														case '6':
        														case '7':
        														case '8':
        														case '9':
        														case 'A':
        														case 'B':
        														case 'C':
        														case 'D':
        														case 'E':
        														case 'F':
        														case 'G':
        														case 'H':
        														case 'I':
        														case 'J':
        														case 'K':
        														case 'L':
        														case 'M':
        														case 'N':
        														case 'O':
        														case 'P':
        														case 'Q':
        														case 'R':
        														case 'S':
        														case 'T':
        														case 'U':
        														case 'V':
        														case 'W':
        														case 'X':
        														case 'Y':
        														case 'Z':
        														case '_':
        														case 'a':
        														case 'b':
        														case 'c':
        														case 'd':
        														case 'e':
        														case 'f':
        														case 'g':
        														case 'h':
        														case 'i':
        														case 'j':
        														case 'k':
        														case 'l':
        														case 'm':
        														case 'n':
        														case 'o':
        														case 'p':
        														case 'q':
        														case 'r':
        														case 's':
        														case 't':
        														case 'u':
        														case 'v':
        														case 'w':
        														case 'x':
        														case 'y':
        														case 'z':
        															{
        																alt7=44;
        															}
        														    break;

        														default:
        														    alt7=29;
        														}

        													}
        												    break;

        												default:
        												    alt7=44;
        												}

        											}
        										    break;

        										default:
        										    alt7=44;
        										}

        									}
        								    break;

        								default:
        								    alt7=44;
        								}

        							}
        						    break;

        						default:
        						    alt7=44;
        						}

        					}
        				    break;

        				default:
        				    alt7=44;
        				}

        			}
        		    break;
        		case 'e':
        			{
        				switch ( this->LA(3) )
        				{
        				case 't':
        					{
        						switch ( this->LA(4) )
        						{
        						case 't':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'e':
        									{
        										switch ( this->LA(6) )
        										{
        										case 'r':
        											{
        												switch ( this->LA(7) )
        												{
        												case '0':
        												case '1':
        												case '2':
        												case '3':
        												case '4':
        												case '5':
        												case '6':
        												case '7':
        												case '8':
        												case '9':
        												case 'A':
        												case 'B':
        												case 'C':
        												case 'D':
        												case 'E':
        												case 'F':
        												case 'G':
        												case 'H':
        												case 'I':
        												case 'J':
        												case 'K':
        												case 'L':
        												case 'M':
        												case 'N':
        												case 'O':
        												case 'P':
        												case 'Q':
        												case 'R':
        												case 'S':
        												case 'T':
        												case 'U':
        												case 'V':
        												case 'W':
        												case 'X':
        												case 'Y':
        												case 'Z':
        												case '_':
        												case 'a':
        												case 'b':
        												case 'c':
        												case 'd':
        												case 'e':
        												case 'f':
        												case 'g':
        												case 'h':
        												case 'i':
        												case 'j':
        												case 'k':
        												case 'l':
        												case 'm':
        												case 'n':
        												case 'o':
        												case 'p':
        												case 'q':
        												case 'r':
        												case 's':
        												case 't':
        												case 'u':
        												case 'v':
        												case 'w':
        												case 'x':
        												case 'y':
        												case 'z':
        													{
        														alt7=44;
        													}
        												    break;

        												default:
        												    alt7=42;
        												}

        											}
        										    break;

        										default:
        										    alt7=44;
        										}

        									}
        								    break;

        								default:
        								    alt7=44;
        								}

        							}
        						    break;

        						default:
        						    alt7=44;
        						}

        					}
        				    break;

        				default:
        				    alt7=44;
        				}

        			}
        		    break;

        		default:
        		    alt7=44;
        		}

        	}
            break;
        case 'o':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'f':
        			{
        				switch ( this->LA(3) )
        				{
        				case '0':
        				case '1':
        				case '2':
        				case '3':
        				case '4':
        				case '5':
        				case '6':
        				case '7':
        				case '8':
        				case '9':
        				case 'A':
        				case 'B':
        				case 'C':
        				case 'D':
        				case 'E':
        				case 'F':
        				case 'G':
        				case 'H':
        				case 'I':
        				case 'J':
        				case 'K':
        				case 'L':
        				case 'M':
        				case 'N':
        				case 'O':
        				case 'P':
        				case 'Q':
        				case 'R':
        				case 'S':
        				case 'T':
        				case 'U':
        				case 'V':
        				case 'W':
        				case 'X':
        				case 'Y':
        				case 'Z':
        				case '_':
        				case 'a':
        				case 'b':
        				case 'c':
        				case 'd':
        				case 'e':
        				case 'f':
        				case 'g':
        				case 'h':
        				case 'i':
        				case 'j':
        				case 'k':
        				case 'l':
        				case 'm':
        				case 'n':
        				case 'o':
        				case 'p':
        				case 'q':
        				case 'r':
        				case 's':
        				case 't':
        				case 'u':
        				case 'v':
        				case 'w':
        				case 'x':
        				case 'y':
        				case 'z':
        					{
        						alt7=44;
        					}
        				    break;

        				default:
        				    alt7=30;
        				}

        			}
        		    break;
        		case 'p':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'e':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'n':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'e':
        									{
        										switch ( this->LA(6) )
        										{
        										case 'd':
        											{
        												switch ( this->LA(7) )
        												{
        												case '0':
        												case '1':
        												case '2':
        												case '3':
        												case '4':
        												case '5':
        												case '6':
        												case '7':
        												case '8':
        												case '9':
        												case 'A':
        												case 'B':
        												case 'C':
        												case 'D':
        												case 'E':
        												case 'F':
        												case 'G':
        												case 'H':
        												case 'I':
        												case 'J':
        												case 'K':
        												case 'L':
        												case 'M':
        												case 'N':
        												case 'O':
        												case 'P':
        												case 'Q':
        												case 'R':
        												case 'S':
        												case 'T':
        												case 'U':
        												case 'V':
        												case 'W':
        												case 'X':
        												case 'Y':
        												case 'Z':
        												case '_':
        												case 'a':
        												case 'b':
        												case 'c':
        												case 'd':
        												case 'e':
        												case 'f':
        												case 'g':
        												case 'h':
        												case 'i':
        												case 'j':
        												case 'k':
        												case 'l':
        												case 'm':
        												case 'n':
        												case 'o':
        												case 'p':
        												case 'q':
        												case 'r':
        												case 's':
        												case 't':
        												case 'u':
        												case 'v':
        												case 'w':
        												case 'x':
        												case 'y':
        												case 'z':
        													{
        														alt7=44;
        													}
        												    break;

        												default:
        												    alt7=31;
        												}

        											}
        										    break;

        										default:
        										    alt7=44;
        										}

        									}
        								    break;

        								default:
        								    alt7=44;
        								}

        							}
        						    break;

        						default:
        						    alt7=44;
        						}

        					}
        				    break;

        				default:
        				    alt7=44;
        				}

        			}
        		    break;

        		default:
        		    alt7=44;
        		}

        	}
            break;
        case 'p':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'i':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'e':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'c':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'e':
        									{
        										switch ( this->LA(6) )
        										{
        										case '0':
        										case '1':
        										case '2':
        										case '3':
        										case '4':
        										case '5':
        										case '6':
        										case '7':
        										case '8':
        										case '9':
        										case 'A':
        										case 'B':
        										case 'C':
        										case 'D':
        										case 'E':
        										case 'F':
        										case 'G':
        										case 'H':
        										case 'I':
        										case 'J':
        										case 'K':
        										case 'L':
        										case 'M':
        										case 'N':
        										case 'O':
        										case 'P':
        										case 'Q':
        										case 'R':
        										case 'S':
        										case 'T':
        										case 'U':
        										case 'V':
        										case 'W':
        										case 'X':
        										case 'Y':
        										case 'Z':
        										case '_':
        										case 'a':
        										case 'b':
        										case 'c':
        										case 'd':
        										case 'e':
        										case 'f':
        										case 'g':
        										case 'h':
        										case 'i':
        										case 'j':
        										case 'k':
        										case 'l':
        										case 'm':
        										case 'n':
        										case 'o':
        										case 'p':
        										case 'q':
        										case 'r':
        										case 's':
        										case 't':
        										case 'u':
        										case 'v':
        										case 'w':
        										case 'x':
        										case 'y':
        										case 'z':
        											{
        												alt7=44;
        											}
        										    break;

        										default:
        										    alt7=32;
        										}

        									}
        								    break;

        								default:
        								    alt7=44;
        								}

        							}
        						    break;

        						default:
        						    alt7=44;
        						}

        					}
        				    break;

        				default:
        				    alt7=44;
        				}

        			}
        		    break;

        		default:
        		    alt7=44;
        		}

        	}
            break;
        case 'r':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'o':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'o':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'm':
        							{
        								switch ( this->LA(5) )
        								{
        								case '0':
        								case '1':
        								case '2':
        								case '3':
        								case '4':
        								case '5':
        								case '6':
        								case '7':
        								case '8':
        								case '9':
        								case 'A':
        								case 'B':
        								case 'C':
        								case 'D':
        								case 'E':
        								case 'F':
        								case 'G':
        								case 'H':
        								case 'I':
        								case 'J':
        								case 'K':
        								case 'L':
        								case 'M':
        								case 'N':
        								case 'O':
        								case 'P':
        								case 'Q':
        								case 'R':
        								case 'S':
        								case 'T':
        								case 'U':
        								case 'V':
        								case 'W':
        								case 'X':
        								case 'Y':
        								case 'Z':
        								case '_':
        								case 'a':
        								case 'b':
        								case 'c':
        								case 'd':
        								case 'e':
        								case 'f':
        								case 'g':
        								case 'h':
        								case 'i':
        								case 'j':
        								case 'k':
        								case 'l':
        								case 'm':
        								case 'n':
        								case 'o':
        								case 'p':
        								case 'q':
        								case 'r':
        								case 's':
        								case 't':
        								case 'u':
        								case 'v':
        								case 'w':
        								case 'x':
        								case 'y':
        								case 'z':
        									{
        										alt7=44;
        									}
        								    break;

        								default:
        								    alt7=33;
        								}

        							}
        						    break;

        						default:
        						    alt7=44;
        						}

        					}
        				    break;

        				default:
        				    alt7=44;
        				}

        			}
        		    break;

        		default:
        		    alt7=44;
        		}

        	}
            break;
        case 's':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'p':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'i':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'd':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'e':
        									{
        										switch ( this->LA(6) )
        										{
        										case 'r':
        											{
        												switch ( this->LA(7) )
        												{
        												case '0':
        												case '1':
        												case '2':
        												case '3':
        												case '4':
        												case '5':
        												case '6':
        												case '7':
        												case '8':
        												case '9':
        												case 'A':
        												case 'B':
        												case 'C':
        												case 'D':
        												case 'E':
        												case 'F':
        												case 'G':
        												case 'H':
        												case 'I':
        												case 'J':
        												case 'K':
        												case 'L':
        												case 'M':
        												case 'N':
        												case 'O':
        												case 'P':
        												case 'Q':
        												case 'R':
        												case 'S':
        												case 'T':
        												case 'U':
        												case 'V':
        												case 'W':
        												case 'X':
        												case 'Y':
        												case 'Z':
        												case '_':
        												case 'a':
        												case 'b':
        												case 'c':
        												case 'd':
        												case 'e':
        												case 'f':
        												case 'g':
        												case 'h':
        												case 'i':
        												case 'j':
        												case 'k':
        												case 'l':
        												case 'm':
        												case 'n':
        												case 'o':
        												case 'p':
        												case 'q':
        												case 'r':
        												case 's':
        												case 't':
        												case 'u':
        												case 'v':
        												case 'w':
        												case 'x':
        												case 'y':
        												case 'z':
        													{
        														alt7=44;
        													}
        												    break;

        												default:
        												    alt7=35;
        												}

        											}
        										    break;

        										default:
        										    alt7=44;
        										}

        									}
        								    break;

        								default:
        								    alt7=44;
        								}

        							}
        						    break;

        						default:
        						    alt7=44;
        						}

        					}
        				    break;

        				default:
        				    alt7=44;
        				}

        			}
        		    break;
        		case 'e':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'n':
        					{
        						switch ( this->LA(4) )
        						{
        						case 't':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'e':
        									{
        										switch ( this->LA(6) )
        										{
        										case 'n':
        											{
        												switch ( this->LA(7) )
        												{
        												case 'c':
        													{
        														switch ( this->LA(8) )
        														{
        														case 'e':
        															{
        																switch ( this->LA(9) )
        																{
        																case '0':
        																case '1':
        																case '2':
        																case '3':
        																case '4':
        																case '5':
        																case '6':
        																case '7':
        																case '8':
        																case '9':
        																case 'A':
        																case 'B':
        																case 'C':
        																case 'D':
        																case 'E':
        																case 'F':
        																case 'G':
        																case 'H':
        																case 'I':
        																case 'J':
        																case 'K':
        																case 'L':
        																case 'M':
        																case 'N':
        																case 'O':
        																case 'P':
        																case 'Q':
        																case 'R':
        																case 'S':
        																case 'T':
        																case 'U':
        																case 'V':
        																case 'W':
        																case 'X':
        																case 'Y':
        																case 'Z':
        																case '_':
        																case 'a':
        																case 'b':
        																case 'c':
        																case 'd':
        																case 'e':
        																case 'f':
        																case 'g':
        																case 'h':
        																case 'i':
        																case 'j':
        																case 'k':
        																case 'l':
        																case 'm':
        																case 'n':
        																case 'o':
        																case 'p':
        																case 'q':
        																case 'r':
        																case 's':
        																case 't':
        																case 'u':
        																case 'v':
        																case 'w':
        																case 'x':
        																case 'y':
        																case 'z':
        																	{
        																		alt7=44;
        																	}
        																    break;

        																default:
        																    alt7=42;
        																}

        															}
        														    break;

        														default:
        														    alt7=44;
        														}

        													}
        												    break;

        												default:
        												    alt7=44;
        												}

        											}
        										    break;

        										default:
        										    alt7=44;
        										}

        									}
        								    break;

        								default:
        								    alt7=44;
        								}

        							}
        						    break;

        						default:
        						    alt7=44;
        						}

        					}
        				    break;

        				default:
        				    alt7=44;
        				}

        			}
        		    break;
        		case '0':
        		case '1':
        		case '2':
        		case '3':
        		case '4':
        		case '5':
        		case '6':
        		case '7':
        		case '8':
        		case '9':
        		case 'A':
        		case 'B':
        		case 'C':
        		case 'D':
        		case 'E':
        		case 'F':
        		case 'G':
        		case 'H':
        		case 'I':
        		case 'J':
        		case 'K':
        		case 'L':
        		case 'M':
        		case 'N':
        		case 'O':
        		case 'P':
        		case 'Q':
        		case 'R':
        		case 'S':
        		case 'T':
        		case 'U':
        		case 'V':
        		case 'W':
        		case 'X':
        		case 'Y':
        		case 'Z':
        		case '_':
        		case 'a':
        		case 'b':
        		case 'c':
        		case 'd':
        		case 'f':
        		case 'g':
        		case 'h':
        		case 'i':
        		case 'j':
        		case 'k':
        		case 'l':
        		case 'm':
        		case 'n':
        		case 'o':
        		case 'q':
        		case 'r':
        		case 's':
        		case 't':
        		case 'u':
        		case 'v':
        		case 'w':
        		case 'x':
        		case 'y':
        		case 'z':
        			{
        				alt7=44;
        			}
        		    break;

        		default:
        		    alt7=34;
        		}

        	}
            break;
        case 't':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'h':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'e':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'n':
        							{
        								switch ( this->LA(5) )
        								{
        								case '0':
        								case '1':
        								case '2':
        								case '3':
        								case '4':
        								case '5':
        								case '6':
        								case '7':
        								case '8':
        								case '9':
        								case 'A':
        								case 'B':
        								case 'C':
        								case 'D':
        								case 'E':
        								case 'F':
        								case 'G':
        								case 'H':
        								case 'I':
        								case 'J':
        								case 'K':
        								case 'L':
        								case 'M':
        								case 'N':
        								case 'O':
        								case 'P':
        								case 'Q':
        								case 'R':
        								case 'S':
        								case 'T':
        								case 'U':
        								case 'V':
        								case 'W':
        								case 'X':
        								case 'Y':
        								case 'Z':
        								case '_':
        								case 'a':
        								case 'b':
        								case 'c':
        								case 'd':
        								case 'e':
        								case 'f':
        								case 'g':
        								case 'h':
        								case 'i':
        								case 'j':
        								case 'k':
        								case 'l':
        								case 'm':
        								case 'n':
        								case 'o':
        								case 'p':
        								case 'q':
        								case 'r':
        								case 's':
        								case 't':
        								case 'u':
        								case 'v':
        								case 'w':
        								case 'x':
        								case 'y':
        								case 'z':
        									{
        										alt7=44;
        									}
        								    break;

        								default:
        								    alt7=36;
        								}

        							}
        						    break;

        						default:
        						    alt7=44;
        						}

        					}
        				    break;

        				default:
        				    alt7=44;
        				}

        			}
        		    break;
        		case 'o':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'o':
        					{
        						switch ( this->LA(4) )
        						{
        						case '0':
        						case '1':
        						case '2':
        						case '3':
        						case '4':
        						case '5':
        						case '6':
        						case '7':
        						case '8':
        						case '9':
        						case 'A':
        						case 'B':
        						case 'C':
        						case 'D':
        						case 'E':
        						case 'F':
        						case 'G':
        						case 'H':
        						case 'I':
        						case 'J':
        						case 'K':
        						case 'L':
        						case 'M':
        						case 'N':
        						case 'O':
        						case 'P':
        						case 'Q':
        						case 'R':
        						case 'S':
        						case 'T':
        						case 'U':
        						case 'V':
        						case 'W':
        						case 'X':
        						case 'Y':
        						case 'Z':
        						case '_':
        						case 'a':
        						case 'b':
        						case 'c':
        						case 'd':
        						case 'e':
        						case 'f':
        						case 'g':
        						case 'h':
        						case 'i':
        						case 'j':
        						case 'k':
        						case 'l':
        						case 'm':
        						case 'n':
        						case 'o':
        						case 'p':
        						case 'q':
        						case 'r':
        						case 's':
        						case 't':
        						case 'u':
        						case 'v':
        						case 'w':
        						case 'x':
        						case 'y':
        						case 'z':
        							{
        								alt7=44;
        							}
        						    break;

        						default:
        						    alt7=37;
        						}

        					}
        				    break;

        				default:
        				    alt7=44;
        				}

        			}
        		    break;

        		default:
        		    alt7=44;
        		}

        	}
            break;
        case 'w':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'a':
        			{
        				switch ( this->LA(3) )
        				{
        				case 's':
        					{
        						switch ( this->LA(4) )
        						{
        						case '0':
        						case '1':
        						case '2':
        						case '3':
        						case '4':
        						case '5':
        						case '6':
        						case '7':
        						case '8':
        						case '9':
        						case 'A':
        						case 'B':
        						case 'C':
        						case 'D':
        						case 'E':
        						case 'F':
        						case 'G':
        						case 'H':
        						case 'I':
        						case 'J':
        						case 'K':
        						case 'L':
        						case 'M':
        						case 'N':
        						case 'O':
        						case 'P':
        						case 'Q':
        						case 'R':
        						case 'S':
        						case 'T':
        						case 'U':
        						case 'V':
        						case 'W':
        						case 'X':
        						case 'Y':
        						case 'Z':
        						case '_':
        						case 'a':
        						case 'b':
        						case 'c':
        						case 'd':
        						case 'e':
        						case 'f':
        						case 'g':
        						case 'h':
        						case 'i':
        						case 'j':
        						case 'k':
        						case 'l':
        						case 'm':
        						case 'n':
        						case 'o':
        						case 'p':
        						case 'q':
        						case 'r':
        						case 's':
        						case 't':
        						case 'u':
        						case 'v':
        						case 'w':
        						case 'x':
        						case 'y':
        						case 'z':
        							{
        								alt7=44;
        							}
        						    break;

        						default:
        						    alt7=38;
        						}

        					}
        				    break;

        				default:
        				    alt7=44;
        				}

        			}
        		    break;

        		default:
        		    alt7=44;
        		}

        	}
            break;
        case '|':
        	{
        		switch ( this->LA(2) )
        		{
        		case '|':
        			{
        				alt7=40;
        			}
        		    break;

        		default:
        		    alt7=39;
        		}

        	}
            break;
        case '~':
        	{
        		alt7=41;
        	}
            break;
        case 'n':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'u':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'm':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'b':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'e':
        									{
        										switch ( this->LA(6) )
        										{
        										case 'r':
        											{
        												switch ( this->LA(7) )
        												{
        												case '0':
        												case '1':
        												case '2':
        												case '3':
        												case '4':
        												case '5':
        												case '6':
        												case '7':
        												case '8':
        												case '9':
        												case 'A':
        												case 'B':
        												case 'C':
        												case 'D':
        												case 'E':
        												case 'F':
        												case 'G':
        												case 'H':
        												case 'I':
        												case 'J':
        												case 'K':
        												case 'L':
        												case 'M':
        												case 'N':
        												case 'O':
        												case 'P':
        												case 'Q':
        												case 'R':
        												case 'S':
        												case 'T':
        												case 'U':
        												case 'V':
        												case 'W':
        												case 'X':
        												case 'Y':
        												case 'Z':
        												case '_':
        												case 'a':
        												case 'b':
        												case 'c':
        												case 'd':
        												case 'e':
        												case 'f':
        												case 'g':
        												case 'h':
        												case 'i':
        												case 'j':
        												case 'k':
        												case 'l':
        												case 'm':
        												case 'n':
        												case 'o':
        												case 'p':
        												case 'q':
        												case 'r':
        												case 's':
        												case 't':
        												case 'u':
        												case 'v':
        												case 'w':
        												case 'x':
        												case 'y':
        												case 'z':
        													{
        														alt7=44;
        													}
        												    break;

        												default:
        												    alt7=42;
        												}

        											}
        										    break;

        										default:
        										    alt7=44;
        										}

        									}
        								    break;

        								default:
        								    alt7=44;
        								}

        							}
        						    break;

        						default:
        						    alt7=44;
        						}

        					}
        				    break;

        				default:
        				    alt7=44;
        				}

        			}
        		    break;

        		default:
        		    alt7=44;
        		}

        	}
            break;
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        	{
        		alt7=43;
        	}
            break;
        case 'A':
        case 'B':
        case 'C':
        case 'D':
        case 'E':
        case 'F':
        case 'G':
        case 'H':
        case 'I':
        case 'J':
        case 'K':
        case 'L':
        case 'M':
        case 'N':
        case 'O':
        case 'P':
        case 'Q':
        case 'R':
        case 'S':
        case 'U':
        case 'V':
        case 'W':
        case 'X':
        case 'Y':
        case 'Z':
        case 'd':
        case 'e':
        case 'f':
        case 'i':
        case 'j':
        case 'k':
        case 'm':
        case 'q':
        case 'u':
        case 'v':
        case 'x':
        case 'y':
        case 'z':
        	{
        		alt7=44;
        	}
            break;
        case '"':
        	{
        		alt7=46;
        	}
            break;
        case '\t':
        case '\n':
        case '\r':
        case ' ':
        	{
        		alt7=47;
        	}
            break;
        case '#':
        	{
        		alt7=48;
        	}
            break;

        default:
            ExceptionBaseType* ex = new ANTLR_Exception< MAliceLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            ex->set_decisionNum( 7 );
            ex->set_state( 0 );


            goto ruleTokensEx;

        }

        switch (alt7)
        {
    	case 1:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:1:10: T__11
    	    {
    	        /* 1:10: T__11 */
    	        mT__11();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 2:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:1:16: T__12
    	    {
    	        /* 1:16: T__12 */
    	        mT__12();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 3:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:1:22: T__13
    	    {
    	        /* 1:22: T__13 */
    	        mT__13();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 4:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:1:28: T__14
    	    {
    	        /* 1:28: T__14 */
    	        mT__14();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 5:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:1:34: T__15
    	    {
    	        /* 1:34: T__15 */
    	        mT__15();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 6:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:1:40: T__16
    	    {
    	        /* 1:40: T__16 */
    	        mT__16();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 7:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:1:46: T__17
    	    {
    	        /* 1:46: T__17 */
    	        mT__17();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 8:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:1:52: T__18
    	    {
    	        /* 1:52: T__18 */
    	        mT__18();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 9:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:1:58: T__19
    	    {
    	        /* 1:58: T__19 */
    	        mT__19();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 10:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:1:64: T__20
    	    {
    	        /* 1:64: T__20 */
    	        mT__20();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 11:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:1:70: T__21
    	    {
    	        /* 1:70: T__21 */
    	        mT__21();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 12:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:1:76: T__22
    	    {
    	        /* 1:76: T__22 */
    	        mT__22();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 13:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:1:82: T__23
    	    {
    	        /* 1:82: T__23 */
    	        mT__23();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 14:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:1:88: T__24
    	    {
    	        /* 1:88: T__24 */
    	        mT__24();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 15:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:1:94: T__25
    	    {
    	        /* 1:94: T__25 */
    	        mT__25();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 16:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:1:100: T__26
    	    {
    	        /* 1:100: T__26 */
    	        mT__26();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 17:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:1:106: T__27
    	    {
    	        /* 1:106: T__27 */
    	        mT__27();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 18:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:1:112: T__28
    	    {
    	        /* 1:112: T__28 */
    	        mT__28();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 19:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:1:118: T__29
    	    {
    	        /* 1:118: T__29 */
    	        mT__29();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 20:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:1:124: T__30
    	    {
    	        /* 1:124: T__30 */
    	        mT__30();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 21:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:1:130: T__31
    	    {
    	        /* 1:130: T__31 */
    	        mT__31();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 22:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:1:136: T__32
    	    {
    	        /* 1:136: T__32 */
    	        mT__32();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 23:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:1:142: T__33
    	    {
    	        /* 1:142: T__33 */
    	        mT__33();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 24:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:1:148: T__34
    	    {
    	        /* 1:148: T__34 */
    	        mT__34();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 25:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:1:154: T__35
    	    {
    	        /* 1:154: T__35 */
    	        mT__35();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 26:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:1:160: T__36
    	    {
    	        /* 1:160: T__36 */
    	        mT__36();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 27:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:1:166: T__37
    	    {
    	        /* 1:166: T__37 */
    	        mT__37();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 28:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:1:172: T__38
    	    {
    	        /* 1:172: T__38 */
    	        mT__38();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 29:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:1:178: T__39
    	    {
    	        /* 1:178: T__39 */
    	        mT__39();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 30:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:1:184: T__40
    	    {
    	        /* 1:184: T__40 */
    	        mT__40();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 31:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:1:190: T__41
    	    {
    	        /* 1:190: T__41 */
    	        mT__41();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 32:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:1:196: T__42
    	    {
    	        /* 1:196: T__42 */
    	        mT__42();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 33:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:1:202: T__43
    	    {
    	        /* 1:202: T__43 */
    	        mT__43();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 34:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:1:208: T__44
    	    {
    	        /* 1:208: T__44 */
    	        mT__44();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 35:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:1:214: T__45
    	    {
    	        /* 1:214: T__45 */
    	        mT__45();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 36:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:1:220: T__46
    	    {
    	        /* 1:220: T__46 */
    	        mT__46();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 37:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:1:226: T__47
    	    {
    	        /* 1:226: T__47 */
    	        mT__47();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 38:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:1:232: T__48
    	    {
    	        /* 1:232: T__48 */
    	        mT__48();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 39:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:1:238: T__49
    	    {
    	        /* 1:238: T__49 */
    	        mT__49();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 40:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:1:244: T__50
    	    {
    	        /* 1:244: T__50 */
    	        mT__50();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 41:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:1:250: T__51
    	    {
    	        /* 1:250: T__51 */
    	        mT__51();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 42:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:1:256: TYPE
    	    {
    	        /* 1:256: TYPE */
    	        mTYPE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 43:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:1:261: INT
    	    {
    	        /* 1:261: INT */
    	        mINT();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 44:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:1:265: ID
    	    {
    	        /* 1:265: ID */
    	        mID();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 45:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:1:268: CHAR
    	    {
    	        /* 1:268: CHAR */
    	        mCHAR();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 46:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:1:273: STRING
    	    {
    	        /* 1:273: STRING */
    	        mSTRING();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 47:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:1:280: WS
    	    {
    	        /* 1:280: WS */
    	        mWS();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 48:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:1:283: COMMENT
    	    {
    	        /* 1:283: COMMENT */
    	        mCOMMENT();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;

        }
    }


    goto ruleTokensEx; /* Prevent compiler warnings */
ruleTokensEx: ;
}

/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */
/* End of Lexer code
 * ================================================
 * ================================================
 */

	}



/* End of code
 * =============================================================================
 */
