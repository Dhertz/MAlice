/** \file
 *  This C++ source file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g
 *     -                            On : 2012-11-08 01:05:46
 *     -                for the parser : MAliceParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C++ language generator and runtime by Gokulakannan Somasundaram ( heavy lifting from C Run-time by Jim Idle )
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Gokulakannan Somasundaram, ElectronDB
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "MAliceParser.hpp"
/* ----------------------------------------- */


/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */

	namespace  MAlice  {

using namespace antlr3;
/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
ANTLR_UINT8*   MAliceParserTokenNames[67+4]
     = {
        (ANTLR_UINT8*) "<invalid>",       /* String to print to indicate an invalid token */
        (ANTLR_UINT8*) "<EOR>",
        (ANTLR_UINT8*) "<DOWN>",
        (ANTLR_UINT8*) "<UP>",
        (ANTLR_UINT8*) "CHAR",
        (ANTLR_UINT8*) "COMMENT",
        (ANTLR_UINT8*) "ID",
        (ANTLR_UINT8*) "INT",
        (ANTLR_UINT8*) "STRING",
        (ANTLR_UINT8*) "TYPE",
        (ANTLR_UINT8*) "WS",
        (ANTLR_UINT8*) "'!'",
        (ANTLR_UINT8*) "'!='",
        (ANTLR_UINT8*) "'%'",
        (ANTLR_UINT8*) "'&&'",
        (ANTLR_UINT8*) "'&'",
        (ANTLR_UINT8*) "'('",
        (ANTLR_UINT8*) "')'",
        (ANTLR_UINT8*) "'*'",
        (ANTLR_UINT8*) "'+'",
        (ANTLR_UINT8*) "','",
        (ANTLR_UINT8*) "'-'",
        (ANTLR_UINT8*) "'.'",
        (ANTLR_UINT8*) "'/'",
        (ANTLR_UINT8*) "'<'",
        (ANTLR_UINT8*) "'<='",
        (ANTLR_UINT8*) "'=='",
        (ANTLR_UINT8*) "'>'",
        (ANTLR_UINT8*) "'>='",
        (ANTLR_UINT8*) "'?'",
        (ANTLR_UINT8*) "'Alice'",
        (ANTLR_UINT8*) "'The'",
        (ANTLR_UINT8*) "'\\''",
        (ANTLR_UINT8*) "'^'",
        (ANTLR_UINT8*) "'a'",
        (ANTLR_UINT8*) "'and'",
        (ANTLR_UINT8*) "'ate'",
        (ANTLR_UINT8*) "'became'",
        (ANTLR_UINT8*) "'because'",
        (ANTLR_UINT8*) "'but'",
        (ANTLR_UINT8*) "'closed'",
        (ANTLR_UINT8*) "'contained'",
        (ANTLR_UINT8*) "'drank'",
        (ANTLR_UINT8*) "'either'",
        (ANTLR_UINT8*) "'enough'",
        (ANTLR_UINT8*) "'eventually'",
        (ANTLR_UINT8*) "'found'",
        (ANTLR_UINT8*) "'had'",
        (ANTLR_UINT8*) "'looking-glass'",
        (ANTLR_UINT8*) "'maybe'",
        (ANTLR_UINT8*) "'of'",
        (ANTLR_UINT8*) "'opened'",
        (ANTLR_UINT8*) "'or'",
        (ANTLR_UINT8*) "'perhaps'",
        (ANTLR_UINT8*) "'piece'",
        (ANTLR_UINT8*) "'room'",
        (ANTLR_UINT8*) "'s'",
        (ANTLR_UINT8*) "'said'",
        (ANTLR_UINT8*) "'so'",
        (ANTLR_UINT8*) "'spider'",
        (ANTLR_UINT8*) "'spoke'",
        (ANTLR_UINT8*) "'then'",
        (ANTLR_UINT8*) "'times'",
        (ANTLR_UINT8*) "'too'",
        (ANTLR_UINT8*) "'unsure'",
        (ANTLR_UINT8*) "'was'",
        (ANTLR_UINT8*) "'what'",
        (ANTLR_UINT8*) "'which'",
        (ANTLR_UINT8*) "'|'",
        (ANTLR_UINT8*) "'||'",
        (ANTLR_UINT8*) "'~'"
       };


/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g";

/** \brief Return the name of the grammar file that generated this code.
 */
const char* MAliceParser::getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new MAliceParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
MAliceParser::MAliceParser( StreamType* instream)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, NULL)

{
	// See if we can create a new parser with the standard constructor
	//
	this->init(instream);
}

/** \brief Create a new MAliceParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
MAliceParser::MAliceParser( StreamType* instream, RecognizerSharedStateType* state)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, state)

{
	this->init(instream );
}

void MAliceParser::init(StreamType* instream)
{
	/* Install the token table
	*/
	this->get_psrstate()->set_tokenNames( MAliceParserTokenNames );


}

void
MAliceParser::reset()
{
    this->get_rec()->reset();
}

/** Free the parser resources
 */
MAliceParser::~MAliceParser()
 {
}

/** Return token names used by this 
parser

 *
 * The returned pointer is used as an index into the token names table (using the token
 * number as the index).
 *
 * \return Pointer to first char * in the table.
 */
static ANTLR_UINT8**	getTokenNames()
{
        return MAliceParserTokenNames;
}


/* Declare the bitsets
 */
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_declarationList_in_program63_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_declarationList_in_program63( FOLLOW_declarationList_in_program63_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_EOF_in_program65_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_EOF_in_program65( FOLLOW_EOF_in_program65_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_declaration_in_declarationList73_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000042) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_declaration_in_declarationList73( FOLLOW_declaration_in_declarationList73_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_varDeclaration_in_declaration85_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_varDeclaration_in_declaration85( FOLLOW_varDeclaration_in_declaration85_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_funcDeclaration_in_declaration89_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_funcDeclaration_in_declaration89( FOLLOW_funcDeclaration_in_declaration89_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_procDeclaration_in_declaration93_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_procDeclaration_in_declaration93( FOLLOW_procDeclaration_in_declaration93_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_31_in_procDeclaration101_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_31_in_procDeclaration101( FOLLOW_31_in_procDeclaration101_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_48_in_procDeclaration103_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_48_in_procDeclaration103( FOLLOW_48_in_procDeclaration103_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_procDeclaration105_bits[]	= { ANTLR_UINT64_LIT(0x0000000000010000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_ID_in_procDeclaration105( FOLLOW_ID_in_procDeclaration105_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_headerParams_in_procDeclaration107_bits[]	= { ANTLR_UINT64_LIT(0x0008000000000000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_headerParams_in_procDeclaration107( FOLLOW_headerParams_in_procDeclaration107_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_body_in_procDeclaration109_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_body_in_procDeclaration109( FOLLOW_body_in_procDeclaration109_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_16_in_headerParams119_bits[]	= { ANTLR_UINT64_LIT(0x0800000000020200) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_16_in_headerParams119( FOLLOW_16_in_headerParams119_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_headerParamsList_in_headerParams121_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_headerParamsList_in_headerParams121( FOLLOW_headerParamsList_in_headerParams121_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_17_in_headerParams124_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_17_in_headerParams124( FOLLOW_17_in_headerParams124_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_headerParam_in_headerParamsList130_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_headerParam_in_headerParamsList130( FOLLOW_headerParam_in_headerParamsList130_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_20_in_headerParamsList133_bits[]	= { ANTLR_UINT64_LIT(0x0800000000000200) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_20_in_headerParamsList133( FOLLOW_20_in_headerParamsList133_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_headerParam_in_headerParamsList135_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_headerParam_in_headerParamsList135( FOLLOW_headerParam_in_headerParamsList135_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_59_in_headerParam148_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000200) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_59_in_headerParam148( FOLLOW_59_in_headerParam148_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_TYPE_in_headerParam151_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_TYPE_in_headerParam151( FOLLOW_TYPE_in_headerParam151_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_headerParam153_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_ID_in_headerParam153( FOLLOW_ID_in_headerParam153_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_16_in_callParams160_bits[]	= { ANTLR_UINT64_LIT(0x00000000002B09D0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_16_in_callParams160( FOLLOW_16_in_callParams160_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_callParamsList_in_callParams163_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_callParamsList_in_callParams163( FOLLOW_callParamsList_in_callParams163_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_17_in_callParams167_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_17_in_callParams167( FOLLOW_17_in_callParams167_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_callParamsList173_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_expr_in_callParamsList173( FOLLOW_expr_in_callParamsList173_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_20_in_callParamsList176_bits[]	= { ANTLR_UINT64_LIT(0x00000000002909D0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_20_in_callParamsList176( FOLLOW_20_in_callParamsList176_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_callParamsList178_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_expr_in_callParamsList178( FOLLOW_expr_in_callParamsList178_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_31_in_funcDeclaration187_bits[]	= { ANTLR_UINT64_LIT(0x0080000000000000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_31_in_funcDeclaration187( FOLLOW_31_in_funcDeclaration187_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_55_in_funcDeclaration189_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_55_in_funcDeclaration189( FOLLOW_55_in_funcDeclaration189_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_funcDeclaration191_bits[]	= { ANTLR_UINT64_LIT(0x0000000000010000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_ID_in_funcDeclaration191( FOLLOW_ID_in_funcDeclaration191_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_headerParams_in_funcDeclaration193_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_headerParams_in_funcDeclaration193( FOLLOW_headerParams_in_funcDeclaration193_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_41_in_funcDeclaration195_bits[]	= { ANTLR_UINT64_LIT(0x0000000400000000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_41_in_funcDeclaration195( FOLLOW_41_in_funcDeclaration195_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_34_in_funcDeclaration197_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000200) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_34_in_funcDeclaration197( FOLLOW_34_in_funcDeclaration197_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_TYPE_in_funcDeclaration199_bits[]	= { ANTLR_UINT64_LIT(0x0008000000000000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_TYPE_in_funcDeclaration199( FOLLOW_TYPE_in_funcDeclaration199_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_body_in_funcDeclaration201_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_body_in_funcDeclaration201( FOLLOW_body_in_funcDeclaration201_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_varDeclaration209_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_ID_in_varDeclaration209( FOLLOW_ID_in_varDeclaration209_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_65_in_varDeclaration211_bits[]	= { ANTLR_UINT64_LIT(0x0000000400000000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_65_in_varDeclaration211( FOLLOW_65_in_varDeclaration211_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_34_in_varDeclaration213_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000200) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_34_in_varDeclaration213( FOLLOW_34_in_varDeclaration213_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_TYPE_in_varDeclaration215_bits[]	= { ANTLR_UINT64_LIT(0xA004008800500000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_TYPE_in_varDeclaration215( FOLLOW_TYPE_in_varDeclaration215_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_63_in_varDeclaration219_bits[]	= { ANTLR_UINT64_LIT(0x2000008800500000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_63_in_varDeclaration219( FOLLOW_63_in_varDeclaration219_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_50_in_varDeclaration223_bits[]	= { ANTLR_UINT64_LIT(0x00000000002909D0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_50_in_varDeclaration223( FOLLOW_50_in_varDeclaration223_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_varDeclaration225_bits[]	= { ANTLR_UINT64_LIT(0x2000008800500000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_expr_in_varDeclaration225( FOLLOW_expr_in_varDeclaration225_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_delimiter_in_varDeclaration230_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_delimiter_in_varDeclaration230( FOLLOW_delimiter_in_varDeclaration230_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_varDeclaration252_bits[]	= { ANTLR_UINT64_LIT(0x0000800000000000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_ID_in_varDeclaration252( FOLLOW_ID_in_varDeclaration252_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_47_in_varDeclaration254_bits[]	= { ANTLR_UINT64_LIT(0x00000000002909D0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_47_in_varDeclaration254( FOLLOW_47_in_varDeclaration254_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_varDeclaration256_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000200) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_expr_in_varDeclaration256( FOLLOW_expr_in_varDeclaration256_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_TYPE_in_varDeclaration258_bits[]	= { ANTLR_UINT64_LIT(0x2000008800500000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_TYPE_in_varDeclaration258( FOLLOW_TYPE_in_varDeclaration258_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_delimiter_in_varDeclaration260_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_delimiter_in_varDeclaration260( FOLLOW_delimiter_in_varDeclaration260_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_51_in_body268_bits[]	= { ANTLR_UINT64_LIT(0x00282900C00001D0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_51_in_body268( FOLLOW_51_in_body268_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_declarationList_in_body272_bits[]	= { ANTLR_UINT64_LIT(0x00282800400001D0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_declarationList_in_body272( FOLLOW_declarationList_in_body272_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_statementList_in_body276_bits[]	= { ANTLR_UINT64_LIT(0x0000010000000000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_statementList_in_body276( FOLLOW_statementList_in_body276_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_40_in_body282_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_40_in_body282( FOLLOW_40_in_body282_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_statement_in_statementList290_bits[]	= { ANTLR_UINT64_LIT(0x00282800400001D2), ANTLR_UINT64_LIT(0x0000000000000004) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_statement_in_statementList290( FOLLOW_statement_in_statementList290_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_37_in_idOperations299_bits[]	= { ANTLR_UINT64_LIT(0x00000000002909D0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_37_in_idOperations299( FOLLOW_37_in_idOperations299_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_idOperations301_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_expr_in_idOperations301( FOLLOW_expr_in_idOperations301_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_36_in_idOperations305_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_36_in_idOperations305( FOLLOW_36_in_idOperations305_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_42_in_idOperations309_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_42_in_idOperations309( FOLLOW_42_in_idOperations309_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_body_in_statement316_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_body_in_statement316( FOLLOW_body_in_statement316_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_statement331_bits[]	= { ANTLR_UINT64_LIT(0x1200043100010000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_ID_in_statement331( FOLLOW_ID_in_statement331_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_32_in_statement334_bits[]	= { ANTLR_UINT64_LIT(0x0100000000000000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_32_in_statement334( FOLLOW_32_in_statement334_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_56_in_statement336_bits[]	= { ANTLR_UINT64_LIT(0x00000000002909D0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_56_in_statement336( FOLLOW_56_in_statement336_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_statement338_bits[]	= { ANTLR_UINT64_LIT(0x0040000000000000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_expr_in_statement338( FOLLOW_expr_in_statement338_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_54_in_statement340_bits[]	= { ANTLR_UINT64_LIT(0x1200043000010000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_54_in_statement340( FOLLOW_54_in_statement340_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_57_in_statement346_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_57_in_statement346( FOLLOW_57_in_statement346_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_30_in_statement348_bits[]	= { ANTLR_UINT64_LIT(0x2000008800500000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_30_in_statement348( FOLLOW_30_in_statement348_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_60_in_statement352_bits[]	= { ANTLR_UINT64_LIT(0x2000008800500000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_60_in_statement352( FOLLOW_60_in_statement352_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_callParams_in_statement357_bits[]	= { ANTLR_UINT64_LIT(0x2200008800500000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_callParams_in_statement357( FOLLOW_callParams_in_statement357_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_57_in_statement361_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_57_in_statement361( FOLLOW_57_in_statement361_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_30_in_statement363_bits[]	= { ANTLR_UINT64_LIT(0x2000008800500000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_30_in_statement363( FOLLOW_30_in_statement363_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_idOperations_in_statement370_bits[]	= { ANTLR_UINT64_LIT(0x2000008800500000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_idOperations_in_statement370( FOLLOW_idOperations_in_statement370_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_delimiter_in_statement373_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_delimiter_in_statement373( FOLLOW_delimiter_in_statement373_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_set_in_statement388_bits[]	= { ANTLR_UINT64_LIT(0x1200000000000000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_set_in_statement388( FOLLOW_set_in_statement388_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_57_in_statement401_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_57_in_statement401( FOLLOW_57_in_statement401_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_30_in_statement403_bits[]	= { ANTLR_UINT64_LIT(0x2000008800500000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_30_in_statement403( FOLLOW_30_in_statement403_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_60_in_statement407_bits[]	= { ANTLR_UINT64_LIT(0x2000008800500000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_60_in_statement407( FOLLOW_60_in_statement407_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_delimiter_in_statement410_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_delimiter_in_statement410( FOLLOW_delimiter_in_statement410_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_30_in_statement425_bits[]	= { ANTLR_UINT64_LIT(0x0000400000000000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_30_in_statement425( FOLLOW_30_in_statement425_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_46_in_statement427_bits[]	= { ANTLR_UINT64_LIT(0x00000000002909D0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_46_in_statement427( FOLLOW_46_in_statement427_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_statement429_bits[]	= { ANTLR_UINT64_LIT(0x0000000000400000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_expr_in_statement429( FOLLOW_expr_in_statement429_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_22_in_statement431_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_22_in_statement431( FOLLOW_22_in_statement431_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_66_in_statement446_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_66_in_statement446( FOLLOW_66_in_statement446_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_65_in_statement448_bits[]	= { ANTLR_UINT64_LIT(0x00000000002909D0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_65_in_statement448( FOLLOW_65_in_statement448_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_statement450_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_expr_in_statement450( FOLLOW_expr_in_statement450_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_29_in_statement452_bits[]	= { ANTLR_UINT64_LIT(0x2000008800500002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_29_in_statement452( FOLLOW_29_in_statement452_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_delimiter_in_statement455_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_delimiter_in_statement455( FOLLOW_delimiter_in_statement455_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_45_in_statement472_bits[]	= { ANTLR_UINT64_LIT(0x0000000000010000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_45_in_statement472( FOLLOW_45_in_statement472_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_16_in_statement474_bits[]	= { ANTLR_UINT64_LIT(0x00000000002909D0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_16_in_statement474( FOLLOW_16_in_statement474_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_statement476_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_expr_in_statement476( FOLLOW_expr_in_statement476_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_17_in_statement478_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_17_in_statement478( FOLLOW_17_in_statement478_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_38_in_statement480_bits[]	= { ANTLR_UINT64_LIT(0x00282800400001D0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_38_in_statement480( FOLLOW_38_in_statement480_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_statementList_in_statement482_bits[]	= { ANTLR_UINT64_LIT(0x0000100000000000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_statementList_in_statement482( FOLLOW_statementList_in_statement482_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_44_in_statement484_bits[]	= { ANTLR_UINT64_LIT(0x4000000000000000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_44_in_statement484( FOLLOW_44_in_statement484_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_62_in_statement486_bits[]	= { ANTLR_UINT64_LIT(0x2000008800500002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_62_in_statement486( FOLLOW_62_in_statement486_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_delimiter_in_statement489_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_delimiter_in_statement489( FOLLOW_delimiter_in_statement489_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_43_in_statement506_bits[]	= { ANTLR_UINT64_LIT(0x0000000000010000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_43_in_statement506( FOLLOW_43_in_statement506_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_16_in_statement508_bits[]	= { ANTLR_UINT64_LIT(0x00000000002909D0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_16_in_statement508( FOLLOW_16_in_statement508_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_statement510_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_expr_in_statement510( FOLLOW_expr_in_statement510_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_17_in_statement512_bits[]	= { ANTLR_UINT64_LIT(0x0400000000000000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_17_in_statement512( FOLLOW_17_in_statement512_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_58_in_statement514_bits[]	= { ANTLR_UINT64_LIT(0x00282800400001D0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_58_in_statement514( FOLLOW_58_in_statement514_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_statementList_in_statement516_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_statementList_in_statement516( FOLLOW_statementList_in_statement516_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_52_in_statement518_bits[]	= { ANTLR_UINT64_LIT(0x00282800400001D0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_52_in_statement518( FOLLOW_52_in_statement518_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_statementList_in_statement520_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_statementList_in_statement520( FOLLOW_statementList_in_statement520_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_38_in_statement522_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_38_in_statement522( FOLLOW_38_in_statement522_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_30_in_statement524_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_30_in_statement524( FOLLOW_30_in_statement524_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_65_in_statement526_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_65_in_statement526( FOLLOW_65_in_statement526_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_64_in_statement528_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000008) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_64_in_statement528( FOLLOW_64_in_statement528_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_67_in_statement530_bits[]	= { ANTLR_UINT64_LIT(0x2000008800500002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_67_in_statement530( FOLLOW_67_in_statement530_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_delimiter_in_statement533_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_delimiter_in_statement533( FOLLOW_delimiter_in_statement533_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_conditionalStatement_in_statement550_bits[]	= { ANTLR_UINT64_LIT(0x0010004000000000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_conditionalStatement_in_statement550( FOLLOW_conditionalStatement_in_statement550_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_52_in_statement553_bits[]	= { ANTLR_UINT64_LIT(0x00282800400001D0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_52_in_statement553( FOLLOW_52_in_statement553_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_statementList_in_statement555_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_statementList_in_statement555( FOLLOW_statementList_in_statement555_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_38_in_statement559_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_38_in_statement559( FOLLOW_38_in_statement559_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_30_in_statement561_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_30_in_statement561( FOLLOW_30_in_statement561_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_65_in_statement563_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_65_in_statement563( FOLLOW_65_in_statement563_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_64_in_statement565_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000008) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_64_in_statement565( FOLLOW_64_in_statement565_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_67_in_statement567_bits[]	= { ANTLR_UINT64_LIT(0x2000008800500002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_67_in_statement567( FOLLOW_67_in_statement567_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_delimiter_in_statement570_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_delimiter_in_statement570( FOLLOW_delimiter_in_statement570_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_53_in_conditionalStatement592_bits[]	= { ANTLR_UINT64_LIT(0x0000000000010000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_53_in_conditionalStatement592( FOLLOW_53_in_conditionalStatement592_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_16_in_conditionalStatement594_bits[]	= { ANTLR_UINT64_LIT(0x00000000002909D0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_16_in_conditionalStatement594( FOLLOW_16_in_conditionalStatement594_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_conditionalStatement596_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_expr_in_conditionalStatement596( FOLLOW_expr_in_conditionalStatement596_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_17_in_conditionalStatement598_bits[]	= { ANTLR_UINT64_LIT(0x0400000000000000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_17_in_conditionalStatement598( FOLLOW_17_in_conditionalStatement598_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_58_in_conditionalStatement600_bits[]	= { ANTLR_UINT64_LIT(0x00282800400001D0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_58_in_conditionalStatement600( FOLLOW_58_in_conditionalStatement600_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_statementList_in_conditionalStatement602_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_statementList_in_conditionalStatement602( FOLLOW_statementList_in_conditionalStatement602_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_52_in_conditionalStatement606_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_52_in_conditionalStatement606( FOLLOW_52_in_conditionalStatement606_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_49_in_conditionalStatement608_bits[]	= { ANTLR_UINT64_LIT(0x0000000000010000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_49_in_conditionalStatement608( FOLLOW_49_in_conditionalStatement608_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_16_in_conditionalStatement610_bits[]	= { ANTLR_UINT64_LIT(0x00000000002909D0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_16_in_conditionalStatement610( FOLLOW_16_in_conditionalStatement610_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_conditionalStatement612_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_expr_in_conditionalStatement612( FOLLOW_expr_in_conditionalStatement612_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_17_in_conditionalStatement614_bits[]	= { ANTLR_UINT64_LIT(0x0400000000000000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_17_in_conditionalStatement614( FOLLOW_17_in_conditionalStatement614_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_58_in_conditionalStatement616_bits[]	= { ANTLR_UINT64_LIT(0x00282800400001D0), ANTLR_UINT64_LIT(0x0000000000000004) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_58_in_conditionalStatement616( FOLLOW_58_in_conditionalStatement616_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_statementList_in_conditionalStatement618_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_statementList_in_conditionalStatement618( FOLLOW_statementList_in_conditionalStatement618_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_prec8_in_expr629_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000020) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_prec8_in_expr629( FOLLOW_prec8_in_expr629_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_69_in_expr632_bits[]	= { ANTLR_UINT64_LIT(0x00000000002909D0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_69_in_expr632( FOLLOW_69_in_expr632_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_prec8_in_expr634_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000020) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_prec8_in_expr634( FOLLOW_prec8_in_expr634_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_prec7_in_prec8642_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_prec7_in_prec8642( FOLLOW_prec7_in_prec8642_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_14_in_prec8645_bits[]	= { ANTLR_UINT64_LIT(0x00000000002909D0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_14_in_prec8645( FOLLOW_14_in_prec8645_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_prec7_in_prec8647_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_prec7_in_prec8647( FOLLOW_prec7_in_prec8647_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_prec6_in_prec7655_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_prec6_in_prec7655( FOLLOW_prec6_in_prec7655_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_68_in_prec7658_bits[]	= { ANTLR_UINT64_LIT(0x00000000002909D0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_68_in_prec7658( FOLLOW_68_in_prec7658_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_prec6_in_prec7660_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_prec6_in_prec7660( FOLLOW_prec6_in_prec7660_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_prec5_in_prec6668_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_prec5_in_prec6668( FOLLOW_prec5_in_prec6668_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_33_in_prec6671_bits[]	= { ANTLR_UINT64_LIT(0x00000000002909D0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_33_in_prec6671( FOLLOW_33_in_prec6671_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_prec5_in_prec6673_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_prec5_in_prec6673( FOLLOW_prec5_in_prec6673_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_prec4_in_prec5681_bits[]	= { ANTLR_UINT64_LIT(0x0000000000008002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_prec4_in_prec5681( FOLLOW_prec4_in_prec5681_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_15_in_prec5684_bits[]	= { ANTLR_UINT64_LIT(0x00000000002909D0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_15_in_prec5684( FOLLOW_15_in_prec5684_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_prec4_in_prec5686_bits[]	= { ANTLR_UINT64_LIT(0x0000000000008002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_prec4_in_prec5686( FOLLOW_prec4_in_prec5686_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_prec3_in_prec4694_bits[]	= { ANTLR_UINT64_LIT(0x0000000004001002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_prec3_in_prec4694( FOLLOW_prec3_in_prec4694_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_set_in_prec4697_bits[]	= { ANTLR_UINT64_LIT(0x00000000002909D0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_set_in_prec4697( FOLLOW_set_in_prec4697_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_prec3_in_prec4705_bits[]	= { ANTLR_UINT64_LIT(0x0000000004001002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_prec3_in_prec4705( FOLLOW_prec3_in_prec4705_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_prec2_in_prec3713_bits[]	= { ANTLR_UINT64_LIT(0x000000001B000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_prec2_in_prec3713( FOLLOW_prec2_in_prec3713_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_set_in_prec3716_bits[]	= { ANTLR_UINT64_LIT(0x00000000002909D0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_set_in_prec3716( FOLLOW_set_in_prec3716_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_prec2_in_prec3732_bits[]	= { ANTLR_UINT64_LIT(0x000000001B000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_prec2_in_prec3732( FOLLOW_prec2_in_prec3732_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_prec1_in_prec2740_bits[]	= { ANTLR_UINT64_LIT(0x0000000000280002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_prec1_in_prec2740( FOLLOW_prec1_in_prec2740_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_set_in_prec2743_bits[]	= { ANTLR_UINT64_LIT(0x00000000002909D0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_set_in_prec2743( FOLLOW_set_in_prec2743_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_prec1_in_prec2751_bits[]	= { ANTLR_UINT64_LIT(0x0000000000280002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_prec1_in_prec2751( FOLLOW_prec1_in_prec2751_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_prec0_in_prec1759_bits[]	= { ANTLR_UINT64_LIT(0x0000000000842002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_prec0_in_prec1759( FOLLOW_prec0_in_prec1759_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_set_in_prec1762_bits[]	= { ANTLR_UINT64_LIT(0x00000000002909D0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_set_in_prec1762( FOLLOW_set_in_prec1762_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_prec0_in_prec1774_bits[]	= { ANTLR_UINT64_LIT(0x0000000000842002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_prec0_in_prec1774( FOLLOW_prec0_in_prec1774_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_atom_in_prec0799_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_atom_in_prec0799( FOLLOW_atom_in_prec0799_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_atom806_bits[]	= { ANTLR_UINT64_LIT(0x0000000100010002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_ID_in_atom806( FOLLOW_ID_in_atom806_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_32_in_atom809_bits[]	= { ANTLR_UINT64_LIT(0x0100000000000000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_32_in_atom809( FOLLOW_32_in_atom809_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_56_in_atom811_bits[]	= { ANTLR_UINT64_LIT(0x00000000002909D0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_56_in_atom811( FOLLOW_56_in_atom811_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_atom813_bits[]	= { ANTLR_UINT64_LIT(0x0040000000000000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_expr_in_atom813( FOLLOW_expr_in_atom813_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_54_in_atom815_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_54_in_atom815( FOLLOW_54_in_atom815_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_callParams_in_atom819_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_callParams_in_atom819( FOLLOW_callParams_in_atom819_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_CHAR_in_atom831_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_CHAR_in_atom831( FOLLOW_CHAR_in_atom831_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_STRING_in_atom842_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_STRING_in_atom842( FOLLOW_STRING_in_atom842_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_INT_in_atom852_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_INT_in_atom852( FOLLOW_INT_in_atom852_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_16_in_atom862_bits[]	= { ANTLR_UINT64_LIT(0x00000000002909D0), ANTLR_UINT64_LIT(0x0000000000000040) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_16_in_atom862( FOLLOW_16_in_atom862_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_atom864_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_expr_in_atom864( FOLLOW_expr_in_atom864_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_17_in_atom866_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_17_in_atom866( FOLLOW_17_in_atom866_bits, 1 );


/* ==============================================
 * Parsing rules
 */
/**
 * $ANTLR start program
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:30:1: program : declarationList EOF ;
 */
void
MAliceParser::program()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:30:8: ( declarationList EOF )
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:30:10: declarationList EOF
        {
            this->followPush(FOLLOW_declarationList_in_program63);
            declarationList();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleprogramEx;
            }


             this->matchToken(EOF, &FOLLOW_EOF_in_program65);
            if  (this->hasException())
            {
                goto ruleprogramEx;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleprogramEx; /* Prevent compiler warnings */
    ruleprogramEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end program */

/**
 * $ANTLR start declarationList
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:32:1: declarationList : ( declaration )+ ;
 */
void
MAliceParser::declarationList()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:32:16: ( ( declaration )+ )
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:32:18: ( declaration )+
        {
            // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:32:18: ( declaration )+
            {
                int cnt1=0;

                for (;;)
                {
                    int alt1=2;
            	switch ( this->LA(1) )
            	{
            	case ID:
            		{
            			switch ( this->LA(2) )
            			{
            			case 47:
            			case 65:
            				{
            					alt1=1;
            				}
            			    break;

            			}

            		}
            	    break;
            	case 31:
            		{
            			alt1=1;
            		}
            	    break;

            	}

            	switch (alt1)
            	{
            	    case 1:
            	        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:32:19: declaration
            	        {
            	            this->followPush(FOLLOW_declaration_in_declarationList73);
            	            declaration();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruledeclarationListEx;
            	            }


            	        }
            	        break;

            	    default:

            		if ( cnt1 >= 1 )
            		{
            		    goto loop1;
            		}
            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< MAliceParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto ruledeclarationListEx;
            	}
            	cnt1++;
                }
                loop1: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruledeclarationListEx; /* Prevent compiler warnings */
    ruledeclarationListEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end declarationList */

/**
 * $ANTLR start declaration
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:33:1: declaration : ( varDeclaration | funcDeclaration | procDeclaration );
 */
void
MAliceParser::declaration()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        {
            //  E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:33:12: ( varDeclaration | funcDeclaration | procDeclaration )

            ANTLR_UINT32 alt2;

            alt2=3;

            switch ( this->LA(1) )
            {
            case ID:
            	{
            		alt2=1;
            	}
                break;
            case 31:
            	{
            		switch ( this->LA(2) )
            		{
            		case 55:
            			{
            				alt2=2;
            			}
            		    break;
            		case 48:
            			{
            				alt2=3;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< MAliceParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 2 );
            		    ex->set_state( 2 );


            		    goto ruledeclarationEx;

            		}

            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< MAliceParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 2 );
                ex->set_state( 0 );


                goto ruledeclarationEx;

            }

            switch (alt2)
            {
        	case 1:
        	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:33:18: varDeclaration
        	    {
        	        this->followPush(FOLLOW_varDeclaration_in_declaration85);
        	        varDeclaration();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruledeclarationEx;
        	        }


        	    }
        	    break;
        	case 2:
        	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:33:35: funcDeclaration
        	    {
        	        this->followPush(FOLLOW_funcDeclaration_in_declaration89);
        	        funcDeclaration();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruledeclarationEx;
        	        }


        	    }
        	    break;
        	case 3:
        	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:33:53: procDeclaration
        	    {
        	        this->followPush(FOLLOW_procDeclaration_in_declaration93);
        	        procDeclaration();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruledeclarationEx;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruledeclarationEx; /* Prevent compiler warnings */
    ruledeclarationEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end declaration */

/**
 * $ANTLR start procDeclaration
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:35:1: procDeclaration : 'The' 'looking-glass' ID headerParams body ;
 */
void
MAliceParser::procDeclaration()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:35:16: ( 'The' 'looking-glass' ID headerParams body )
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:35:19: 'The' 'looking-glass' ID headerParams body
        {
             this->matchToken(31, &FOLLOW_31_in_procDeclaration101);
            if  (this->hasException())
            {
                goto ruleprocDeclarationEx;
            }


             this->matchToken(48, &FOLLOW_48_in_procDeclaration103);
            if  (this->hasException())
            {
                goto ruleprocDeclarationEx;
            }


             this->matchToken(ID, &FOLLOW_ID_in_procDeclaration105);
            if  (this->hasException())
            {
                goto ruleprocDeclarationEx;
            }


            this->followPush(FOLLOW_headerParams_in_procDeclaration107);
            headerParams();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleprocDeclarationEx;
            }


            this->followPush(FOLLOW_body_in_procDeclaration109);
            body();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleprocDeclarationEx;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleprocDeclarationEx; /* Prevent compiler warnings */
    ruleprocDeclarationEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end procDeclaration */

/**
 * $ANTLR start headerParams
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:36:1: headerParams : '(' ( headerParamsList )? ')' ;
 */
void
MAliceParser::headerParams()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:36:13: ( '(' ( headerParamsList )? ')' )
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:36:19: '(' ( headerParamsList )? ')'
        {
             this->matchToken(16, &FOLLOW_16_in_headerParams119);
            if  (this->hasException())
            {
                goto ruleheaderParamsEx;
            }


            // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:36:23: ( headerParamsList )?
            {
                int alt3=2;
                switch ( this->LA(1) )
                {
                    case TYPE:
                    case 59:
                    	{
                    		alt3=1;
                    	}
                        break;
                }

                switch (alt3)
                {
            	case 1:
            	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:36:23: headerParamsList
            	    {
            	        this->followPush(FOLLOW_headerParamsList_in_headerParams121);
            	        headerParamsList();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleheaderParamsEx;
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(17, &FOLLOW_17_in_headerParams124);
            if  (this->hasException())
            {
                goto ruleheaderParamsEx;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleheaderParamsEx; /* Prevent compiler warnings */
    ruleheaderParamsEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end headerParams */

/**
 * $ANTLR start headerParamsList
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:37:1: headerParamsList : headerParam ( ',' headerParam )* ;
 */
void
MAliceParser::headerParamsList()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:37:17: ( headerParam ( ',' headerParam )* )
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:37:19: headerParam ( ',' headerParam )*
        {
            this->followPush(FOLLOW_headerParam_in_headerParamsList130);
            headerParam();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleheaderParamsListEx;
            }


            // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:37:31: ( ',' headerParam )*

            for (;;)
            {
                int alt4=2;
                switch ( this->LA(1) )
                {
                case 20:
                	{
                		alt4=1;
                	}
                    break;

                }

                switch (alt4)
                {
            	case 1:
            	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:37:32: ',' headerParam
            	    {
            	         this->matchToken(20, &FOLLOW_20_in_headerParamsList133);
            	        if  (this->hasException())
            	        {
            	            goto ruleheaderParamsListEx;
            	        }


            	        this->followPush(FOLLOW_headerParam_in_headerParamsList135);
            	        headerParam();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleheaderParamsListEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop4;	/* break out of the loop */
            	    break;
                }
            }
            loop4: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleheaderParamsListEx; /* Prevent compiler warnings */
    ruleheaderParamsListEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end headerParamsList */

/**
 * $ANTLR start headerParam
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:38:1: headerParam : ( 'spider' )? TYPE ID ;
 */
void
MAliceParser::headerParam()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:38:12: ( ( 'spider' )? TYPE ID )
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:38:19: ( 'spider' )? TYPE ID
        {
            // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:38:19: ( 'spider' )?
            {
                int alt5=2;
                switch ( this->LA(1) )
                {
                    case 59:
                    	{
                    		alt5=1;
                    	}
                        break;
                }

                switch (alt5)
                {
            	case 1:
            	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:38:19: 'spider'
            	    {
            	         this->matchToken(59, &FOLLOW_59_in_headerParam148);
            	        if  (this->hasException())
            	        {
            	            goto ruleheaderParamEx;
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(TYPE, &FOLLOW_TYPE_in_headerParam151);
            if  (this->hasException())
            {
                goto ruleheaderParamEx;
            }


             this->matchToken(ID, &FOLLOW_ID_in_headerParam153);
            if  (this->hasException())
            {
                goto ruleheaderParamEx;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleheaderParamEx; /* Prevent compiler warnings */
    ruleheaderParamEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end headerParam */

/**
 * $ANTLR start callParams
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:40:1: callParams : '(' ( ( callParamsList )? ) ')' ;
 */
void
MAliceParser::callParams()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:40:11: ( '(' ( ( callParamsList )? ) ')' )
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:40:13: '(' ( ( callParamsList )? ) ')'
        {
             this->matchToken(16, &FOLLOW_16_in_callParams160);
            if  (this->hasException())
            {
                goto rulecallParamsEx;
            }


            // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:40:17: ( ( callParamsList )? )
            // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:40:18: ( callParamsList )?
            {
                // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:40:18: ( callParamsList )?
                {
                    int alt6=2;
                    switch ( this->LA(1) )
                    {
                        case CHAR:
                        case ID:
                        case INT:
                        case STRING:
                        case 11:
                        case 16:
                        case 19:
                        case 21:
                        case 70:
                        	{
                        		alt6=1;
                        	}
                            break;
                    }

                    switch (alt6)
                    {
                	case 1:
                	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:40:18: callParamsList
                	    {
                	        this->followPush(FOLLOW_callParamsList_in_callParams163);
                	        callParamsList();

                	        this->followPop();
                	        if  (this->hasException())
                	        {
                	            goto rulecallParamsEx;
                	        }


                	    }
                	    break;

                    }
                }

            }


             this->matchToken(17, &FOLLOW_17_in_callParams167);
            if  (this->hasException())
            {
                goto rulecallParamsEx;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulecallParamsEx; /* Prevent compiler warnings */
    rulecallParamsEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end callParams */

/**
 * $ANTLR start callParamsList
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:41:1: callParamsList : expr ( ',' expr )* ;
 */
void
MAliceParser::callParamsList()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:41:15: ( expr ( ',' expr )* )
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:41:17: expr ( ',' expr )*
        {
            this->followPush(FOLLOW_expr_in_callParamsList173);
            expr();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecallParamsListEx;
            }


            // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:41:22: ( ',' expr )*

            for (;;)
            {
                int alt7=2;
                switch ( this->LA(1) )
                {
                case 20:
                	{
                		alt7=1;
                	}
                    break;

                }

                switch (alt7)
                {
            	case 1:
            	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:41:23: ',' expr
            	    {
            	         this->matchToken(20, &FOLLOW_20_in_callParamsList176);
            	        if  (this->hasException())
            	        {
            	            goto rulecallParamsListEx;
            	        }


            	        this->followPush(FOLLOW_expr_in_callParamsList178);
            	        expr();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecallParamsListEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop7;	/* break out of the loop */
            	    break;
                }
            }
            loop7: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto rulecallParamsListEx; /* Prevent compiler warnings */
    rulecallParamsListEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end callParamsList */

/**
 * $ANTLR start funcDeclaration
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:43:1: funcDeclaration : 'The' 'room' ID headerParams 'contained' 'a' TYPE body ;
 */
void
MAliceParser::funcDeclaration()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:43:16: ( 'The' 'room' ID headerParams 'contained' 'a' TYPE body )
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:43:18: 'The' 'room' ID headerParams 'contained' 'a' TYPE body
        {
             this->matchToken(31, &FOLLOW_31_in_funcDeclaration187);
            if  (this->hasException())
            {
                goto rulefuncDeclarationEx;
            }


             this->matchToken(55, &FOLLOW_55_in_funcDeclaration189);
            if  (this->hasException())
            {
                goto rulefuncDeclarationEx;
            }


             this->matchToken(ID, &FOLLOW_ID_in_funcDeclaration191);
            if  (this->hasException())
            {
                goto rulefuncDeclarationEx;
            }


            this->followPush(FOLLOW_headerParams_in_funcDeclaration193);
            headerParams();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefuncDeclarationEx;
            }


             this->matchToken(41, &FOLLOW_41_in_funcDeclaration195);
            if  (this->hasException())
            {
                goto rulefuncDeclarationEx;
            }


             this->matchToken(34, &FOLLOW_34_in_funcDeclaration197);
            if  (this->hasException())
            {
                goto rulefuncDeclarationEx;
            }


             this->matchToken(TYPE, &FOLLOW_TYPE_in_funcDeclaration199);
            if  (this->hasException())
            {
                goto rulefuncDeclarationEx;
            }


            this->followPush(FOLLOW_body_in_funcDeclaration201);
            body();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefuncDeclarationEx;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulefuncDeclarationEx; /* Prevent compiler warnings */
    rulefuncDeclarationEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end funcDeclaration */

/**
 * $ANTLR start varDeclaration
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:45:1: varDeclaration : ( ( ID 'was' 'a' TYPE ( ( 'too' | 'of' expr )? ) delimiter ) | ( ID 'had' expr TYPE delimiter ) );
 */
void
MAliceParser::varDeclaration()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        {
            //  E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:45:15: ( ( ID 'was' 'a' TYPE ( ( 'too' | 'of' expr )? ) delimiter ) | ( ID 'had' expr TYPE delimiter ) )

            ANTLR_UINT32 alt9;

            alt9=2;

            switch ( this->LA(1) )
            {
            case ID:
            	{
            		switch ( this->LA(2) )
            		{
            		case 65:
            			{
            				alt9=1;
            			}
            		    break;
            		case 47:
            			{
            				alt9=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< MAliceParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 9 );
            		    ex->set_state( 1 );


            		    goto rulevarDeclarationEx;

            		}

            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< MAliceParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 9 );
                ex->set_state( 0 );


                goto rulevarDeclarationEx;

            }

            switch (alt9)
            {
        	case 1:
        	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:45:17: ( ID 'was' 'a' TYPE ( ( 'too' | 'of' expr )? ) delimiter )
        	    {
        	        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:45:17: ( ID 'was' 'a' TYPE ( ( 'too' | 'of' expr )? ) delimiter )
        	        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:45:18: ID 'was' 'a' TYPE ( ( 'too' | 'of' expr )? ) delimiter
        	        {
        	             this->matchToken(ID, &FOLLOW_ID_in_varDeclaration209);
        	            if  (this->hasException())
        	            {
        	                goto rulevarDeclarationEx;
        	            }


        	             this->matchToken(65, &FOLLOW_65_in_varDeclaration211);
        	            if  (this->hasException())
        	            {
        	                goto rulevarDeclarationEx;
        	            }


        	             this->matchToken(34, &FOLLOW_34_in_varDeclaration213);
        	            if  (this->hasException())
        	            {
        	                goto rulevarDeclarationEx;
        	            }


        	             this->matchToken(TYPE, &FOLLOW_TYPE_in_varDeclaration215);
        	            if  (this->hasException())
        	            {
        	                goto rulevarDeclarationEx;
        	            }


        	            // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:45:36: ( ( 'too' | 'of' expr )? )
        	            // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:45:37: ( 'too' | 'of' expr )?
        	            {
        	                // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:45:37: ( 'too' | 'of' expr )?
        	                {
        	                    int alt8=3;
        	                    switch ( this->LA(1) )
        	                    {
        	                        case 63:
        	                        	{
        	                        		alt8=1;
        	                        	}
        	                            break;
        	                        case 50:
        	                        	{
        	                        		alt8=2;
        	                        	}
        	                            break;
        	                    }

        	                    switch (alt8)
        	                    {
        	                	case 1:
        	                	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:45:38: 'too'
        	                	    {
        	                	         this->matchToken(63, &FOLLOW_63_in_varDeclaration219);
        	                	        if  (this->hasException())
        	                	        {
        	                	            goto rulevarDeclarationEx;
        	                	        }


        	                	    }
        	                	    break;
        	                	case 2:
        	                	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:45:46: 'of' expr
        	                	    {
        	                	         this->matchToken(50, &FOLLOW_50_in_varDeclaration223);
        	                	        if  (this->hasException())
        	                	        {
        	                	            goto rulevarDeclarationEx;
        	                	        }


        	                	        this->followPush(FOLLOW_expr_in_varDeclaration225);
        	                	        expr();

        	                	        this->followPop();
        	                	        if  (this->hasException())
        	                	        {
        	                	            goto rulevarDeclarationEx;
        	                	        }


        	                	    }
        	                	    break;

        	                    }
        	                }

        	            }


        	            this->followPush(FOLLOW_delimiter_in_varDeclaration230);
        	            delimiter();

        	            this->followPop();
        	            if  (this->hasException())
        	            {
        	                goto rulevarDeclarationEx;
        	            }


        	        }


        	    }
        	    break;
        	case 2:
        	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:46:17: ( ID 'had' expr TYPE delimiter )
        	    {
        	        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:46:17: ( ID 'had' expr TYPE delimiter )
        	        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:46:18: ID 'had' expr TYPE delimiter
        	        {
        	             this->matchToken(ID, &FOLLOW_ID_in_varDeclaration252);
        	            if  (this->hasException())
        	            {
        	                goto rulevarDeclarationEx;
        	            }


        	             this->matchToken(47, &FOLLOW_47_in_varDeclaration254);
        	            if  (this->hasException())
        	            {
        	                goto rulevarDeclarationEx;
        	            }


        	            this->followPush(FOLLOW_expr_in_varDeclaration256);
        	            expr();

        	            this->followPop();
        	            if  (this->hasException())
        	            {
        	                goto rulevarDeclarationEx;
        	            }


        	             this->matchToken(TYPE, &FOLLOW_TYPE_in_varDeclaration258);
        	            if  (this->hasException())
        	            {
        	                goto rulevarDeclarationEx;
        	            }


        	            this->followPush(FOLLOW_delimiter_in_varDeclaration260);
        	            delimiter();

        	            this->followPop();
        	            if  (this->hasException())
        	            {
        	                goto rulevarDeclarationEx;
        	            }


        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulevarDeclarationEx; /* Prevent compiler warnings */
    rulevarDeclarationEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end varDeclaration */

/**
 * $ANTLR start body
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:48:1: body : 'opened' ( ( ( declarationList )? ) statementList |) 'closed' ;
 */
void
MAliceParser::body()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:48:5: ( 'opened' ( ( ( declarationList )? ) statementList |) 'closed' )
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:48:7: 'opened' ( ( ( declarationList )? ) statementList |) 'closed'
        {
             this->matchToken(51, &FOLLOW_51_in_body268);
            if  (this->hasException())
            {
                goto rulebodyEx;
            }


            // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:48:16: ( ( ( declarationList )? ) statementList |)
            {
                int alt11=2;
                switch ( this->LA(1) )
                {
                case CHAR:
                case ID:
                case INT:
                case STRING:
                case 30:
                case 31:
                case 43:
                case 45:
                case 51:
                case 53:
                case 66:
                	{
                		alt11=1;
                	}
                    break;
                case 40:
                	{
                		alt11=2;
                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< MAliceParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 11 );
                    ex->set_state( 0 );


                    goto rulebodyEx;

                }

                switch (alt11)
                {
            	case 1:
            	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:48:17: ( ( declarationList )? ) statementList
            	    {
            	        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:48:17: ( ( declarationList )? )
            	        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:48:18: ( declarationList )?
            	        {
            	            // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:48:18: ( declarationList )?
            	            {
            	                int alt10=2;
            	                switch ( this->LA(1) )
            	                {
            	                    case ID:
            	                    	{
            	                    		switch ( this->LA(2) )
            	                    		{
            	                    		    case 47:
            	                    		    case 65:
            	                    		    	{
            	                    		    		alt10=1;
            	                    		    	}
            	                    		        break;
            	                    		}

            	                    	}
            	                        break;
            	                    case 31:
            	                    	{
            	                    		alt10=1;
            	                    	}
            	                        break;
            	                }

            	                switch (alt10)
            	                {
            	            	case 1:
            	            	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:48:18: declarationList
            	            	    {
            	            	        this->followPush(FOLLOW_declarationList_in_body272);
            	            	        declarationList();

            	            	        this->followPop();
            	            	        if  (this->hasException())
            	            	        {
            	            	            goto rulebodyEx;
            	            	        }


            	            	    }
            	            	    break;

            	                }
            	            }

            	        }


            	        this->followPush(FOLLOW_statementList_in_body276);
            	        statementList();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulebodyEx;
            	        }


            	    }
            	    break;
            	case 2:
            	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:48:52: 
            	    {
            	    }
            	    break;

                }
            }

             this->matchToken(40, &FOLLOW_40_in_body282);
            if  (this->hasException())
            {
                goto rulebodyEx;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulebodyEx; /* Prevent compiler warnings */
    rulebodyEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end body */

/**
 * $ANTLR start statementList
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:50:1: statementList : ( statement )+ ;
 */
void
MAliceParser::statementList()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:50:14: ( ( statement )+ )
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:50:16: ( statement )+
        {
            // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:50:16: ( statement )+
            {
                int cnt12=0;

                for (;;)
                {
                    int alt12=2;
            	switch ( this->LA(1) )
            	{
            	case CHAR:
            	case ID:
            	case INT:
            	case STRING:
            	case 30:
            	case 43:
            	case 45:
            	case 51:
            	case 53:
            	case 66:
            		{
            			alt12=1;
            		}
            	    break;

            	}

            	switch (alt12)
            	{
            	    case 1:
            	        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:50:17: statement
            	        {
            	            this->followPush(FOLLOW_statement_in_statementList290);
            	            statement();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulestatementListEx;
            	            }


            	        }
            	        break;

            	    default:

            		if ( cnt12 >= 1 )
            		{
            		    goto loop12;
            		}
            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< MAliceParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto rulestatementListEx;
            	}
            	cnt12++;
                }
                loop12: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulestatementListEx; /* Prevent compiler warnings */
    rulestatementListEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end statementList */

/**
 * $ANTLR start idOperations
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:52:1: idOperations : ( 'became' expr | 'ate' | 'drank' );
 */
void
MAliceParser::idOperations()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        {
            //  E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:52:13: ( 'became' expr | 'ate' | 'drank' )

            ANTLR_UINT32 alt13;

            alt13=3;

            switch ( this->LA(1) )
            {
            case 37:
            	{
            		alt13=1;
            	}
                break;
            case 36:
            	{
            		alt13=2;
            	}
                break;
            case 42:
            	{
            		alt13=3;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< MAliceParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 13 );
                ex->set_state( 0 );


                goto ruleidOperationsEx;

            }

            switch (alt13)
            {
        	case 1:
        	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:52:15: 'became' expr
        	    {
        	         this->matchToken(37, &FOLLOW_37_in_idOperations299);
        	        if  (this->hasException())
        	        {
        	            goto ruleidOperationsEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_idOperations301);
        	        expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleidOperationsEx;
        	        }


        	    }
        	    break;
        	case 2:
        	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:52:31: 'ate'
        	    {
        	         this->matchToken(36, &FOLLOW_36_in_idOperations305);
        	        if  (this->hasException())
        	        {
        	            goto ruleidOperationsEx;
        	        }


        	    }
        	    break;
        	case 3:
        	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:52:39: 'drank'
        	    {
        	         this->matchToken(42, &FOLLOW_42_in_idOperations309);
        	        if  (this->hasException())
        	        {
        	            goto ruleidOperationsEx;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleidOperationsEx; /* Prevent compiler warnings */
    ruleidOperationsEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end idOperations */

/**
 * $ANTLR start statement
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:54:1: statement : ( body | ID ( '\\'' 's' expr 'piece' )? ( ( 'said' 'Alice' | 'spoke' ) | callParams ( ( 'said' 'Alice' )? ) | idOperations ) delimiter | ( STRING | CHAR | INT ) ( 'said' 'Alice' | 'spoke' ) delimiter | 'Alice' 'found' expr '.' | 'what' 'was' expr '?' ( ( delimiter )? ) | 'eventually' '(' expr ')' 'because' statementList 'enough' 'times' ( ( delimiter )? ) | 'either' '(' expr ')' 'so' statementList 'or' statementList 'because' 'Alice' 'was' 'unsure' 'which' ( ( delimiter )? ) | conditionalStatement ( 'or' statementList )? 'because' 'Alice' 'was' 'unsure' 'which' ( ( delimiter )? ) );
 */
void
MAliceParser::statement()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        {
            //  E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:54:10: ( body | ID ( '\\'' 's' expr 'piece' )? ( ( 'said' 'Alice' | 'spoke' ) | callParams ( ( 'said' 'Alice' )? ) | idOperations ) delimiter | ( STRING | CHAR | INT ) ( 'said' 'Alice' | 'spoke' ) delimiter | 'Alice' 'found' expr '.' | 'what' 'was' expr '?' ( ( delimiter )? ) | 'eventually' '(' expr ')' 'because' statementList 'enough' 'times' ( ( delimiter )? ) | 'either' '(' expr ')' 'so' statementList 'or' statementList 'because' 'Alice' 'was' 'unsure' 'which' ( ( delimiter )? ) | conditionalStatement ( 'or' statementList )? 'because' 'Alice' 'was' 'unsure' 'which' ( ( delimiter )? ) )

            ANTLR_UINT32 alt24;

            alt24=8;

            switch ( this->LA(1) )
            {
            case 51:
            	{
            		alt24=1;
            	}
                break;
            case ID:
            	{
            		alt24=2;
            	}
                break;
            case CHAR:
            case INT:
            case STRING:
            	{
            		alt24=3;
            	}
                break;
            case 30:
            	{
            		alt24=4;
            	}
                break;
            case 66:
            	{
            		alt24=5;
            	}
                break;
            case 45:
            	{
            		alt24=6;
            	}
                break;
            case 43:
            	{
            		alt24=7;
            	}
                break;
            case 53:
            	{
            		alt24=8;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< MAliceParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 24 );
                ex->set_state( 0 );


                goto rulestatementEx;

            }

            switch (alt24)
            {
        	case 1:
        	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:54:12: body
        	    {
        	        this->followPush(FOLLOW_body_in_statement316);
        	        body();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }


        	    }
        	    break;
        	case 2:
        	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:55:12: ID ( '\\'' 's' expr 'piece' )? ( ( 'said' 'Alice' | 'spoke' ) | callParams ( ( 'said' 'Alice' )? ) | idOperations ) delimiter
        	    {
        	         this->matchToken(ID, &FOLLOW_ID_in_statement331);
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }


        	        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:55:15: ( '\\'' 's' expr 'piece' )?
        	        {
        	            int alt14=2;
        	            switch ( this->LA(1) )
        	            {
        	                case 32:
        	                	{
        	                		alt14=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt14)
        	            {
        	        	case 1:
        	        	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:55:16: '\\'' 's' expr 'piece'
        	        	    {
        	        	         this->matchToken(32, &FOLLOW_32_in_statement334);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestatementEx;
        	        	        }


        	        	         this->matchToken(56, &FOLLOW_56_in_statement336);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestatementEx;
        	        	        }


        	        	        this->followPush(FOLLOW_expr_in_statement338);
        	        	        expr();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestatementEx;
        	        	        }


        	        	         this->matchToken(54, &FOLLOW_54_in_statement340);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestatementEx;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:55:40: ( ( 'said' 'Alice' | 'spoke' ) | callParams ( ( 'said' 'Alice' )? ) | idOperations )
        	        {
        	            int alt17=3;
        	            switch ( this->LA(1) )
        	            {
        	            case 57:
        	            case 60:
        	            	{
        	            		alt17=1;
        	            	}
        	                break;
        	            case 16:
        	            	{
        	            		alt17=2;
        	            	}
        	                break;
        	            case 36:
        	            case 37:
        	            case 42:
        	            	{
        	            		alt17=3;
        	            	}
        	                break;

        	            default:
        	                ExceptionBaseType* ex = new ANTLR_Exception< MAliceParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                ex->set_decisionNum( 17 );
        	                ex->set_state( 0 );


        	                goto rulestatementEx;

        	            }

        	            switch (alt17)
        	            {
        	        	case 1:
        	        	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:55:41: ( 'said' 'Alice' | 'spoke' )
        	        	    {
        	        	        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:55:41: ( 'said' 'Alice' | 'spoke' )
        	        	        {
        	        	            int alt15=2;
        	        	            switch ( this->LA(1) )
        	        	            {
        	        	            case 57:
        	        	            	{
        	        	            		alt15=1;
        	        	            	}
        	        	                break;
        	        	            case 60:
        	        	            	{
        	        	            		alt15=2;
        	        	            	}
        	        	                break;

        	        	            default:
        	        	                ExceptionBaseType* ex = new ANTLR_Exception< MAliceParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	        	                ex->set_decisionNum( 15 );
        	        	                ex->set_state( 0 );


        	        	                goto rulestatementEx;

        	        	            }

        	        	            switch (alt15)
        	        	            {
        	        	        	case 1:
        	        	        	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:55:42: 'said' 'Alice'
        	        	        	    {
        	        	        	         this->matchToken(57, &FOLLOW_57_in_statement346);
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulestatementEx;
        	        	        	        }


        	        	        	         this->matchToken(30, &FOLLOW_30_in_statement348);
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulestatementEx;
        	        	        	        }


        	        	        	    }
        	        	        	    break;
        	        	        	case 2:
        	        	        	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:55:59: 'spoke'
        	        	        	    {
        	        	        	         this->matchToken(60, &FOLLOW_60_in_statement352);
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulestatementEx;
        	        	        	        }


        	        	        	    }
        	        	        	    break;

        	        	            }
        	        	        }

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:55:70: callParams ( ( 'said' 'Alice' )? )
        	        	    {
        	        	        this->followPush(FOLLOW_callParams_in_statement357);
        	        	        callParams();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestatementEx;
        	        	        }


        	        	        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:55:81: ( ( 'said' 'Alice' )? )
        	        	        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:55:82: ( 'said' 'Alice' )?
        	        	        {
        	        	            // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:55:82: ( 'said' 'Alice' )?
        	        	            {
        	        	                int alt16=2;
        	        	                switch ( this->LA(1) )
        	        	                {
        	        	                    case 57:
        	        	                    	{
        	        	                    		alt16=1;
        	        	                    	}
        	        	                        break;
        	        	                }

        	        	                switch (alt16)
        	        	                {
        	        	            	case 1:
        	        	            	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:55:83: 'said' 'Alice'
        	        	            	    {
        	        	            	         this->matchToken(57, &FOLLOW_57_in_statement361);
        	        	            	        if  (this->hasException())
        	        	            	        {
        	        	            	            goto rulestatementEx;
        	        	            	        }


        	        	            	         this->matchToken(30, &FOLLOW_30_in_statement363);
        	        	            	        if  (this->hasException())
        	        	            	        {
        	        	            	            goto rulestatementEx;
        	        	            	        }


        	        	            	    }
        	        	            	    break;

        	        	                }
        	        	            }

        	        	        }


        	        	    }
        	        	    break;
        	        	case 3:
        	        	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:55:103: idOperations
        	        	    {
        	        	        this->followPush(FOLLOW_idOperations_in_statement370);
        	        	        idOperations();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestatementEx;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	        this->followPush(FOLLOW_delimiter_in_statement373);
        	        delimiter();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }


        	    }
        	    break;
        	case 3:
        	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:56:12: ( STRING | CHAR | INT ) ( 'said' 'Alice' | 'spoke' ) delimiter
        	    {
        	        if ( this->LA(1) == CHAR || ((this->LA(1) >= INT) && (this->LA(1) <= STRING)) )
        	        {
        	            this->consume();
        	            this->set_perror_recovery(false);
        	        }
        	        else
        	        {
        	            new ANTLR_Exception< MAliceParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
        	            this->get_exception()->set_expectingSet(NULL);

        	            goto rulestatementEx;
        	        }


        	        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:56:34: ( 'said' 'Alice' | 'spoke' )
        	        {
        	            int alt18=2;
        	            switch ( this->LA(1) )
        	            {
        	            case 57:
        	            	{
        	            		alt18=1;
        	            	}
        	                break;
        	            case 60:
        	            	{
        	            		alt18=2;
        	            	}
        	                break;

        	            default:
        	                ExceptionBaseType* ex = new ANTLR_Exception< MAliceParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                ex->set_decisionNum( 18 );
        	                ex->set_state( 0 );


        	                goto rulestatementEx;

        	            }

        	            switch (alt18)
        	            {
        	        	case 1:
        	        	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:56:35: 'said' 'Alice'
        	        	    {
        	        	         this->matchToken(57, &FOLLOW_57_in_statement401);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestatementEx;
        	        	        }


        	        	         this->matchToken(30, &FOLLOW_30_in_statement403);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestatementEx;
        	        	        }


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:56:52: 'spoke'
        	        	    {
        	        	         this->matchToken(60, &FOLLOW_60_in_statement407);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestatementEx;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	        this->followPush(FOLLOW_delimiter_in_statement410);
        	        delimiter();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }


        	    }
        	    break;
        	case 4:
        	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:57:12: 'Alice' 'found' expr '.'
        	    {
        	         this->matchToken(30, &FOLLOW_30_in_statement425);
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }


        	         this->matchToken(46, &FOLLOW_46_in_statement427);
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_statement429);
        	        expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }


        	         this->matchToken(22, &FOLLOW_22_in_statement431);
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }


        	    }
        	    break;
        	case 5:
        	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:58:12: 'what' 'was' expr '?' ( ( delimiter )? )
        	    {
        	         this->matchToken(66, &FOLLOW_66_in_statement446);
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }


        	         this->matchToken(65, &FOLLOW_65_in_statement448);
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_statement450);
        	        expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }


        	         this->matchToken(29, &FOLLOW_29_in_statement452);
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }


        	        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:58:34: ( ( delimiter )? )
        	        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:58:35: ( delimiter )?
        	        {
        	            // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:58:35: ( delimiter )?
        	            {
        	                int alt19=2;
        	                switch ( this->LA(1) )
        	                {
        	                    case 20:
        	                    case 22:
        	                    case 35:
        	                    case 39:
        	                    case 61:
        	                    	{
        	                    		alt19=1;
        	                    	}
        	                        break;
        	                }

        	                switch (alt19)
        	                {
        	            	case 1:
        	            	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:58:35: delimiter
        	            	    {
        	            	        this->followPush(FOLLOW_delimiter_in_statement455);
        	            	        delimiter();

        	            	        this->followPop();
        	            	        if  (this->hasException())
        	            	        {
        	            	            goto rulestatementEx;
        	            	        }


        	            	    }
        	            	    break;

        	                }
        	            }

        	        }


        	    }
        	    break;
        	case 6:
        	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:59:12: 'eventually' '(' expr ')' 'because' statementList 'enough' 'times' ( ( delimiter )? )
        	    {
        	         this->matchToken(45, &FOLLOW_45_in_statement472);
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }


        	         this->matchToken(16, &FOLLOW_16_in_statement474);
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_statement476);
        	        expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }


        	         this->matchToken(17, &FOLLOW_17_in_statement478);
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }


        	         this->matchToken(38, &FOLLOW_38_in_statement480);
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }


        	        this->followPush(FOLLOW_statementList_in_statement482);
        	        statementList();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }


        	         this->matchToken(44, &FOLLOW_44_in_statement484);
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }


        	         this->matchToken(62, &FOLLOW_62_in_statement486);
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }


        	        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:59:79: ( ( delimiter )? )
        	        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:59:80: ( delimiter )?
        	        {
        	            // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:59:80: ( delimiter )?
        	            {
        	                int alt20=2;
        	                switch ( this->LA(1) )
        	                {
        	                    case 20:
        	                    case 22:
        	                    case 35:
        	                    case 39:
        	                    case 61:
        	                    	{
        	                    		alt20=1;
        	                    	}
        	                        break;
        	                }

        	                switch (alt20)
        	                {
        	            	case 1:
        	            	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:59:80: delimiter
        	            	    {
        	            	        this->followPush(FOLLOW_delimiter_in_statement489);
        	            	        delimiter();

        	            	        this->followPop();
        	            	        if  (this->hasException())
        	            	        {
        	            	            goto rulestatementEx;
        	            	        }


        	            	    }
        	            	    break;

        	                }
        	            }

        	        }


        	    }
        	    break;
        	case 7:
        	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:60:12: 'either' '(' expr ')' 'so' statementList 'or' statementList 'because' 'Alice' 'was' 'unsure' 'which' ( ( delimiter )? )
        	    {
        	         this->matchToken(43, &FOLLOW_43_in_statement506);
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }


        	         this->matchToken(16, &FOLLOW_16_in_statement508);
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_statement510);
        	        expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }


        	         this->matchToken(17, &FOLLOW_17_in_statement512);
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }


        	         this->matchToken(58, &FOLLOW_58_in_statement514);
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }


        	        this->followPush(FOLLOW_statementList_in_statement516);
        	        statementList();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }


        	         this->matchToken(52, &FOLLOW_52_in_statement518);
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }


        	        this->followPush(FOLLOW_statementList_in_statement520);
        	        statementList();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }


        	         this->matchToken(38, &FOLLOW_38_in_statement522);
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }


        	         this->matchToken(30, &FOLLOW_30_in_statement524);
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }


        	         this->matchToken(65, &FOLLOW_65_in_statement526);
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }


        	         this->matchToken(64, &FOLLOW_64_in_statement528);
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }


        	         this->matchToken(67, &FOLLOW_67_in_statement530);
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }


        	        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:60:113: ( ( delimiter )? )
        	        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:60:114: ( delimiter )?
        	        {
        	            // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:60:114: ( delimiter )?
        	            {
        	                int alt21=2;
        	                switch ( this->LA(1) )
        	                {
        	                    case 20:
        	                    case 22:
        	                    case 35:
        	                    case 39:
        	                    case 61:
        	                    	{
        	                    		alt21=1;
        	                    	}
        	                        break;
        	                }

        	                switch (alt21)
        	                {
        	            	case 1:
        	            	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:60:114: delimiter
        	            	    {
        	            	        this->followPush(FOLLOW_delimiter_in_statement533);
        	            	        delimiter();

        	            	        this->followPop();
        	            	        if  (this->hasException())
        	            	        {
        	            	            goto rulestatementEx;
        	            	        }


        	            	    }
        	            	    break;

        	                }
        	            }

        	        }


        	    }
        	    break;
        	case 8:
        	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:61:12: conditionalStatement ( 'or' statementList )? 'because' 'Alice' 'was' 'unsure' 'which' ( ( delimiter )? )
        	    {
        	        this->followPush(FOLLOW_conditionalStatement_in_statement550);
        	        conditionalStatement();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }


        	        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:61:33: ( 'or' statementList )?
        	        {
        	            int alt22=2;
        	            switch ( this->LA(1) )
        	            {
        	                case 52:
        	                	{
        	                		alt22=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt22)
        	            {
        	        	case 1:
        	        	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:61:34: 'or' statementList
        	        	    {
        	        	         this->matchToken(52, &FOLLOW_52_in_statement553);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestatementEx;
        	        	        }


        	        	        this->followPush(FOLLOW_statementList_in_statement555);
        	        	        statementList();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestatementEx;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	         this->matchToken(38, &FOLLOW_38_in_statement559);
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }


        	         this->matchToken(30, &FOLLOW_30_in_statement561);
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }


        	         this->matchToken(65, &FOLLOW_65_in_statement563);
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }


        	         this->matchToken(64, &FOLLOW_64_in_statement565);
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }


        	         this->matchToken(67, &FOLLOW_67_in_statement567);
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }


        	        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:61:96: ( ( delimiter )? )
        	        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:61:97: ( delimiter )?
        	        {
        	            // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:61:97: ( delimiter )?
        	            {
        	                int alt23=2;
        	                switch ( this->LA(1) )
        	                {
        	                    case 20:
        	                    case 22:
        	                    case 35:
        	                    case 39:
        	                    case 61:
        	                    	{
        	                    		alt23=1;
        	                    	}
        	                        break;
        	                }

        	                switch (alt23)
        	                {
        	            	case 1:
        	            	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:61:97: delimiter
        	            	    {
        	            	        this->followPush(FOLLOW_delimiter_in_statement570);
        	            	        delimiter();

        	            	        this->followPop();
        	            	        if  (this->hasException())
        	            	        {
        	            	            goto rulestatementEx;
        	            	        }


        	            	    }
        	            	    break;

        	                }
        	            }

        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulestatementEx; /* Prevent compiler warnings */
    rulestatementEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end statement */

/**
 * $ANTLR start conditionalStatement
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:64:1: conditionalStatement : ( 'perhaps' '(' expr ')' 'so' statementList ) ( 'or' 'maybe' '(' expr ')' 'so' statementList )* ;
 */
void
MAliceParser::conditionalStatement()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:64:21: ( ( 'perhaps' '(' expr ')' 'so' statementList ) ( 'or' 'maybe' '(' expr ')' 'so' statementList )* )
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:64:23: ( 'perhaps' '(' expr ')' 'so' statementList ) ( 'or' 'maybe' '(' expr ')' 'so' statementList )*
        {
            // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:64:23: ( 'perhaps' '(' expr ')' 'so' statementList )
            // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:64:24: 'perhaps' '(' expr ')' 'so' statementList
            {
                 this->matchToken(53, &FOLLOW_53_in_conditionalStatement592);
                if  (this->hasException())
                {
                    goto ruleconditionalStatementEx;
                }


                 this->matchToken(16, &FOLLOW_16_in_conditionalStatement594);
                if  (this->hasException())
                {
                    goto ruleconditionalStatementEx;
                }


                this->followPush(FOLLOW_expr_in_conditionalStatement596);
                expr();

                this->followPop();
                if  (this->hasException())
                {
                    goto ruleconditionalStatementEx;
                }


                 this->matchToken(17, &FOLLOW_17_in_conditionalStatement598);
                if  (this->hasException())
                {
                    goto ruleconditionalStatementEx;
                }


                 this->matchToken(58, &FOLLOW_58_in_conditionalStatement600);
                if  (this->hasException())
                {
                    goto ruleconditionalStatementEx;
                }


                this->followPush(FOLLOW_statementList_in_conditionalStatement602);
                statementList();

                this->followPop();
                if  (this->hasException())
                {
                    goto ruleconditionalStatementEx;
                }


            }


            // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:64:67: ( 'or' 'maybe' '(' expr ')' 'so' statementList )*

            for (;;)
            {
                int alt25=2;
                switch ( this->LA(1) )
                {
                case 52:
                	{
                		switch ( this->LA(2) )
                		{
                		case 49:
                			{
                				alt25=1;
                			}
                		    break;

                		}

                	}
                    break;

                }

                switch (alt25)
                {
            	case 1:
            	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:64:68: 'or' 'maybe' '(' expr ')' 'so' statementList
            	    {
            	         this->matchToken(52, &FOLLOW_52_in_conditionalStatement606);
            	        if  (this->hasException())
            	        {
            	            goto ruleconditionalStatementEx;
            	        }


            	         this->matchToken(49, &FOLLOW_49_in_conditionalStatement608);
            	        if  (this->hasException())
            	        {
            	            goto ruleconditionalStatementEx;
            	        }


            	         this->matchToken(16, &FOLLOW_16_in_conditionalStatement610);
            	        if  (this->hasException())
            	        {
            	            goto ruleconditionalStatementEx;
            	        }


            	        this->followPush(FOLLOW_expr_in_conditionalStatement612);
            	        expr();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleconditionalStatementEx;
            	        }


            	         this->matchToken(17, &FOLLOW_17_in_conditionalStatement614);
            	        if  (this->hasException())
            	        {
            	            goto ruleconditionalStatementEx;
            	        }


            	         this->matchToken(58, &FOLLOW_58_in_conditionalStatement616);
            	        if  (this->hasException())
            	        {
            	            goto ruleconditionalStatementEx;
            	        }


            	        this->followPush(FOLLOW_statementList_in_conditionalStatement618);
            	        statementList();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleconditionalStatementEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop25;	/* break out of the loop */
            	    break;
                }
            }
            loop25: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleconditionalStatementEx; /* Prevent compiler warnings */
    ruleconditionalStatementEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end conditionalStatement */

/**
 * $ANTLR start expr
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:67:1: expr : prec8 ( '||' prec8 )* ;
 */
void
MAliceParser::expr()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:67:5: ( prec8 ( '||' prec8 )* )
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:67:8: prec8 ( '||' prec8 )*
        {
            this->followPush(FOLLOW_prec8_in_expr629);
            prec8();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleexprEx;
            }


            // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:67:14: ( '||' prec8 )*

            for (;;)
            {
                int alt26=2;
                switch ( this->LA(1) )
                {
                case 69:
                	{
                		alt26=1;
                	}
                    break;

                }

                switch (alt26)
                {
            	case 1:
            	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:67:15: '||' prec8
            	    {
            	         this->matchToken(69, &FOLLOW_69_in_expr632);
            	        if  (this->hasException())
            	        {
            	            goto ruleexprEx;
            	        }


            	        this->followPush(FOLLOW_prec8_in_expr634);
            	        prec8();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexprEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop26;	/* break out of the loop */
            	    break;
                }
            }
            loop26: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleexprEx; /* Prevent compiler warnings */
    ruleexprEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end expr */

/**
 * $ANTLR start prec8
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:68:1: prec8 : prec7 ( '&&' prec7 )* ;
 */
void
MAliceParser::prec8()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:68:6: ( prec7 ( '&&' prec7 )* )
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:68:8: prec7 ( '&&' prec7 )*
        {
            this->followPush(FOLLOW_prec7_in_prec8642);
            prec7();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleprec8Ex;
            }


            // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:68:14: ( '&&' prec7 )*

            for (;;)
            {
                int alt27=2;
                switch ( this->LA(1) )
                {
                case 14:
                	{
                		alt27=1;
                	}
                    break;

                }

                switch (alt27)
                {
            	case 1:
            	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:68:15: '&&' prec7
            	    {
            	         this->matchToken(14, &FOLLOW_14_in_prec8645);
            	        if  (this->hasException())
            	        {
            	            goto ruleprec8Ex;
            	        }


            	        this->followPush(FOLLOW_prec7_in_prec8647);
            	        prec7();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprec8Ex;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop27;	/* break out of the loop */
            	    break;
                }
            }
            loop27: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleprec8Ex; /* Prevent compiler warnings */
    ruleprec8Ex: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end prec8 */

/**
 * $ANTLR start prec7
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:69:1: prec7 : prec6 ( '|' prec6 )* ;
 */
void
MAliceParser::prec7()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:69:6: ( prec6 ( '|' prec6 )* )
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:69:8: prec6 ( '|' prec6 )*
        {
            this->followPush(FOLLOW_prec6_in_prec7655);
            prec6();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleprec7Ex;
            }


            // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:69:14: ( '|' prec6 )*

            for (;;)
            {
                int alt28=2;
                switch ( this->LA(1) )
                {
                case 68:
                	{
                		alt28=1;
                	}
                    break;

                }

                switch (alt28)
                {
            	case 1:
            	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:69:15: '|' prec6
            	    {
            	         this->matchToken(68, &FOLLOW_68_in_prec7658);
            	        if  (this->hasException())
            	        {
            	            goto ruleprec7Ex;
            	        }


            	        this->followPush(FOLLOW_prec6_in_prec7660);
            	        prec6();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprec7Ex;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop28;	/* break out of the loop */
            	    break;
                }
            }
            loop28: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleprec7Ex; /* Prevent compiler warnings */
    ruleprec7Ex: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end prec7 */

/**
 * $ANTLR start prec6
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:70:1: prec6 : prec5 ( '^' prec5 )* ;
 */
void
MAliceParser::prec6()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:70:6: ( prec5 ( '^' prec5 )* )
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:70:8: prec5 ( '^' prec5 )*
        {
            this->followPush(FOLLOW_prec5_in_prec6668);
            prec5();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleprec6Ex;
            }


            // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:70:14: ( '^' prec5 )*

            for (;;)
            {
                int alt29=2;
                switch ( this->LA(1) )
                {
                case 33:
                	{
                		alt29=1;
                	}
                    break;

                }

                switch (alt29)
                {
            	case 1:
            	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:70:15: '^' prec5
            	    {
            	         this->matchToken(33, &FOLLOW_33_in_prec6671);
            	        if  (this->hasException())
            	        {
            	            goto ruleprec6Ex;
            	        }


            	        this->followPush(FOLLOW_prec5_in_prec6673);
            	        prec5();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprec6Ex;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop29;	/* break out of the loop */
            	    break;
                }
            }
            loop29: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleprec6Ex; /* Prevent compiler warnings */
    ruleprec6Ex: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end prec6 */

/**
 * $ANTLR start prec5
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:71:1: prec5 : prec4 ( '&' prec4 )* ;
 */
void
MAliceParser::prec5()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:71:6: ( prec4 ( '&' prec4 )* )
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:71:8: prec4 ( '&' prec4 )*
        {
            this->followPush(FOLLOW_prec4_in_prec5681);
            prec4();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleprec5Ex;
            }


            // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:71:14: ( '&' prec4 )*

            for (;;)
            {
                int alt30=2;
                switch ( this->LA(1) )
                {
                case 15:
                	{
                		alt30=1;
                	}
                    break;

                }

                switch (alt30)
                {
            	case 1:
            	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:71:15: '&' prec4
            	    {
            	         this->matchToken(15, &FOLLOW_15_in_prec5684);
            	        if  (this->hasException())
            	        {
            	            goto ruleprec5Ex;
            	        }


            	        this->followPush(FOLLOW_prec4_in_prec5686);
            	        prec4();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprec5Ex;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop30;	/* break out of the loop */
            	    break;
                }
            }
            loop30: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleprec5Ex; /* Prevent compiler warnings */
    ruleprec5Ex: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end prec5 */

/**
 * $ANTLR start prec4
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:72:1: prec4 : prec3 ( ( '==' | '!=' ) prec3 )* ;
 */
void
MAliceParser::prec4()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:72:6: ( prec3 ( ( '==' | '!=' ) prec3 )* )
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:72:8: prec3 ( ( '==' | '!=' ) prec3 )*
        {
            this->followPush(FOLLOW_prec3_in_prec4694);
            prec3();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleprec4Ex;
            }


            // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:72:14: ( ( '==' | '!=' ) prec3 )*

            for (;;)
            {
                int alt31=2;
                switch ( this->LA(1) )
                {
                case 12:
                case 26:
                	{
                		alt31=1;
                	}
                    break;

                }

                switch (alt31)
                {
            	case 1:
            	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:72:15: ( '==' | '!=' ) prec3
            	    {
            	        if ( this->LA(1) == 12 || this->LA(1) == 26 )
            	        {
            	            this->consume();
            	            this->set_perror_recovery(false);
            	        }
            	        else
            	        {
            	            new ANTLR_Exception< MAliceParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
            	            this->get_exception()->set_expectingSet(NULL);

            	            goto ruleprec4Ex;
            	        }


            	        this->followPush(FOLLOW_prec3_in_prec4705);
            	        prec3();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprec4Ex;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop31;	/* break out of the loop */
            	    break;
                }
            }
            loop31: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleprec4Ex; /* Prevent compiler warnings */
    ruleprec4Ex: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end prec4 */

/**
 * $ANTLR start prec3
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:73:1: prec3 : prec2 ( ( '>' | '<' | '>=' | '<=' ) prec2 )* ;
 */
void
MAliceParser::prec3()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:73:6: ( prec2 ( ( '>' | '<' | '>=' | '<=' ) prec2 )* )
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:73:8: prec2 ( ( '>' | '<' | '>=' | '<=' ) prec2 )*
        {
            this->followPush(FOLLOW_prec2_in_prec3713);
            prec2();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleprec3Ex;
            }


            // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:73:14: ( ( '>' | '<' | '>=' | '<=' ) prec2 )*

            for (;;)
            {
                int alt32=2;
                switch ( this->LA(1) )
                {
                case 24:
                case 25:
                case 27:
                case 28:
                	{
                		alt32=1;
                	}
                    break;

                }

                switch (alt32)
                {
            	case 1:
            	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:73:15: ( '>' | '<' | '>=' | '<=' ) prec2
            	    {
            	        if ( ((this->LA(1) >= 24) && (this->LA(1) <= 25)) || ((this->LA(1) >= 27) && (this->LA(1) <= 28)) )
            	        {
            	            this->consume();
            	            this->set_perror_recovery(false);
            	        }
            	        else
            	        {
            	            new ANTLR_Exception< MAliceParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
            	            this->get_exception()->set_expectingSet(NULL);

            	            goto ruleprec3Ex;
            	        }


            	        this->followPush(FOLLOW_prec2_in_prec3732);
            	        prec2();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprec3Ex;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop32;	/* break out of the loop */
            	    break;
                }
            }
            loop32: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleprec3Ex; /* Prevent compiler warnings */
    ruleprec3Ex: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end prec3 */

/**
 * $ANTLR start prec2
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:74:1: prec2 : prec1 ( ( '+' | '-' ) prec1 )* ;
 */
void
MAliceParser::prec2()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:74:6: ( prec1 ( ( '+' | '-' ) prec1 )* )
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:74:8: prec1 ( ( '+' | '-' ) prec1 )*
        {
            this->followPush(FOLLOW_prec1_in_prec2740);
            prec1();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleprec2Ex;
            }


            // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:74:14: ( ( '+' | '-' ) prec1 )*

            for (;;)
            {
                int alt33=2;
                switch ( this->LA(1) )
                {
                case 19:
                case 21:
                	{
                		alt33=1;
                	}
                    break;

                }

                switch (alt33)
                {
            	case 1:
            	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:74:15: ( '+' | '-' ) prec1
            	    {
            	        if ( this->LA(1) == 19 || this->LA(1) == 21 )
            	        {
            	            this->consume();
            	            this->set_perror_recovery(false);
            	        }
            	        else
            	        {
            	            new ANTLR_Exception< MAliceParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
            	            this->get_exception()->set_expectingSet(NULL);

            	            goto ruleprec2Ex;
            	        }


            	        this->followPush(FOLLOW_prec1_in_prec2751);
            	        prec1();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprec2Ex;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop33;	/* break out of the loop */
            	    break;
                }
            }
            loop33: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleprec2Ex; /* Prevent compiler warnings */
    ruleprec2Ex: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end prec2 */

/**
 * $ANTLR start prec1
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:75:1: prec1 : prec0 ( ( '*' | '/' | '%' ) prec0 )* ;
 */
void
MAliceParser::prec1()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:75:6: ( prec0 ( ( '*' | '/' | '%' ) prec0 )* )
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:75:8: prec0 ( ( '*' | '/' | '%' ) prec0 )*
        {
            this->followPush(FOLLOW_prec0_in_prec1759);
            prec0();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleprec1Ex;
            }


            // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:75:14: ( ( '*' | '/' | '%' ) prec0 )*

            for (;;)
            {
                int alt34=2;
                switch ( this->LA(1) )
                {
                case 13:
                case 18:
                case 23:
                	{
                		alt34=1;
                	}
                    break;

                }

                switch (alt34)
                {
            	case 1:
            	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:75:15: ( '*' | '/' | '%' ) prec0
            	    {
            	        if ( this->LA(1) == 13 || this->LA(1) == 18 || this->LA(1) == 23 )
            	        {
            	            this->consume();
            	            this->set_perror_recovery(false);
            	        }
            	        else
            	        {
            	            new ANTLR_Exception< MAliceParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
            	            this->get_exception()->set_expectingSet(NULL);

            	            goto ruleprec1Ex;
            	        }


            	        this->followPush(FOLLOW_prec0_in_prec1774);
            	        prec0();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprec1Ex;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop34;	/* break out of the loop */
            	    break;
                }
            }
            loop34: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleprec1Ex; /* Prevent compiler warnings */
    ruleprec1Ex: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end prec1 */

/**
 * $ANTLR start prec0
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:76:1: prec0 : ( '!' | '~' | '+' | '-' )? atom ;
 */
void
MAliceParser::prec0()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:76:6: ( ( '!' | '~' | '+' | '-' )? atom )
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:76:8: ( '!' | '~' | '+' | '-' )? atom
        {
            // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:76:8: ( '!' | '~' | '+' | '-' )?
            {
                int alt35=2;
                switch ( this->LA(1) )
                {
                    case 11:
                    case 19:
                    case 21:
                    case 70:
                    	{
                    		alt35=1;
                    	}
                        break;
                }

                switch (alt35)
                {
            	case 1:
            	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:
            	    {
            	        if ( this->LA(1) == 11 || this->LA(1) == 19 || this->LA(1) == 21 || this->LA(1) == 70 )
            	        {
            	            this->consume();
            	            this->set_perror_recovery(false);
            	        }
            	        else
            	        {
            	            new ANTLR_Exception< MAliceParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
            	            this->get_exception()->set_expectingSet(NULL);

            	            goto ruleprec0Ex;
            	        }


            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_atom_in_prec0799);
            atom();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleprec0Ex;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleprec0Ex; /* Prevent compiler warnings */
    ruleprec0Ex: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end prec0 */

/**
 * $ANTLR start atom
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:78:1: atom : ( ID ( '\\'' 's' expr 'piece' | callParams )? | CHAR | STRING | INT | '(' expr ')' );
 */
void
MAliceParser::atom()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        {
            //  E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:78:5: ( ID ( '\\'' 's' expr 'piece' | callParams )? | CHAR | STRING | INT | '(' expr ')' )

            ANTLR_UINT32 alt37;

            alt37=5;

            switch ( this->LA(1) )
            {
            case ID:
            	{
            		alt37=1;
            	}
                break;
            case CHAR:
            	{
            		alt37=2;
            	}
                break;
            case STRING:
            	{
            		alt37=3;
            	}
                break;
            case INT:
            	{
            		alt37=4;
            	}
                break;
            case 16:
            	{
            		alt37=5;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< MAliceParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 37 );
                ex->set_state( 0 );


                goto ruleatomEx;

            }

            switch (alt37)
            {
        	case 1:
        	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:78:7: ID ( '\\'' 's' expr 'piece' | callParams )?
        	    {
        	         this->matchToken(ID, &FOLLOW_ID_in_atom806);
        	        if  (this->hasException())
        	        {
        	            goto ruleatomEx;
        	        }


        	        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:78:10: ( '\\'' 's' expr 'piece' | callParams )?
        	        {
        	            int alt36=3;
        	            switch ( this->LA(1) )
        	            {
        	                case 32:
        	                	{
        	                		alt36=1;
        	                	}
        	                    break;
        	                case 16:
        	                	{
        	                		alt36=2;
        	                	}
        	                    break;
        	            }

        	            switch (alt36)
        	            {
        	        	case 1:
        	        	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:78:11: '\\'' 's' expr 'piece'
        	        	    {
        	        	         this->matchToken(32, &FOLLOW_32_in_atom809);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleatomEx;
        	        	        }


        	        	         this->matchToken(56, &FOLLOW_56_in_atom811);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleatomEx;
        	        	        }


        	        	        this->followPush(FOLLOW_expr_in_atom813);
        	        	        expr();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleatomEx;
        	        	        }


        	        	         this->matchToken(54, &FOLLOW_54_in_atom815);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleatomEx;
        	        	        }


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:78:35: callParams
        	        	    {
        	        	        this->followPush(FOLLOW_callParams_in_atom819);
        	        	        callParams();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleatomEx;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 2:
        	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:79:7: CHAR
        	    {
        	         this->matchToken(CHAR, &FOLLOW_CHAR_in_atom831);
        	        if  (this->hasException())
        	        {
        	            goto ruleatomEx;
        	        }


        	    }
        	    break;
        	case 3:
        	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:80:7: STRING
        	    {
        	         this->matchToken(STRING, &FOLLOW_STRING_in_atom842);
        	        if  (this->hasException())
        	        {
        	            goto ruleatomEx;
        	        }


        	    }
        	    break;
        	case 4:
        	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:81:7: INT
        	    {
        	         this->matchToken(INT, &FOLLOW_INT_in_atom852);
        	        if  (this->hasException())
        	        {
        	            goto ruleatomEx;
        	        }


        	    }
        	    break;
        	case 5:
        	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:82:7: '(' expr ')'
        	    {
        	         this->matchToken(16, &FOLLOW_16_in_atom862);
        	        if  (this->hasException())
        	        {
        	            goto ruleatomEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_atom864);
        	        expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleatomEx;
        	        }


        	         this->matchToken(17, &FOLLOW_17_in_atom866);
        	        if  (this->hasException())
        	        {
        	            goto ruleatomEx;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleatomEx; /* Prevent compiler warnings */
    ruleatomEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end atom */

/**
 * $ANTLR start delimiter
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:85:1: delimiter : ( '.' | ',' | 'and' | 'but' | 'then' );
 */
void
MAliceParser::delimiter()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:85:10: ( '.' | ',' | 'and' | 'but' | 'then' )
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:
        {
            if ( this->LA(1) == 20 || this->LA(1) == 22 || this->LA(1) == 35 || this->LA(1) == 39 || this->LA(1) == 61 )
            {
                this->consume();
                this->set_perror_recovery(false);
            }
            else
            {
                new ANTLR_Exception< MAliceParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
                this->get_exception()->set_expectingSet(NULL);

                goto ruledelimiterEx;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruledelimiterEx; /* Prevent compiler warnings */
    ruledelimiterEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end delimiter */
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
/* End of syntactic predicates
 * ==============================================
 */

	}


/* End of code
 * =============================================================================
 */
