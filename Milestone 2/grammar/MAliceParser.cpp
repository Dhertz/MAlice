/** \file
 *  This C++ source file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g
 *     -                            On : 2012-11-07 16:54:40
 *     -                for the parser : MAliceParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C++ language generator and runtime by Gokulakannan Somasundaram ( heavy lifting from C Run-time by Jim Idle )
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Gokulakannan Somasundaram, ElectronDB
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "MAliceParser.hpp"
/* ----------------------------------------- */


/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */

	namespace  MAlice  {

using namespace antlr3;
/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
ANTLR_UINT8*   MAliceParserTokenNames[48+4]
     = {
        (ANTLR_UINT8*) "<invalid>",       /* String to print to indicate an invalid token */
        (ANTLR_UINT8*) "<EOR>",
        (ANTLR_UINT8*) "<DOWN>",
        (ANTLR_UINT8*) "<UP>",
        (ANTLR_UINT8*) "CHAR",
        (ANTLR_UINT8*) "COMMENT",
        (ANTLR_UINT8*) "ID",
        (ANTLR_UINT8*) "INT",
        (ANTLR_UINT8*) "STRING",
        (ANTLR_UINT8*) "TYPE",
        (ANTLR_UINT8*) "WS",
        (ANTLR_UINT8*) "'!'",
        (ANTLR_UINT8*) "'!='",
        (ANTLR_UINT8*) "'%'",
        (ANTLR_UINT8*) "'&&'",
        (ANTLR_UINT8*) "'&'",
        (ANTLR_UINT8*) "'('",
        (ANTLR_UINT8*) "')'",
        (ANTLR_UINT8*) "'*'",
        (ANTLR_UINT8*) "'+'",
        (ANTLR_UINT8*) "','",
        (ANTLR_UINT8*) "'-'",
        (ANTLR_UINT8*) "'.'",
        (ANTLR_UINT8*) "'/'",
        (ANTLR_UINT8*) "'<'",
        (ANTLR_UINT8*) "'<='",
        (ANTLR_UINT8*) "'=='",
        (ANTLR_UINT8*) "'>'",
        (ANTLR_UINT8*) "'>='",
        (ANTLR_UINT8*) "'The'",
        (ANTLR_UINT8*) "'\\''",
        (ANTLR_UINT8*) "'^'",
        (ANTLR_UINT8*) "'a'",
        (ANTLR_UINT8*) "'and'",
        (ANTLR_UINT8*) "'but'",
        (ANTLR_UINT8*) "'closed'",
        (ANTLR_UINT8*) "'contained'",
        (ANTLR_UINT8*) "'glass'",
        (ANTLR_UINT8*) "'had'",
        (ANTLR_UINT8*) "'looking'",
        (ANTLR_UINT8*) "'of'",
        (ANTLR_UINT8*) "'opened'",
        (ANTLR_UINT8*) "'piece'",
        (ANTLR_UINT8*) "'room'",
        (ANTLR_UINT8*) "'s'",
        (ANTLR_UINT8*) "'spider'",
        (ANTLR_UINT8*) "'then'",
        (ANTLR_UINT8*) "'too'",
        (ANTLR_UINT8*) "'was'",
        (ANTLR_UINT8*) "'|'",
        (ANTLR_UINT8*) "'||'",
        (ANTLR_UINT8*) "'~'"
       };


/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g";

/** \brief Return the name of the grammar file that generated this code.
 */
const char* MAliceParser::getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new MAliceParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
MAliceParser::MAliceParser( StreamType* instream)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, NULL)

{
	// See if we can create a new parser with the standard constructor
	//
	this->init(instream);
}

/** \brief Create a new MAliceParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
MAliceParser::MAliceParser( StreamType* instream, RecognizerSharedStateType* state)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, state)

{
	this->init(instream );
}

void MAliceParser::init(StreamType* instream)
{
	/* Install the token table
	*/
	this->get_psrstate()->set_tokenNames( MAliceParserTokenNames );


}

void
MAliceParser::reset()
{
    this->get_rec()->reset();
}

/** Free the parser resources
 */
MAliceParser::~MAliceParser()
 {
}

/** Return token names used by this 
parser

 *
 * The returned pointer is used as an index into the token names table (using the token
 * number as the index).
 *
 * \return Pointer to first char * in the table.
 */
static ANTLR_UINT8**	getTokenNames()
{
        return MAliceParserTokenNames;
}


/* Declare the bitsets
 */
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_declarationList_in_program63_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_declarationList_in_program63( FOLLOW_declarationList_in_program63_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_EOF_in_program65_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_EOF_in_program65( FOLLOW_EOF_in_program65_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_declaration_in_declarationList73_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000042) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_declaration_in_declarationList73( FOLLOW_declaration_in_declarationList73_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_varDeclaration_in_declaration85_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_varDeclaration_in_declaration85( FOLLOW_varDeclaration_in_declaration85_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_funcDeclaration_in_declaration89_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_funcDeclaration_in_declaration89( FOLLOW_funcDeclaration_in_declaration89_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_procDeclaration_in_declaration93_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_procDeclaration_in_declaration93( FOLLOW_procDeclaration_in_declaration93_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_29_in_procDeclaration101_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_29_in_procDeclaration101( FOLLOW_29_in_procDeclaration101_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_39_in_procDeclaration103_bits[]	= { ANTLR_UINT64_LIT(0x0000002000000000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_39_in_procDeclaration103( FOLLOW_39_in_procDeclaration103_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_37_in_procDeclaration105_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_37_in_procDeclaration105( FOLLOW_37_in_procDeclaration105_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_procDeclaration107_bits[]	= { ANTLR_UINT64_LIT(0x0000000000010000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_ID_in_procDeclaration107( FOLLOW_ID_in_procDeclaration107_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_headerParams_in_procDeclaration109_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_headerParams_in_procDeclaration109( FOLLOW_headerParams_in_procDeclaration109_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_body_in_procDeclaration111_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_body_in_procDeclaration111( FOLLOW_body_in_procDeclaration111_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_16_in_headerParams121_bits[]	= { ANTLR_UINT64_LIT(0x0000200000020200) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_16_in_headerParams121( FOLLOW_16_in_headerParams121_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_headerParamsList_in_headerParams123_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_headerParamsList_in_headerParams123( FOLLOW_headerParamsList_in_headerParams123_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_17_in_headerParams126_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_17_in_headerParams126( FOLLOW_17_in_headerParams126_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_headerParam_in_headerParamsList132_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_headerParam_in_headerParamsList132( FOLLOW_headerParam_in_headerParamsList132_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_20_in_headerParamsList135_bits[]	= { ANTLR_UINT64_LIT(0x0000200000000200) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_20_in_headerParamsList135( FOLLOW_20_in_headerParamsList135_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_headerParam_in_headerParamsList137_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_headerParam_in_headerParamsList137( FOLLOW_headerParam_in_headerParamsList137_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_45_in_headerParam150_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000200) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_45_in_headerParam150( FOLLOW_45_in_headerParam150_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_TYPE_in_headerParam153_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_TYPE_in_headerParam153( FOLLOW_TYPE_in_headerParam153_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_headerParam155_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_ID_in_headerParam155( FOLLOW_ID_in_headerParam155_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_16_in_callParams162_bits[]	= { ANTLR_UINT64_LIT(0x00080000002B09D0) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_16_in_callParams162( FOLLOW_16_in_callParams162_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_callParamsList_in_callParams165_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_callParamsList_in_callParams165( FOLLOW_callParamsList_in_callParams165_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_17_in_callParams169_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_17_in_callParams169( FOLLOW_17_in_callParams169_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_callParamsList175_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_expr_in_callParamsList175( FOLLOW_expr_in_callParamsList175_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_20_in_callParamsList178_bits[]	= { ANTLR_UINT64_LIT(0x00080000002909D0) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_20_in_callParamsList178( FOLLOW_20_in_callParamsList178_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_callParamsList180_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_expr_in_callParamsList180( FOLLOW_expr_in_callParamsList180_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_29_in_funcDeclaration189_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_29_in_funcDeclaration189( FOLLOW_29_in_funcDeclaration189_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_43_in_funcDeclaration191_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000040) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_43_in_funcDeclaration191( FOLLOW_43_in_funcDeclaration191_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_funcDeclaration193_bits[]	= { ANTLR_UINT64_LIT(0x0000000000010000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_ID_in_funcDeclaration193( FOLLOW_ID_in_funcDeclaration193_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_headerParams_in_funcDeclaration195_bits[]	= { ANTLR_UINT64_LIT(0x0000001000000000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_headerParams_in_funcDeclaration195( FOLLOW_headerParams_in_funcDeclaration195_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_36_in_funcDeclaration197_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_36_in_funcDeclaration197( FOLLOW_36_in_funcDeclaration197_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_32_in_funcDeclaration199_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000200) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_32_in_funcDeclaration199( FOLLOW_32_in_funcDeclaration199_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_TYPE_in_funcDeclaration201_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_TYPE_in_funcDeclaration201( FOLLOW_TYPE_in_funcDeclaration201_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_body_in_funcDeclaration203_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_body_in_funcDeclaration203( FOLLOW_body_in_funcDeclaration203_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_varDeclaration211_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_ID_in_varDeclaration211( FOLLOW_ID_in_varDeclaration211_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_48_in_varDeclaration213_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_48_in_varDeclaration213( FOLLOW_48_in_varDeclaration213_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_32_in_varDeclaration215_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000200) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_32_in_varDeclaration215( FOLLOW_32_in_varDeclaration215_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_TYPE_in_varDeclaration217_bits[]	= { ANTLR_UINT64_LIT(0x0000C10600500000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_TYPE_in_varDeclaration217( FOLLOW_TYPE_in_varDeclaration217_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_47_in_varDeclaration221_bits[]	= { ANTLR_UINT64_LIT(0x0000400600500000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_47_in_varDeclaration221( FOLLOW_47_in_varDeclaration221_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_40_in_varDeclaration225_bits[]	= { ANTLR_UINT64_LIT(0x00080000002909D0) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_40_in_varDeclaration225( FOLLOW_40_in_varDeclaration225_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_varDeclaration227_bits[]	= { ANTLR_UINT64_LIT(0x0000400600500000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_expr_in_varDeclaration227( FOLLOW_expr_in_varDeclaration227_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_delimiter_in_varDeclaration232_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_delimiter_in_varDeclaration232( FOLLOW_delimiter_in_varDeclaration232_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_varDeclaration254_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_ID_in_varDeclaration254( FOLLOW_ID_in_varDeclaration254_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_38_in_varDeclaration256_bits[]	= { ANTLR_UINT64_LIT(0x00080000002909D0) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_38_in_varDeclaration256( FOLLOW_38_in_varDeclaration256_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_varDeclaration258_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000200) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_expr_in_varDeclaration258( FOLLOW_expr_in_varDeclaration258_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_TYPE_in_varDeclaration260_bits[]	= { ANTLR_UINT64_LIT(0x0000400600500000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_TYPE_in_varDeclaration260( FOLLOW_TYPE_in_varDeclaration260_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_delimiter_in_varDeclaration262_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_delimiter_in_varDeclaration262( FOLLOW_delimiter_in_varDeclaration262_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_41_in_body270_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_41_in_body270( FOLLOW_41_in_body270_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_35_in_body272_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_35_in_body272( FOLLOW_35_in_body272_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_prec8_in_expr281_bits[]	= { ANTLR_UINT64_LIT(0x0004000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_prec8_in_expr281( FOLLOW_prec8_in_expr281_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_50_in_expr284_bits[]	= { ANTLR_UINT64_LIT(0x00080000002909D0) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_50_in_expr284( FOLLOW_50_in_expr284_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_prec8_in_expr286_bits[]	= { ANTLR_UINT64_LIT(0x0004000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_prec8_in_expr286( FOLLOW_prec8_in_expr286_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_prec7_in_prec8294_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_prec7_in_prec8294( FOLLOW_prec7_in_prec8294_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_14_in_prec8297_bits[]	= { ANTLR_UINT64_LIT(0x00080000002909D0) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_14_in_prec8297( FOLLOW_14_in_prec8297_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_prec7_in_prec8299_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_prec7_in_prec8299( FOLLOW_prec7_in_prec8299_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_prec6_in_prec7307_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_prec6_in_prec7307( FOLLOW_prec6_in_prec7307_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_49_in_prec7310_bits[]	= { ANTLR_UINT64_LIT(0x00080000002909D0) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_49_in_prec7310( FOLLOW_49_in_prec7310_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_prec6_in_prec7312_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_prec6_in_prec7312( FOLLOW_prec6_in_prec7312_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_prec5_in_prec6320_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_prec5_in_prec6320( FOLLOW_prec5_in_prec6320_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_31_in_prec6323_bits[]	= { ANTLR_UINT64_LIT(0x00080000002909D0) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_31_in_prec6323( FOLLOW_31_in_prec6323_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_prec5_in_prec6325_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_prec5_in_prec6325( FOLLOW_prec5_in_prec6325_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_prec4_in_prec5333_bits[]	= { ANTLR_UINT64_LIT(0x0000000000008002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_prec4_in_prec5333( FOLLOW_prec4_in_prec5333_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_15_in_prec5336_bits[]	= { ANTLR_UINT64_LIT(0x00080000002909D0) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_15_in_prec5336( FOLLOW_15_in_prec5336_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_prec4_in_prec5338_bits[]	= { ANTLR_UINT64_LIT(0x0000000000008002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_prec4_in_prec5338( FOLLOW_prec4_in_prec5338_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_prec3_in_prec4346_bits[]	= { ANTLR_UINT64_LIT(0x0000000004001002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_prec3_in_prec4346( FOLLOW_prec3_in_prec4346_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_set_in_prec4349_bits[]	= { ANTLR_UINT64_LIT(0x00080000002909D0) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_set_in_prec4349( FOLLOW_set_in_prec4349_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_prec3_in_prec4357_bits[]	= { ANTLR_UINT64_LIT(0x0000000004001002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_prec3_in_prec4357( FOLLOW_prec3_in_prec4357_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_prec2_in_prec3365_bits[]	= { ANTLR_UINT64_LIT(0x000000001B000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_prec2_in_prec3365( FOLLOW_prec2_in_prec3365_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_set_in_prec3368_bits[]	= { ANTLR_UINT64_LIT(0x00080000002909D0) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_set_in_prec3368( FOLLOW_set_in_prec3368_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_prec2_in_prec3384_bits[]	= { ANTLR_UINT64_LIT(0x000000001B000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_prec2_in_prec3384( FOLLOW_prec2_in_prec3384_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_prec1_in_prec2392_bits[]	= { ANTLR_UINT64_LIT(0x0000000000280002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_prec1_in_prec2392( FOLLOW_prec1_in_prec2392_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_set_in_prec2395_bits[]	= { ANTLR_UINT64_LIT(0x00080000002909D0) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_set_in_prec2395( FOLLOW_set_in_prec2395_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_prec1_in_prec2403_bits[]	= { ANTLR_UINT64_LIT(0x0000000000280002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_prec1_in_prec2403( FOLLOW_prec1_in_prec2403_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_prec0_in_prec1411_bits[]	= { ANTLR_UINT64_LIT(0x0000000000842002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_prec0_in_prec1411( FOLLOW_prec0_in_prec1411_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_set_in_prec1414_bits[]	= { ANTLR_UINT64_LIT(0x00080000002909D0) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_set_in_prec1414( FOLLOW_set_in_prec1414_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_prec0_in_prec1426_bits[]	= { ANTLR_UINT64_LIT(0x0000000000842002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_prec0_in_prec1426( FOLLOW_prec0_in_prec1426_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_atom_in_prec0451_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_atom_in_prec0451( FOLLOW_atom_in_prec0451_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_atom458_bits[]	= { ANTLR_UINT64_LIT(0x0000000040010002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_ID_in_atom458( FOLLOW_ID_in_atom458_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_30_in_atom461_bits[]	= { ANTLR_UINT64_LIT(0x0000100000000000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_30_in_atom461( FOLLOW_30_in_atom461_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_44_in_atom463_bits[]	= { ANTLR_UINT64_LIT(0x00080000002909D0) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_44_in_atom463( FOLLOW_44_in_atom463_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_atom465_bits[]	= { ANTLR_UINT64_LIT(0x0000040000000000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_expr_in_atom465( FOLLOW_expr_in_atom465_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_42_in_atom467_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_42_in_atom467( FOLLOW_42_in_atom467_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_callParams_in_atom471_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_callParams_in_atom471( FOLLOW_callParams_in_atom471_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_CHAR_in_atom483_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_CHAR_in_atom483( FOLLOW_CHAR_in_atom483_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_STRING_in_atom494_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_STRING_in_atom494( FOLLOW_STRING_in_atom494_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_INT_in_atom504_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_INT_in_atom504( FOLLOW_INT_in_atom504_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_16_in_atom514_bits[]	= { ANTLR_UINT64_LIT(0x00080000002909D0) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_16_in_atom514( FOLLOW_16_in_atom514_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_atom516_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_expr_in_atom516( FOLLOW_expr_in_atom516_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_17_in_atom518_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_17_in_atom518( FOLLOW_17_in_atom518_bits, 1 );


/* ==============================================
 * Parsing rules
 */
/**
 * $ANTLR start program
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:30:1: program : declarationList EOF ;
 */
void
MAliceParser::program()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:30:8: ( declarationList EOF )
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:30:10: declarationList EOF
        {
            this->followPush(FOLLOW_declarationList_in_program63);
            declarationList();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleprogramEx;
            }


             this->matchToken(EOF, &FOLLOW_EOF_in_program65);
            if  (this->hasException())
            {
                goto ruleprogramEx;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleprogramEx; /* Prevent compiler warnings */
    ruleprogramEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end program */

/**
 * $ANTLR start declarationList
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:32:1: declarationList : ( declaration )+ ;
 */
void
MAliceParser::declarationList()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:32:16: ( ( declaration )+ )
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:32:18: ( declaration )+
        {
            // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:32:18: ( declaration )+
            {
                int cnt1=0;

                for (;;)
                {
                    int alt1=2;
            	switch ( this->LA(1) )
            	{
            	case ID:
            	case 29:
            		{
            			alt1=1;
            		}
            	    break;

            	}

            	switch (alt1)
            	{
            	    case 1:
            	        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:32:19: declaration
            	        {
            	            this->followPush(FOLLOW_declaration_in_declarationList73);
            	            declaration();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruledeclarationListEx;
            	            }


            	        }
            	        break;

            	    default:

            		if ( cnt1 >= 1 )
            		{
            		    goto loop1;
            		}
            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< MAliceParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto ruledeclarationListEx;
            	}
            	cnt1++;
                }
                loop1: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruledeclarationListEx; /* Prevent compiler warnings */
    ruledeclarationListEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end declarationList */

/**
 * $ANTLR start declaration
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:33:1: declaration : ( varDeclaration | funcDeclaration | procDeclaration );
 */
void
MAliceParser::declaration()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        {
            //  E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:33:12: ( varDeclaration | funcDeclaration | procDeclaration )

            ANTLR_UINT32 alt2;

            alt2=3;

            switch ( this->LA(1) )
            {
            case ID:
            	{
            		alt2=1;
            	}
                break;
            case 29:
            	{
            		switch ( this->LA(2) )
            		{
            		case 43:
            			{
            				alt2=2;
            			}
            		    break;
            		case 39:
            			{
            				alt2=3;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< MAliceParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 2 );
            		    ex->set_state( 2 );


            		    goto ruledeclarationEx;

            		}

            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< MAliceParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 2 );
                ex->set_state( 0 );


                goto ruledeclarationEx;

            }

            switch (alt2)
            {
        	case 1:
        	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:33:18: varDeclaration
        	    {
        	        this->followPush(FOLLOW_varDeclaration_in_declaration85);
        	        varDeclaration();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruledeclarationEx;
        	        }


        	    }
        	    break;
        	case 2:
        	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:33:35: funcDeclaration
        	    {
        	        this->followPush(FOLLOW_funcDeclaration_in_declaration89);
        	        funcDeclaration();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruledeclarationEx;
        	        }


        	    }
        	    break;
        	case 3:
        	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:33:53: procDeclaration
        	    {
        	        this->followPush(FOLLOW_procDeclaration_in_declaration93);
        	        procDeclaration();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruledeclarationEx;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruledeclarationEx; /* Prevent compiler warnings */
    ruledeclarationEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end declaration */

/**
 * $ANTLR start procDeclaration
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:35:1: procDeclaration : 'The' 'looking' 'glass' ID headerParams body ;
 */
void
MAliceParser::procDeclaration()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:35:16: ( 'The' 'looking' 'glass' ID headerParams body )
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:35:19: 'The' 'looking' 'glass' ID headerParams body
        {
             this->matchToken(29, &FOLLOW_29_in_procDeclaration101);
            if  (this->hasException())
            {
                goto ruleprocDeclarationEx;
            }


             this->matchToken(39, &FOLLOW_39_in_procDeclaration103);
            if  (this->hasException())
            {
                goto ruleprocDeclarationEx;
            }


             this->matchToken(37, &FOLLOW_37_in_procDeclaration105);
            if  (this->hasException())
            {
                goto ruleprocDeclarationEx;
            }


             this->matchToken(ID, &FOLLOW_ID_in_procDeclaration107);
            if  (this->hasException())
            {
                goto ruleprocDeclarationEx;
            }


            this->followPush(FOLLOW_headerParams_in_procDeclaration109);
            headerParams();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleprocDeclarationEx;
            }


            this->followPush(FOLLOW_body_in_procDeclaration111);
            body();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleprocDeclarationEx;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleprocDeclarationEx; /* Prevent compiler warnings */
    ruleprocDeclarationEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end procDeclaration */

/**
 * $ANTLR start headerParams
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:36:1: headerParams : '(' ( headerParamsList )? ')' ;
 */
void
MAliceParser::headerParams()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:36:13: ( '(' ( headerParamsList )? ')' )
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:36:19: '(' ( headerParamsList )? ')'
        {
             this->matchToken(16, &FOLLOW_16_in_headerParams121);
            if  (this->hasException())
            {
                goto ruleheaderParamsEx;
            }


            // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:36:23: ( headerParamsList )?
            {
                int alt3=2;
                switch ( this->LA(1) )
                {
                    case TYPE:
                    case 45:
                    	{
                    		alt3=1;
                    	}
                        break;
                }

                switch (alt3)
                {
            	case 1:
            	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:36:23: headerParamsList
            	    {
            	        this->followPush(FOLLOW_headerParamsList_in_headerParams123);
            	        headerParamsList();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleheaderParamsEx;
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(17, &FOLLOW_17_in_headerParams126);
            if  (this->hasException())
            {
                goto ruleheaderParamsEx;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleheaderParamsEx; /* Prevent compiler warnings */
    ruleheaderParamsEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end headerParams */

/**
 * $ANTLR start headerParamsList
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:37:1: headerParamsList : headerParam ( ',' headerParam )* ;
 */
void
MAliceParser::headerParamsList()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:37:17: ( headerParam ( ',' headerParam )* )
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:37:19: headerParam ( ',' headerParam )*
        {
            this->followPush(FOLLOW_headerParam_in_headerParamsList132);
            headerParam();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleheaderParamsListEx;
            }


            // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:37:31: ( ',' headerParam )*

            for (;;)
            {
                int alt4=2;
                switch ( this->LA(1) )
                {
                case 20:
                	{
                		alt4=1;
                	}
                    break;

                }

                switch (alt4)
                {
            	case 1:
            	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:37:32: ',' headerParam
            	    {
            	         this->matchToken(20, &FOLLOW_20_in_headerParamsList135);
            	        if  (this->hasException())
            	        {
            	            goto ruleheaderParamsListEx;
            	        }


            	        this->followPush(FOLLOW_headerParam_in_headerParamsList137);
            	        headerParam();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleheaderParamsListEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop4;	/* break out of the loop */
            	    break;
                }
            }
            loop4: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleheaderParamsListEx; /* Prevent compiler warnings */
    ruleheaderParamsListEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end headerParamsList */

/**
 * $ANTLR start headerParam
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:38:1: headerParam : ( 'spider' )? TYPE ID ;
 */
void
MAliceParser::headerParam()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:38:12: ( ( 'spider' )? TYPE ID )
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:38:19: ( 'spider' )? TYPE ID
        {
            // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:38:19: ( 'spider' )?
            {
                int alt5=2;
                switch ( this->LA(1) )
                {
                    case 45:
                    	{
                    		alt5=1;
                    	}
                        break;
                }

                switch (alt5)
                {
            	case 1:
            	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:38:19: 'spider'
            	    {
            	         this->matchToken(45, &FOLLOW_45_in_headerParam150);
            	        if  (this->hasException())
            	        {
            	            goto ruleheaderParamEx;
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(TYPE, &FOLLOW_TYPE_in_headerParam153);
            if  (this->hasException())
            {
                goto ruleheaderParamEx;
            }


             this->matchToken(ID, &FOLLOW_ID_in_headerParam155);
            if  (this->hasException())
            {
                goto ruleheaderParamEx;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleheaderParamEx; /* Prevent compiler warnings */
    ruleheaderParamEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end headerParam */

/**
 * $ANTLR start callParams
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:40:1: callParams : '(' ( ( callParamsList )? ) ')' ;
 */
void
MAliceParser::callParams()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:40:11: ( '(' ( ( callParamsList )? ) ')' )
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:40:13: '(' ( ( callParamsList )? ) ')'
        {
             this->matchToken(16, &FOLLOW_16_in_callParams162);
            if  (this->hasException())
            {
                goto rulecallParamsEx;
            }


            // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:40:17: ( ( callParamsList )? )
            // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:40:18: ( callParamsList )?
            {
                // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:40:18: ( callParamsList )?
                {
                    int alt6=2;
                    switch ( this->LA(1) )
                    {
                        case CHAR:
                        case ID:
                        case INT:
                        case STRING:
                        case 11:
                        case 16:
                        case 19:
                        case 21:
                        case 51:
                        	{
                        		alt6=1;
                        	}
                            break;
                    }

                    switch (alt6)
                    {
                	case 1:
                	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:40:18: callParamsList
                	    {
                	        this->followPush(FOLLOW_callParamsList_in_callParams165);
                	        callParamsList();

                	        this->followPop();
                	        if  (this->hasException())
                	        {
                	            goto rulecallParamsEx;
                	        }


                	    }
                	    break;

                    }
                }

            }


             this->matchToken(17, &FOLLOW_17_in_callParams169);
            if  (this->hasException())
            {
                goto rulecallParamsEx;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulecallParamsEx; /* Prevent compiler warnings */
    rulecallParamsEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end callParams */

/**
 * $ANTLR start callParamsList
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:41:1: callParamsList : expr ( ',' expr )* ;
 */
void
MAliceParser::callParamsList()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:41:15: ( expr ( ',' expr )* )
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:41:17: expr ( ',' expr )*
        {
            this->followPush(FOLLOW_expr_in_callParamsList175);
            expr();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecallParamsListEx;
            }


            // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:41:22: ( ',' expr )*

            for (;;)
            {
                int alt7=2;
                switch ( this->LA(1) )
                {
                case 20:
                	{
                		alt7=1;
                	}
                    break;

                }

                switch (alt7)
                {
            	case 1:
            	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:41:23: ',' expr
            	    {
            	         this->matchToken(20, &FOLLOW_20_in_callParamsList178);
            	        if  (this->hasException())
            	        {
            	            goto rulecallParamsListEx;
            	        }


            	        this->followPush(FOLLOW_expr_in_callParamsList180);
            	        expr();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecallParamsListEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop7;	/* break out of the loop */
            	    break;
                }
            }
            loop7: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto rulecallParamsListEx; /* Prevent compiler warnings */
    rulecallParamsListEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end callParamsList */

/**
 * $ANTLR start funcDeclaration
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:43:1: funcDeclaration : 'The' 'room' ID headerParams 'contained' 'a' TYPE body ;
 */
void
MAliceParser::funcDeclaration()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:43:16: ( 'The' 'room' ID headerParams 'contained' 'a' TYPE body )
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:43:18: 'The' 'room' ID headerParams 'contained' 'a' TYPE body
        {
             this->matchToken(29, &FOLLOW_29_in_funcDeclaration189);
            if  (this->hasException())
            {
                goto rulefuncDeclarationEx;
            }


             this->matchToken(43, &FOLLOW_43_in_funcDeclaration191);
            if  (this->hasException())
            {
                goto rulefuncDeclarationEx;
            }


             this->matchToken(ID, &FOLLOW_ID_in_funcDeclaration193);
            if  (this->hasException())
            {
                goto rulefuncDeclarationEx;
            }


            this->followPush(FOLLOW_headerParams_in_funcDeclaration195);
            headerParams();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefuncDeclarationEx;
            }


             this->matchToken(36, &FOLLOW_36_in_funcDeclaration197);
            if  (this->hasException())
            {
                goto rulefuncDeclarationEx;
            }


             this->matchToken(32, &FOLLOW_32_in_funcDeclaration199);
            if  (this->hasException())
            {
                goto rulefuncDeclarationEx;
            }


             this->matchToken(TYPE, &FOLLOW_TYPE_in_funcDeclaration201);
            if  (this->hasException())
            {
                goto rulefuncDeclarationEx;
            }


            this->followPush(FOLLOW_body_in_funcDeclaration203);
            body();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefuncDeclarationEx;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulefuncDeclarationEx; /* Prevent compiler warnings */
    rulefuncDeclarationEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end funcDeclaration */

/**
 * $ANTLR start varDeclaration
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:45:1: varDeclaration : ( ( ID 'was' 'a' TYPE ( ( 'too' | 'of' expr )? ) delimiter ) | ( ID 'had' expr TYPE delimiter ) );
 */
void
MAliceParser::varDeclaration()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        {
            //  E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:45:15: ( ( ID 'was' 'a' TYPE ( ( 'too' | 'of' expr )? ) delimiter ) | ( ID 'had' expr TYPE delimiter ) )

            ANTLR_UINT32 alt9;

            alt9=2;

            switch ( this->LA(1) )
            {
            case ID:
            	{
            		switch ( this->LA(2) )
            		{
            		case 48:
            			{
            				alt9=1;
            			}
            		    break;
            		case 38:
            			{
            				alt9=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< MAliceParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 9 );
            		    ex->set_state( 1 );


            		    goto rulevarDeclarationEx;

            		}

            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< MAliceParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 9 );
                ex->set_state( 0 );


                goto rulevarDeclarationEx;

            }

            switch (alt9)
            {
        	case 1:
        	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:45:17: ( ID 'was' 'a' TYPE ( ( 'too' | 'of' expr )? ) delimiter )
        	    {
        	        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:45:17: ( ID 'was' 'a' TYPE ( ( 'too' | 'of' expr )? ) delimiter )
        	        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:45:18: ID 'was' 'a' TYPE ( ( 'too' | 'of' expr )? ) delimiter
        	        {
        	             this->matchToken(ID, &FOLLOW_ID_in_varDeclaration211);
        	            if  (this->hasException())
        	            {
        	                goto rulevarDeclarationEx;
        	            }


        	             this->matchToken(48, &FOLLOW_48_in_varDeclaration213);
        	            if  (this->hasException())
        	            {
        	                goto rulevarDeclarationEx;
        	            }


        	             this->matchToken(32, &FOLLOW_32_in_varDeclaration215);
        	            if  (this->hasException())
        	            {
        	                goto rulevarDeclarationEx;
        	            }


        	             this->matchToken(TYPE, &FOLLOW_TYPE_in_varDeclaration217);
        	            if  (this->hasException())
        	            {
        	                goto rulevarDeclarationEx;
        	            }


        	            // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:45:36: ( ( 'too' | 'of' expr )? )
        	            // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:45:37: ( 'too' | 'of' expr )?
        	            {
        	                // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:45:37: ( 'too' | 'of' expr )?
        	                {
        	                    int alt8=3;
        	                    switch ( this->LA(1) )
        	                    {
        	                        case 47:
        	                        	{
        	                        		alt8=1;
        	                        	}
        	                            break;
        	                        case 40:
        	                        	{
        	                        		alt8=2;
        	                        	}
        	                            break;
        	                    }

        	                    switch (alt8)
        	                    {
        	                	case 1:
        	                	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:45:38: 'too'
        	                	    {
        	                	         this->matchToken(47, &FOLLOW_47_in_varDeclaration221);
        	                	        if  (this->hasException())
        	                	        {
        	                	            goto rulevarDeclarationEx;
        	                	        }


        	                	    }
        	                	    break;
        	                	case 2:
        	                	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:45:46: 'of' expr
        	                	    {
        	                	         this->matchToken(40, &FOLLOW_40_in_varDeclaration225);
        	                	        if  (this->hasException())
        	                	        {
        	                	            goto rulevarDeclarationEx;
        	                	        }


        	                	        this->followPush(FOLLOW_expr_in_varDeclaration227);
        	                	        expr();

        	                	        this->followPop();
        	                	        if  (this->hasException())
        	                	        {
        	                	            goto rulevarDeclarationEx;
        	                	        }


        	                	    }
        	                	    break;

        	                    }
        	                }

        	            }


        	            this->followPush(FOLLOW_delimiter_in_varDeclaration232);
        	            delimiter();

        	            this->followPop();
        	            if  (this->hasException())
        	            {
        	                goto rulevarDeclarationEx;
        	            }


        	        }


        	    }
        	    break;
        	case 2:
        	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:46:17: ( ID 'had' expr TYPE delimiter )
        	    {
        	        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:46:17: ( ID 'had' expr TYPE delimiter )
        	        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:46:18: ID 'had' expr TYPE delimiter
        	        {
        	             this->matchToken(ID, &FOLLOW_ID_in_varDeclaration254);
        	            if  (this->hasException())
        	            {
        	                goto rulevarDeclarationEx;
        	            }


        	             this->matchToken(38, &FOLLOW_38_in_varDeclaration256);
        	            if  (this->hasException())
        	            {
        	                goto rulevarDeclarationEx;
        	            }


        	            this->followPush(FOLLOW_expr_in_varDeclaration258);
        	            expr();

        	            this->followPop();
        	            if  (this->hasException())
        	            {
        	                goto rulevarDeclarationEx;
        	            }


        	             this->matchToken(TYPE, &FOLLOW_TYPE_in_varDeclaration260);
        	            if  (this->hasException())
        	            {
        	                goto rulevarDeclarationEx;
        	            }


        	            this->followPush(FOLLOW_delimiter_in_varDeclaration262);
        	            delimiter();

        	            this->followPop();
        	            if  (this->hasException())
        	            {
        	                goto rulevarDeclarationEx;
        	            }


        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulevarDeclarationEx; /* Prevent compiler warnings */
    rulevarDeclarationEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end varDeclaration */

/**
 * $ANTLR start body
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:48:1: body : 'opened' 'closed' ;
 */
void
MAliceParser::body()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:48:5: ( 'opened' 'closed' )
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:48:7: 'opened' 'closed'
        {
             this->matchToken(41, &FOLLOW_41_in_body270);
            if  (this->hasException())
            {
                goto rulebodyEx;
            }


             this->matchToken(35, &FOLLOW_35_in_body272);
            if  (this->hasException())
            {
                goto rulebodyEx;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulebodyEx; /* Prevent compiler warnings */
    rulebodyEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end body */

/**
 * $ANTLR start expr
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:51:1: expr : prec8 ( '||' prec8 )* ;
 */
void
MAliceParser::expr()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:51:5: ( prec8 ( '||' prec8 )* )
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:51:8: prec8 ( '||' prec8 )*
        {
            this->followPush(FOLLOW_prec8_in_expr281);
            prec8();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleexprEx;
            }


            // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:51:14: ( '||' prec8 )*

            for (;;)
            {
                int alt10=2;
                switch ( this->LA(1) )
                {
                case 50:
                	{
                		alt10=1;
                	}
                    break;

                }

                switch (alt10)
                {
            	case 1:
            	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:51:15: '||' prec8
            	    {
            	         this->matchToken(50, &FOLLOW_50_in_expr284);
            	        if  (this->hasException())
            	        {
            	            goto ruleexprEx;
            	        }


            	        this->followPush(FOLLOW_prec8_in_expr286);
            	        prec8();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexprEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop10;	/* break out of the loop */
            	    break;
                }
            }
            loop10: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleexprEx; /* Prevent compiler warnings */
    ruleexprEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end expr */

/**
 * $ANTLR start prec8
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:52:1: prec8 : prec7 ( '&&' prec7 )* ;
 */
void
MAliceParser::prec8()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:52:6: ( prec7 ( '&&' prec7 )* )
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:52:8: prec7 ( '&&' prec7 )*
        {
            this->followPush(FOLLOW_prec7_in_prec8294);
            prec7();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleprec8Ex;
            }


            // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:52:14: ( '&&' prec7 )*

            for (;;)
            {
                int alt11=2;
                switch ( this->LA(1) )
                {
                case 14:
                	{
                		alt11=1;
                	}
                    break;

                }

                switch (alt11)
                {
            	case 1:
            	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:52:15: '&&' prec7
            	    {
            	         this->matchToken(14, &FOLLOW_14_in_prec8297);
            	        if  (this->hasException())
            	        {
            	            goto ruleprec8Ex;
            	        }


            	        this->followPush(FOLLOW_prec7_in_prec8299);
            	        prec7();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprec8Ex;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop11;	/* break out of the loop */
            	    break;
                }
            }
            loop11: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleprec8Ex; /* Prevent compiler warnings */
    ruleprec8Ex: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end prec8 */

/**
 * $ANTLR start prec7
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:53:1: prec7 : prec6 ( '|' prec6 )* ;
 */
void
MAliceParser::prec7()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:53:6: ( prec6 ( '|' prec6 )* )
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:53:8: prec6 ( '|' prec6 )*
        {
            this->followPush(FOLLOW_prec6_in_prec7307);
            prec6();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleprec7Ex;
            }


            // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:53:14: ( '|' prec6 )*

            for (;;)
            {
                int alt12=2;
                switch ( this->LA(1) )
                {
                case 49:
                	{
                		alt12=1;
                	}
                    break;

                }

                switch (alt12)
                {
            	case 1:
            	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:53:15: '|' prec6
            	    {
            	         this->matchToken(49, &FOLLOW_49_in_prec7310);
            	        if  (this->hasException())
            	        {
            	            goto ruleprec7Ex;
            	        }


            	        this->followPush(FOLLOW_prec6_in_prec7312);
            	        prec6();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprec7Ex;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop12;	/* break out of the loop */
            	    break;
                }
            }
            loop12: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleprec7Ex; /* Prevent compiler warnings */
    ruleprec7Ex: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end prec7 */

/**
 * $ANTLR start prec6
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:54:1: prec6 : prec5 ( '^' prec5 )* ;
 */
void
MAliceParser::prec6()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:54:6: ( prec5 ( '^' prec5 )* )
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:54:8: prec5 ( '^' prec5 )*
        {
            this->followPush(FOLLOW_prec5_in_prec6320);
            prec5();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleprec6Ex;
            }


            // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:54:14: ( '^' prec5 )*

            for (;;)
            {
                int alt13=2;
                switch ( this->LA(1) )
                {
                case 31:
                	{
                		alt13=1;
                	}
                    break;

                }

                switch (alt13)
                {
            	case 1:
            	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:54:15: '^' prec5
            	    {
            	         this->matchToken(31, &FOLLOW_31_in_prec6323);
            	        if  (this->hasException())
            	        {
            	            goto ruleprec6Ex;
            	        }


            	        this->followPush(FOLLOW_prec5_in_prec6325);
            	        prec5();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprec6Ex;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop13;	/* break out of the loop */
            	    break;
                }
            }
            loop13: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleprec6Ex; /* Prevent compiler warnings */
    ruleprec6Ex: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end prec6 */

/**
 * $ANTLR start prec5
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:55:1: prec5 : prec4 ( '&' prec4 )* ;
 */
void
MAliceParser::prec5()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:55:6: ( prec4 ( '&' prec4 )* )
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:55:8: prec4 ( '&' prec4 )*
        {
            this->followPush(FOLLOW_prec4_in_prec5333);
            prec4();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleprec5Ex;
            }


            // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:55:14: ( '&' prec4 )*

            for (;;)
            {
                int alt14=2;
                switch ( this->LA(1) )
                {
                case 15:
                	{
                		alt14=1;
                	}
                    break;

                }

                switch (alt14)
                {
            	case 1:
            	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:55:15: '&' prec4
            	    {
            	         this->matchToken(15, &FOLLOW_15_in_prec5336);
            	        if  (this->hasException())
            	        {
            	            goto ruleprec5Ex;
            	        }


            	        this->followPush(FOLLOW_prec4_in_prec5338);
            	        prec4();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprec5Ex;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop14;	/* break out of the loop */
            	    break;
                }
            }
            loop14: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleprec5Ex; /* Prevent compiler warnings */
    ruleprec5Ex: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end prec5 */

/**
 * $ANTLR start prec4
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:56:1: prec4 : prec3 ( ( '==' | '!=' ) prec3 )* ;
 */
void
MAliceParser::prec4()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:56:6: ( prec3 ( ( '==' | '!=' ) prec3 )* )
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:56:8: prec3 ( ( '==' | '!=' ) prec3 )*
        {
            this->followPush(FOLLOW_prec3_in_prec4346);
            prec3();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleprec4Ex;
            }


            // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:56:14: ( ( '==' | '!=' ) prec3 )*

            for (;;)
            {
                int alt15=2;
                switch ( this->LA(1) )
                {
                case 12:
                case 26:
                	{
                		alt15=1;
                	}
                    break;

                }

                switch (alt15)
                {
            	case 1:
            	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:56:15: ( '==' | '!=' ) prec3
            	    {
            	        if ( this->LA(1) == 12 || this->LA(1) == 26 )
            	        {
            	            this->consume();
            	            this->set_perror_recovery(false);
            	        }
            	        else
            	        {
            	            new ANTLR_Exception< MAliceParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
            	            this->get_exception()->set_expectingSet(NULL);

            	            goto ruleprec4Ex;
            	        }


            	        this->followPush(FOLLOW_prec3_in_prec4357);
            	        prec3();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprec4Ex;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop15;	/* break out of the loop */
            	    break;
                }
            }
            loop15: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleprec4Ex; /* Prevent compiler warnings */
    ruleprec4Ex: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end prec4 */

/**
 * $ANTLR start prec3
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:57:1: prec3 : prec2 ( ( '>' | '<' | '>=' | '<=' ) prec2 )* ;
 */
void
MAliceParser::prec3()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:57:6: ( prec2 ( ( '>' | '<' | '>=' | '<=' ) prec2 )* )
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:57:8: prec2 ( ( '>' | '<' | '>=' | '<=' ) prec2 )*
        {
            this->followPush(FOLLOW_prec2_in_prec3365);
            prec2();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleprec3Ex;
            }


            // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:57:14: ( ( '>' | '<' | '>=' | '<=' ) prec2 )*

            for (;;)
            {
                int alt16=2;
                switch ( this->LA(1) )
                {
                case 24:
                case 25:
                case 27:
                case 28:
                	{
                		alt16=1;
                	}
                    break;

                }

                switch (alt16)
                {
            	case 1:
            	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:57:15: ( '>' | '<' | '>=' | '<=' ) prec2
            	    {
            	        if ( ((this->LA(1) >= 24) && (this->LA(1) <= 25)) || ((this->LA(1) >= 27) && (this->LA(1) <= 28)) )
            	        {
            	            this->consume();
            	            this->set_perror_recovery(false);
            	        }
            	        else
            	        {
            	            new ANTLR_Exception< MAliceParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
            	            this->get_exception()->set_expectingSet(NULL);

            	            goto ruleprec3Ex;
            	        }


            	        this->followPush(FOLLOW_prec2_in_prec3384);
            	        prec2();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprec3Ex;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop16;	/* break out of the loop */
            	    break;
                }
            }
            loop16: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleprec3Ex; /* Prevent compiler warnings */
    ruleprec3Ex: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end prec3 */

/**
 * $ANTLR start prec2
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:58:1: prec2 : prec1 ( ( '+' | '-' ) prec1 )* ;
 */
void
MAliceParser::prec2()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:58:6: ( prec1 ( ( '+' | '-' ) prec1 )* )
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:58:8: prec1 ( ( '+' | '-' ) prec1 )*
        {
            this->followPush(FOLLOW_prec1_in_prec2392);
            prec1();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleprec2Ex;
            }


            // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:58:14: ( ( '+' | '-' ) prec1 )*

            for (;;)
            {
                int alt17=2;
                switch ( this->LA(1) )
                {
                case 19:
                case 21:
                	{
                		alt17=1;
                	}
                    break;

                }

                switch (alt17)
                {
            	case 1:
            	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:58:15: ( '+' | '-' ) prec1
            	    {
            	        if ( this->LA(1) == 19 || this->LA(1) == 21 )
            	        {
            	            this->consume();
            	            this->set_perror_recovery(false);
            	        }
            	        else
            	        {
            	            new ANTLR_Exception< MAliceParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
            	            this->get_exception()->set_expectingSet(NULL);

            	            goto ruleprec2Ex;
            	        }


            	        this->followPush(FOLLOW_prec1_in_prec2403);
            	        prec1();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprec2Ex;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop17;	/* break out of the loop */
            	    break;
                }
            }
            loop17: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleprec2Ex; /* Prevent compiler warnings */
    ruleprec2Ex: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end prec2 */

/**
 * $ANTLR start prec1
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:59:1: prec1 : prec0 ( ( '*' | '/' | '%' ) prec0 )* ;
 */
void
MAliceParser::prec1()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:59:6: ( prec0 ( ( '*' | '/' | '%' ) prec0 )* )
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:59:8: prec0 ( ( '*' | '/' | '%' ) prec0 )*
        {
            this->followPush(FOLLOW_prec0_in_prec1411);
            prec0();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleprec1Ex;
            }


            // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:59:14: ( ( '*' | '/' | '%' ) prec0 )*

            for (;;)
            {
                int alt18=2;
                switch ( this->LA(1) )
                {
                case 13:
                case 18:
                case 23:
                	{
                		alt18=1;
                	}
                    break;

                }

                switch (alt18)
                {
            	case 1:
            	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:59:15: ( '*' | '/' | '%' ) prec0
            	    {
            	        if ( this->LA(1) == 13 || this->LA(1) == 18 || this->LA(1) == 23 )
            	        {
            	            this->consume();
            	            this->set_perror_recovery(false);
            	        }
            	        else
            	        {
            	            new ANTLR_Exception< MAliceParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
            	            this->get_exception()->set_expectingSet(NULL);

            	            goto ruleprec1Ex;
            	        }


            	        this->followPush(FOLLOW_prec0_in_prec1426);
            	        prec0();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprec1Ex;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop18;	/* break out of the loop */
            	    break;
                }
            }
            loop18: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleprec1Ex; /* Prevent compiler warnings */
    ruleprec1Ex: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end prec1 */

/**
 * $ANTLR start prec0
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:60:1: prec0 : ( '!' | '~' | '+' | '-' )? atom ;
 */
void
MAliceParser::prec0()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:60:6: ( ( '!' | '~' | '+' | '-' )? atom )
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:60:8: ( '!' | '~' | '+' | '-' )? atom
        {
            // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:60:8: ( '!' | '~' | '+' | '-' )?
            {
                int alt19=2;
                switch ( this->LA(1) )
                {
                    case 11:
                    case 19:
                    case 21:
                    case 51:
                    	{
                    		alt19=1;
                    	}
                        break;
                }

                switch (alt19)
                {
            	case 1:
            	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:
            	    {
            	        if ( this->LA(1) == 11 || this->LA(1) == 19 || this->LA(1) == 21 || this->LA(1) == 51 )
            	        {
            	            this->consume();
            	            this->set_perror_recovery(false);
            	        }
            	        else
            	        {
            	            new ANTLR_Exception< MAliceParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
            	            this->get_exception()->set_expectingSet(NULL);

            	            goto ruleprec0Ex;
            	        }


            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_atom_in_prec0451);
            atom();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleprec0Ex;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleprec0Ex; /* Prevent compiler warnings */
    ruleprec0Ex: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end prec0 */

/**
 * $ANTLR start atom
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:62:1: atom : ( ID ( '\\'' 's' expr 'piece' | callParams )? | CHAR | STRING | INT | '(' expr ')' );
 */
void
MAliceParser::atom()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        {
            //  E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:62:5: ( ID ( '\\'' 's' expr 'piece' | callParams )? | CHAR | STRING | INT | '(' expr ')' )

            ANTLR_UINT32 alt21;

            alt21=5;

            switch ( this->LA(1) )
            {
            case ID:
            	{
            		alt21=1;
            	}
                break;
            case CHAR:
            	{
            		alt21=2;
            	}
                break;
            case STRING:
            	{
            		alt21=3;
            	}
                break;
            case INT:
            	{
            		alt21=4;
            	}
                break;
            case 16:
            	{
            		alt21=5;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< MAliceParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 21 );
                ex->set_state( 0 );


                goto ruleatomEx;

            }

            switch (alt21)
            {
        	case 1:
        	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:62:7: ID ( '\\'' 's' expr 'piece' | callParams )?
        	    {
        	         this->matchToken(ID, &FOLLOW_ID_in_atom458);
        	        if  (this->hasException())
        	        {
        	            goto ruleatomEx;
        	        }


        	        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:62:10: ( '\\'' 's' expr 'piece' | callParams )?
        	        {
        	            int alt20=3;
        	            switch ( this->LA(1) )
        	            {
        	                case 30:
        	                	{
        	                		alt20=1;
        	                	}
        	                    break;
        	                case 16:
        	                	{
        	                		alt20=2;
        	                	}
        	                    break;
        	            }

        	            switch (alt20)
        	            {
        	        	case 1:
        	        	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:62:11: '\\'' 's' expr 'piece'
        	        	    {
        	        	         this->matchToken(30, &FOLLOW_30_in_atom461);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleatomEx;
        	        	        }


        	        	         this->matchToken(44, &FOLLOW_44_in_atom463);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleatomEx;
        	        	        }


        	        	        this->followPush(FOLLOW_expr_in_atom465);
        	        	        expr();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleatomEx;
        	        	        }


        	        	         this->matchToken(42, &FOLLOW_42_in_atom467);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleatomEx;
        	        	        }


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:62:35: callParams
        	        	    {
        	        	        this->followPush(FOLLOW_callParams_in_atom471);
        	        	        callParams();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleatomEx;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 2:
        	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:63:7: CHAR
        	    {
        	         this->matchToken(CHAR, &FOLLOW_CHAR_in_atom483);
        	        if  (this->hasException())
        	        {
        	            goto ruleatomEx;
        	        }


        	    }
        	    break;
        	case 3:
        	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:64:7: STRING
        	    {
        	         this->matchToken(STRING, &FOLLOW_STRING_in_atom494);
        	        if  (this->hasException())
        	        {
        	            goto ruleatomEx;
        	        }


        	    }
        	    break;
        	case 4:
        	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:65:7: INT
        	    {
        	         this->matchToken(INT, &FOLLOW_INT_in_atom504);
        	        if  (this->hasException())
        	        {
        	            goto ruleatomEx;
        	        }


        	    }
        	    break;
        	case 5:
        	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:66:7: '(' expr ')'
        	    {
        	         this->matchToken(16, &FOLLOW_16_in_atom514);
        	        if  (this->hasException())
        	        {
        	            goto ruleatomEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_atom516);
        	        expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleatomEx;
        	        }


        	         this->matchToken(17, &FOLLOW_17_in_atom518);
        	        if  (this->hasException())
        	        {
        	            goto ruleatomEx;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleatomEx; /* Prevent compiler warnings */
    ruleatomEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end atom */

/**
 * $ANTLR start delimiter
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:69:1: delimiter : ( '.' | ',' | 'and' | 'but' | 'then' );
 */
void
MAliceParser::delimiter()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:69:10: ( '.' | ',' | 'and' | 'but' | 'then' )
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\grammar\\MAlice.g:
        {
            if ( this->LA(1) == 20 || this->LA(1) == 22 || ((this->LA(1) >= 33) && (this->LA(1) <= 34)) || this->LA(1) == 46 )
            {
                this->consume();
                this->set_perror_recovery(false);
            }
            else
            {
                new ANTLR_Exception< MAliceParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
                this->get_exception()->set_expectingSet(NULL);

                goto ruledelimiterEx;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruledelimiterEx; /* Prevent compiler warnings */
    ruledelimiterEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end delimiter */
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
/* End of syntactic predicates
 * ==============================================
 */

	}


/* End of code
 * =============================================================================
 */
