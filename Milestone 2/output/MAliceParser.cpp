/** \file
 *  This C++ source file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g
 *     -                            On : 2012-11-05 12:31:59
 *     -                for the parser : MAliceParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C++ language generator and runtime by Gokulakannan Somasundaram ( heavy lifting from C Run-time by Jim Idle )
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Gokulakannan Somasundaram, ElectronDB
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "MAliceParser.hpp"
/* ----------------------------------------- */


/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */

using namespace antlr3;
/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
ANTLR_UINT8*   MAliceParserTokenNames[31+4]
     = {
        (ANTLR_UINT8*) "<invalid>",       /* String to print to indicate an invalid token */
        (ANTLR_UINT8*) "<EOR>",
        (ANTLR_UINT8*) "<DOWN>",
        (ANTLR_UINT8*) "<UP>",
        (ANTLR_UINT8*) "CHAR",
        (ANTLR_UINT8*) "ID",
        (ANTLR_UINT8*) "INT",
        (ANTLR_UINT8*) "'%'",
        (ANTLR_UINT8*) "'&'",
        (ANTLR_UINT8*) "'()'",
        (ANTLR_UINT8*) "'*'",
        (ANTLR_UINT8*) "'+'",
        (ANTLR_UINT8*) "','",
        (ANTLR_UINT8*) "'.'",
        (ANTLR_UINT8*) "'/'",
        (ANTLR_UINT8*) "'Alice.'",
        (ANTLR_UINT8*) "'The'",
        (ANTLR_UINT8*) "'^'",
        (ANTLR_UINT8*) "'and'",
        (ANTLR_UINT8*) "'ate'",
        (ANTLR_UINT8*) "'became'",
        (ANTLR_UINT8*) "'but'",
        (ANTLR_UINT8*) "'closed'",
        (ANTLR_UINT8*) "'drank'",
        (ANTLR_UINT8*) "'hatta'",
        (ANTLR_UINT8*) "'letter'",
        (ANTLR_UINT8*) "'looking-glass'",
        (ANTLR_UINT8*) "'number'",
        (ANTLR_UINT8*) "'opened'",
        (ANTLR_UINT8*) "'said'",
        (ANTLR_UINT8*) "'then'",
        (ANTLR_UINT8*) "'too'",
        (ANTLR_UINT8*) "'was a'",
        (ANTLR_UINT8*) "'|'",
        (ANTLR_UINT8*) "'~'"
       };


/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g";

/** \brief Return the name of the grammar file that generated this code.
 */
const char* MAliceParser::getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new MAliceParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
MAliceParser::MAliceParser( StreamType* instream)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, NULL)

{
	// See if we can create a new parser with the standard constructor
	//
	this->init(instream);
}

/** \brief Create a new MAliceParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
MAliceParser::MAliceParser( StreamType* instream, RecognizerSharedStateType* state)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, state)

{
	this->init(instream );
}

void MAliceParser::init(StreamType* instream)
{
	/* Install the token table
	*/
	this->get_psrstate()->set_tokenNames( MAliceParserTokenNames );


}

void
MAliceParser::reset()
{
    this->get_rec()->reset();
}

/** Free the parser resources
 */
MAliceParser::~MAliceParser()
 {
}

/** Return token names used by this 
parser

 *
 * The returned pointer is used as an index into the token names table (using the token
 * number as the index).
 *
 * \return Pointer to first char * in the table.
 */
static ANTLR_UINT8**	getTokenNames()
{
        return MAliceParserTokenNames;
}


/* Declare the bitsets
 */
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_16_in_program22_bits[]	= { ANTLR_UINT64_LIT(0x0000000004000000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_16_in_program22( FOLLOW_16_in_program22_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_26_in_program24_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_26_in_program24( FOLLOW_26_in_program24_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_24_in_program26_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000200) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_24_in_program26( FOLLOW_24_in_program26_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_9_in_program28_bits[]	= { ANTLR_UINT64_LIT(0x0000000010000000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_9_in_program28( FOLLOW_9_in_program28_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_28_in_program30_bits[]	= { ANTLR_UINT64_LIT(0x0000000400000060) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_28_in_program30( FOLLOW_28_in_program30_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_statementList_in_program32_bits[]	= { ANTLR_UINT64_LIT(0x0000000000400000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_statementList_in_program32( FOLLOW_statementList_in_program32_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_22_in_program34_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_22_in_program34( FOLLOW_22_in_program34_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_EOF_in_program36_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_EOF_in_program36( FOLLOW_EOF_in_program36_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_statement_in_statementList43_bits[]	= { ANTLR_UINT64_LIT(0x0000000040243000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_statement_in_statementList43( FOLLOW_statement_in_statementList43_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_set_in_statementList45_bits[]	= { ANTLR_UINT64_LIT(0x0000000400000060) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_set_in_statementList45( FOLLOW_set_in_statementList45_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_statementList_in_statementList65_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_statementList_in_statementList65( FOLLOW_statementList_in_statementList65_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_printReturn_in_statementList69_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_printReturn_in_statementList69( FOLLOW_printReturn_in_statementList69_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_printReturn77_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_expression_in_printReturn77( FOLLOW_expression_in_printReturn77_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_29_in_printReturn79_bits[]	= { ANTLR_UINT64_LIT(0x0000000000008000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_29_in_printReturn79( FOLLOW_29_in_printReturn79_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_15_in_printReturn81_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_15_in_printReturn81( FOLLOW_15_in_printReturn81_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_declaration_in_statement88_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_declaration_in_statement88( FOLLOW_declaration_in_statement88_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_assignment_in_statement92_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_assignment_in_statement92( FOLLOW_assignment_in_statement92_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_step_in_statement96_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_step_in_statement96( FOLLOW_step_in_statement96_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_declaration104_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_ID_in_declaration104( FOLLOW_ID_in_declaration104_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_32_in_declaration106_bits[]	= { ANTLR_UINT64_LIT(0x000000000A000000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_32_in_declaration106( FOLLOW_32_in_declaration106_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_set_in_declaration108_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_set_in_declaration108( FOLLOW_set_in_declaration108_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_31_in_declaration118_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_31_in_declaration118( FOLLOW_31_in_declaration118_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_assignment127_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_ID_in_assignment127( FOLLOW_ID_in_assignment127_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_20_in_assignment129_bits[]	= { ANTLR_UINT64_LIT(0x0000000400000060) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_20_in_assignment129( FOLLOW_20_in_assignment129_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_assignment131_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_expression_in_assignment131( FOLLOW_expression_in_assignment131_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_assignment135_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_ID_in_assignment135( FOLLOW_ID_in_assignment135_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_20_in_assignment137_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000010) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_20_in_assignment137( FOLLOW_20_in_assignment137_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_CHAR_in_assignment139_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_CHAR_in_assignment139( FOLLOW_CHAR_in_assignment139_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_step147_bits[]	= { ANTLR_UINT64_LIT(0x0000000000880000) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_ID_in_step147( FOLLOW_ID_in_step147_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_set_in_step149_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_set_in_step149( FOLLOW_set_in_step149_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_or_in_expression162_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_or_in_expression162( FOLLOW_or_in_expression162_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_17_in_expression165_bits[]	= { ANTLR_UINT64_LIT(0x0000000400000060) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_17_in_expression165( FOLLOW_17_in_expression165_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_or_in_expression167_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_or_in_expression167( FOLLOW_or_in_expression167_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_and_in_or177_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_and_in_or177( FOLLOW_and_in_or177_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_33_in_or180_bits[]	= { ANTLR_UINT64_LIT(0x0000000400000060) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_33_in_or180( FOLLOW_33_in_or180_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_and_in_or182_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_and_in_or182( FOLLOW_and_in_or182_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_add_in_and193_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000102) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_add_in_and193( FOLLOW_add_in_and193_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_8_in_and196_bits[]	= { ANTLR_UINT64_LIT(0x0000000400000060) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_8_in_and196( FOLLOW_8_in_and196_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_add_in_and198_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000102) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_add_in_and198( FOLLOW_add_in_and198_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_ones_in_add208_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000802) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_ones_in_add208( FOLLOW_ones_in_add208_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_11_in_add211_bits[]	= { ANTLR_UINT64_LIT(0x0000000400000060) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_11_in_add211( FOLLOW_11_in_add211_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_ones_in_add213_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000802) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_ones_in_add213( FOLLOW_ones_in_add213_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_term_in_ones223_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004482) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_term_in_ones223( FOLLOW_term_in_ones223_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_set_in_ones226_bits[]	= { ANTLR_UINT64_LIT(0x0000000400000060) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_set_in_ones226( FOLLOW_set_in_ones226_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_term_in_ones238_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004482) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_term_in_ones238( FOLLOW_term_in_ones238_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_34_in_term249_bits[]	= { ANTLR_UINT64_LIT(0x0000000400000060) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_34_in_term249( FOLLOW_34_in_term249_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_term_in_term251_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_term_in_term251( FOLLOW_term_in_term251_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_term256_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_ID_in_term256( FOLLOW_ID_in_term256_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: MAliceParser  */
static	ANTLR_BITWORD FOLLOW_INT_in_term260_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  MAliceParserImplTraits::BitsetListType FOLLOW_INT_in_term260( FOLLOW_INT_in_term260_bits, 1 );


/* ==============================================
 * Parsing rules
 */
/**
 * $ANTLR start program
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:8:1: program : 'The' 'looking-glass' 'hatta' '()' 'opened' statementList 'closed' EOF ;
 */
void
MAliceParser::program()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:8:8: ( 'The' 'looking-glass' 'hatta' '()' 'opened' statementList 'closed' EOF )
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:8:10: 'The' 'looking-glass' 'hatta' '()' 'opened' statementList 'closed' EOF
        {
             this->matchToken(16, &FOLLOW_16_in_program22);
            if  (this->hasException())
            {
                goto ruleprogramEx;
            }


             this->matchToken(26, &FOLLOW_26_in_program24);
            if  (this->hasException())
            {
                goto ruleprogramEx;
            }


             this->matchToken(24, &FOLLOW_24_in_program26);
            if  (this->hasException())
            {
                goto ruleprogramEx;
            }


             this->matchToken(9, &FOLLOW_9_in_program28);
            if  (this->hasException())
            {
                goto ruleprogramEx;
            }


             this->matchToken(28, &FOLLOW_28_in_program30);
            if  (this->hasException())
            {
                goto ruleprogramEx;
            }


            this->followPush(FOLLOW_statementList_in_program32);
            statementList();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleprogramEx;
            }


             this->matchToken(22, &FOLLOW_22_in_program34);
            if  (this->hasException())
            {
                goto ruleprogramEx;
            }


             this->matchToken(EOF, &FOLLOW_EOF_in_program36);
            if  (this->hasException())
            {
                goto ruleprogramEx;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleprogramEx; /* Prevent compiler warnings */
    ruleprogramEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end program */

/**
 * $ANTLR start statementList
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:10:1: statementList : ( statement ( 'and' | 'but' | 'then' | ',' | '.' ) statementList | printReturn );
 */
void
MAliceParser::statementList()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        {
            //  E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:10:14: ( statement ( 'and' | 'but' | 'then' | ',' | '.' ) statementList | printReturn )

            ANTLR_UINT32 alt1;

            alt1=2;

            switch ( this->LA(1) )
            {
            case ID:
            	{
            		switch ( this->LA(2) )
            		{
            		case 19:
            		case 20:
            		case 23:
            		case 32:
            			{
            				alt1=1;
            			}
            		    break;
            		case 7:
            		case 8:
            		case 10:
            		case 11:
            		case 14:
            		case 17:
            		case 29:
            		case 33:
            			{
            				alt1=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< MAliceParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 1 );
            		    ex->set_state( 1 );


            		    goto rulestatementListEx;

            		}

            	}
                break;
            case INT:
            case 34:
            	{
            		alt1=2;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< MAliceParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 1 );
                ex->set_state( 0 );


                goto rulestatementListEx;

            }

            switch (alt1)
            {
        	case 1:
        	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:10:16: statement ( 'and' | 'but' | 'then' | ',' | '.' ) statementList
        	    {
        	        this->followPush(FOLLOW_statement_in_statementList43);
        	        statement();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestatementListEx;
        	        }


        	        if ( ((this->LA(1) >= 12) && (this->LA(1) <= 13)) || this->LA(1) == 18 || this->LA(1) == 21 || this->LA(1) == 30 )
        	        {
        	            this->consume();
        	            this->set_perror_recovery(false);
        	        }
        	        else
        	        {
        	            new ANTLR_Exception< MAliceParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
        	            this->get_exception()->set_expectingSet(NULL);

        	            goto rulestatementListEx;
        	        }


        	        this->followPush(FOLLOW_statementList_in_statementList65);
        	        statementList();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestatementListEx;
        	        }


        	    }
        	    break;
        	case 2:
        	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:10:79: printReturn
        	    {
        	        this->followPush(FOLLOW_printReturn_in_statementList69);
        	        printReturn();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestatementListEx;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulestatementListEx; /* Prevent compiler warnings */
    rulestatementListEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end statementList */

/**
 * $ANTLR start printReturn
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:12:1: printReturn : expression 'said' 'Alice.' ;
 */
void
MAliceParser::printReturn()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:12:12: ( expression 'said' 'Alice.' )
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:12:14: expression 'said' 'Alice.'
        {
            this->followPush(FOLLOW_expression_in_printReturn77);
            expression();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleprintReturnEx;
            }


             this->matchToken(29, &FOLLOW_29_in_printReturn79);
            if  (this->hasException())
            {
                goto ruleprintReturnEx;
            }


             this->matchToken(15, &FOLLOW_15_in_printReturn81);
            if  (this->hasException())
            {
                goto ruleprintReturnEx;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleprintReturnEx; /* Prevent compiler warnings */
    ruleprintReturnEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end printReturn */

/**
 * $ANTLR start statement
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:14:1: statement : ( declaration | assignment | step );
 */
void
MAliceParser::statement()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        {
            //  E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:14:10: ( declaration | assignment | step )

            ANTLR_UINT32 alt2;

            alt2=3;

            switch ( this->LA(1) )
            {
            case ID:
            	{
            		switch ( this->LA(2) )
            		{
            		case 32:
            			{
            				alt2=1;
            			}
            		    break;
            		case 20:
            			{
            				alt2=2;
            			}
            		    break;
            		case 19:
            		case 23:
            			{
            				alt2=3;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< MAliceParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 2 );
            		    ex->set_state( 1 );


            		    goto rulestatementEx;

            		}

            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< MAliceParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 2 );
                ex->set_state( 0 );


                goto rulestatementEx;

            }

            switch (alt2)
            {
        	case 1:
        	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:14:12: declaration
        	    {
        	        this->followPush(FOLLOW_declaration_in_statement88);
        	        declaration();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }


        	    }
        	    break;
        	case 2:
        	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:14:26: assignment
        	    {
        	        this->followPush(FOLLOW_assignment_in_statement92);
        	        assignment();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }


        	    }
        	    break;
        	case 3:
        	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:14:39: step
        	    {
        	        this->followPush(FOLLOW_step_in_statement96);
        	        step();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestatementEx;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulestatementEx; /* Prevent compiler warnings */
    rulestatementEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end statement */

/**
 * $ANTLR start declaration
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:16:1: declaration : ( ID 'was a' ( 'number' | 'letter' ) ) ( ( 'too' )? ) ;
 */
void
MAliceParser::declaration()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:16:12: ( ( ID 'was a' ( 'number' | 'letter' ) ) ( ( 'too' )? ) )
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:16:14: ( ID 'was a' ( 'number' | 'letter' ) ) ( ( 'too' )? )
        {
            // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:16:14: ( ID 'was a' ( 'number' | 'letter' ) )
            // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:16:15: ID 'was a' ( 'number' | 'letter' )
            {
                 this->matchToken(ID, &FOLLOW_ID_in_declaration104);
                if  (this->hasException())
                {
                    goto ruledeclarationEx;
                }


                 this->matchToken(32, &FOLLOW_32_in_declaration106);
                if  (this->hasException())
                {
                    goto ruledeclarationEx;
                }


                if ( this->LA(1) == 25 || this->LA(1) == 27 )
                {
                    this->consume();
                    this->set_perror_recovery(false);
                }
                else
                {
                    new ANTLR_Exception< MAliceParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
                    this->get_exception()->set_expectingSet(NULL);

                    goto ruledeclarationEx;
                }


            }


            // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:16:49: ( ( 'too' )? )
            // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:16:50: ( 'too' )?
            {
                // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:16:50: ( 'too' )?
                {
                    int alt3=2;
                    switch ( this->LA(1) )
                    {
                        case 31:
                        	{
                        		alt3=1;
                        	}
                            break;
                    }

                    switch (alt3)
                    {
                	case 1:
                	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:16:50: 'too'
                	    {
                	         this->matchToken(31, &FOLLOW_31_in_declaration118);
                	        if  (this->hasException())
                	        {
                	            goto ruledeclarationEx;
                	        }


                	    }
                	    break;

                    }
                }

            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruledeclarationEx; /* Prevent compiler warnings */
    ruledeclarationEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end declaration */

/**
 * $ANTLR start assignment
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:18:1: assignment : ( ID 'became' expression | ID 'became' CHAR );
 */
void
MAliceParser::assignment()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        {
            //  E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:18:11: ( ID 'became' expression | ID 'became' CHAR )

            ANTLR_UINT32 alt4;

            alt4=2;

            switch ( this->LA(1) )
            {
            case ID:
            	{
            		switch ( this->LA(2) )
            		{
            		case 20:
            			{
            				switch ( this->LA(3) )
            				{
            				case CHAR:
            					{
            						alt4=2;
            					}
            				    break;
            				case ID:
            				case INT:
            				case 34:
            					{
            						alt4=1;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< MAliceParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 4 );
            				    ex->set_state( 2 );


            				    goto ruleassignmentEx;

            				}

            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< MAliceParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 4 );
            		    ex->set_state( 1 );


            		    goto ruleassignmentEx;

            		}

            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< MAliceParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 4 );
                ex->set_state( 0 );


                goto ruleassignmentEx;

            }

            switch (alt4)
            {
        	case 1:
        	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:18:13: ID 'became' expression
        	    {
        	         this->matchToken(ID, &FOLLOW_ID_in_assignment127);
        	        if  (this->hasException())
        	        {
        	            goto ruleassignmentEx;
        	        }


        	         this->matchToken(20, &FOLLOW_20_in_assignment129);
        	        if  (this->hasException())
        	        {
        	            goto ruleassignmentEx;
        	        }


        	        this->followPush(FOLLOW_expression_in_assignment131);
        	        expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleassignmentEx;
        	        }


        	    }
        	    break;
        	case 2:
        	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:18:38: ID 'became' CHAR
        	    {
        	         this->matchToken(ID, &FOLLOW_ID_in_assignment135);
        	        if  (this->hasException())
        	        {
        	            goto ruleassignmentEx;
        	        }


        	         this->matchToken(20, &FOLLOW_20_in_assignment137);
        	        if  (this->hasException())
        	        {
        	            goto ruleassignmentEx;
        	        }


        	         this->matchToken(CHAR, &FOLLOW_CHAR_in_assignment139);
        	        if  (this->hasException())
        	        {
        	            goto ruleassignmentEx;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleassignmentEx; /* Prevent compiler warnings */
    ruleassignmentEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end assignment */

/**
 * $ANTLR start step
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:20:1: step : ID ( 'drank' | 'ate' ) ;
 */
void
MAliceParser::step()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:20:5: ( ID ( 'drank' | 'ate' ) )
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:20:8: ID ( 'drank' | 'ate' )
        {
             this->matchToken(ID, &FOLLOW_ID_in_step147);
            if  (this->hasException())
            {
                goto rulestepEx;
            }


            if ( this->LA(1) == 19 || this->LA(1) == 23 )
            {
                this->consume();
                this->set_perror_recovery(false);
            }
            else
            {
                new ANTLR_Exception< MAliceParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
                this->get_exception()->set_expectingSet(NULL);

                goto rulestepEx;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulestepEx; /* Prevent compiler warnings */
    rulestepEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end step */

/**
 * $ANTLR start expression
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:22:1: expression : or ( '^' or )* ;
 */
void
MAliceParser::expression()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:22:11: ( or ( '^' or )* )
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:22:13: or ( '^' or )*
        {
            this->followPush(FOLLOW_or_in_expression162);
            or();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleexpressionEx;
            }


            // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:22:16: ( '^' or )*

            for (;;)
            {
                int alt5=2;
                switch ( this->LA(1) )
                {
                case 17:
                	{
                		alt5=1;
                	}
                    break;

                }

                switch (alt5)
                {
            	case 1:
            	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:22:17: '^' or
            	    {
            	         this->matchToken(17, &FOLLOW_17_in_expression165);
            	        if  (this->hasException())
            	        {
            	            goto ruleexpressionEx;
            	        }


            	        this->followPush(FOLLOW_or_in_expression167);
            	        or();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexpressionEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop5;	/* break out of the loop */
            	    break;
                }
            }
            loop5: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleexpressionEx; /* Prevent compiler warnings */
    ruleexpressionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end expression */

/**
 * $ANTLR start or
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:24:1: or : and ( '|' and )* ;
 */
void
MAliceParser::or()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:24:3: ( and ( '|' and )* )
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:24:6: and ( '|' and )*
        {
            this->followPush(FOLLOW_and_in_or177);
            and();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleorEx;
            }


            // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:24:10: ( '|' and )*

            for (;;)
            {
                int alt6=2;
                switch ( this->LA(1) )
                {
                case 33:
                	{
                		alt6=1;
                	}
                    break;

                }

                switch (alt6)
                {
            	case 1:
            	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:24:11: '|' and
            	    {
            	         this->matchToken(33, &FOLLOW_33_in_or180);
            	        if  (this->hasException())
            	        {
            	            goto ruleorEx;
            	        }


            	        this->followPush(FOLLOW_and_in_or182);
            	        and();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleorEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop6;	/* break out of the loop */
            	    break;
                }
            }
            loop6: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleorEx; /* Prevent compiler warnings */
    ruleorEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end or */

/**
 * $ANTLR start and
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:26:1: and : add ( '&' add )* ;
 */
void
MAliceParser::and()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:26:4: ( add ( '&' add )* )
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:26:7: add ( '&' add )*
        {
            this->followPush(FOLLOW_add_in_and193);
            add();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleandEx;
            }


            // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:26:11: ( '&' add )*

            for (;;)
            {
                int alt7=2;
                switch ( this->LA(1) )
                {
                case 8:
                	{
                		alt7=1;
                	}
                    break;

                }

                switch (alt7)
                {
            	case 1:
            	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:26:12: '&' add
            	    {
            	         this->matchToken(8, &FOLLOW_8_in_and196);
            	        if  (this->hasException())
            	        {
            	            goto ruleandEx;
            	        }


            	        this->followPush(FOLLOW_add_in_and198);
            	        add();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleandEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop7;	/* break out of the loop */
            	    break;
                }
            }
            loop7: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleandEx; /* Prevent compiler warnings */
    ruleandEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end and */

/**
 * $ANTLR start add
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:28:1: add : ones ( '+' ones )* ;
 */
void
MAliceParser::add()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:28:4: ( ones ( '+' ones )* )
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:28:7: ones ( '+' ones )*
        {
            this->followPush(FOLLOW_ones_in_add208);
            ones();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleaddEx;
            }


            // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:28:12: ( '+' ones )*

            for (;;)
            {
                int alt8=2;
                switch ( this->LA(1) )
                {
                case 11:
                	{
                		alt8=1;
                	}
                    break;

                }

                switch (alt8)
                {
            	case 1:
            	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:28:13: '+' ones
            	    {
            	         this->matchToken(11, &FOLLOW_11_in_add211);
            	        if  (this->hasException())
            	        {
            	            goto ruleaddEx;
            	        }


            	        this->followPush(FOLLOW_ones_in_add213);
            	        ones();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleaddEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop8;	/* break out of the loop */
            	    break;
                }
            }
            loop8: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleaddEx; /* Prevent compiler warnings */
    ruleaddEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end add */

/**
 * $ANTLR start ones
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:30:1: ones : term ( ( '/' | '*' | '%' ) term )* ;
 */
void
MAliceParser::ones()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:30:5: ( term ( ( '/' | '*' | '%' ) term )* )
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:30:8: term ( ( '/' | '*' | '%' ) term )*
        {
            this->followPush(FOLLOW_term_in_ones223);
            term();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleonesEx;
            }


            // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:30:13: ( ( '/' | '*' | '%' ) term )*

            for (;;)
            {
                int alt9=2;
                switch ( this->LA(1) )
                {
                case 7:
                case 10:
                case 14:
                	{
                		alt9=1;
                	}
                    break;

                }

                switch (alt9)
                {
            	case 1:
            	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:30:14: ( '/' | '*' | '%' ) term
            	    {
            	        if ( this->LA(1) == 7 || this->LA(1) == 10 || this->LA(1) == 14 )
            	        {
            	            this->consume();
            	            this->set_perror_recovery(false);
            	        }
            	        else
            	        {
            	            new ANTLR_Exception< MAliceParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
            	            this->get_exception()->set_expectingSet(NULL);

            	            goto ruleonesEx;
            	        }


            	        this->followPush(FOLLOW_term_in_ones238);
            	        term();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleonesEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop9;	/* break out of the loop */
            	    break;
                }
            }
            loop9: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleonesEx; /* Prevent compiler warnings */
    ruleonesEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end ones */

/**
 * $ANTLR start term
 * E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:32:1: term : ( ( '~' term ) | ID | INT );
 */
void
MAliceParser::term()
{
        MAliceParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        {
            //  E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:32:5: ( ( '~' term ) | ID | INT )

            ANTLR_UINT32 alt10;

            alt10=3;

            switch ( this->LA(1) )
            {
            case 34:
            	{
            		alt10=1;
            	}
                break;
            case ID:
            	{
            		alt10=2;
            	}
                break;
            case INT:
            	{
            		alt10=3;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< MAliceParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 10 );
                ex->set_state( 0 );


                goto ruletermEx;

            }

            switch (alt10)
            {
        	case 1:
        	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:32:8: ( '~' term )
        	    {
        	        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:32:8: ( '~' term )
        	        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:32:9: '~' term
        	        {
        	             this->matchToken(34, &FOLLOW_34_in_term249);
        	            if  (this->hasException())
        	            {
        	                goto ruletermEx;
        	            }


        	            this->followPush(FOLLOW_term_in_term251);
        	            term();

        	            this->followPop();
        	            if  (this->hasException())
        	            {
        	                goto ruletermEx;
        	            }


        	        }


        	    }
        	    break;
        	case 2:
        	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:32:21: ID
        	    {
        	         this->matchToken(ID, &FOLLOW_ID_in_term256);
        	        if  (this->hasException())
        	        {
        	            goto ruletermEx;
        	        }


        	    }
        	    break;
        	case 3:
        	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:32:26: INT
        	    {
        	         this->matchToken(INT, &FOLLOW_INT_in_term260);
        	        if  (this->hasException())
        	        {
        	            goto ruletermEx;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruletermEx; /* Prevent compiler warnings */
    ruletermEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end term */
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
/* End of syntactic predicates
 * ==============================================
 */



/* End of code
 * =============================================================================
 */
