/** \file
 *  This C++ source file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g
 *     -                            On : 2012-11-05 12:32:00
 *     -                 for the lexer : MAliceLexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C++ language generator and runtime by Gokulakannan Somasundaram ( heavy lifting from C Run-time by Jim Idle )
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Gokulakannan Somasundaram, ElectronDB
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "MAliceLexer.hpp"
/* ----------------------------------------- */




/** String literals used by MAliceLexer that we must do things like MATCHS() with.
 *  C will normally just lay down 8 bit characters, and you can use L"xxx" to
 *  get wchar_t, but wchar_t is 16 bits on Windows, which is not UTF32 and so
 *  we perform this little trick of defining the literals as arrays of UINT32
 *  and passing in the address of these.
 */
static ANTLR_UCHAR	lit_1[]  = { 0x28, 0x29,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_2[]  = { 0x41, 0x6C, 0x69, 0x63, 0x65, 0x2E,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_3[]  = { 0x54, 0x68, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_4[]  = { 0x61, 0x6E, 0x64,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_5[]  = { 0x61, 0x74, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_6[]  = { 0x62, 0x65, 0x63, 0x61, 0x6D, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_7[]  = { 0x62, 0x75, 0x74,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_8[]  = { 0x63, 0x6C, 0x6F, 0x73, 0x65, 0x64,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_9[]  = { 0x64, 0x72, 0x61, 0x6E, 0x6B,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_10[]  = { 0x68, 0x61, 0x74, 0x74, 0x61,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_11[]  = { 0x6C, 0x65, 0x74, 0x74, 0x65, 0x72,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_12[]  = { 0x6C, 0x6F, 0x6F, 0x6B, 0x69, 0x6E, 0x67, 0x2D, 0x67, 0x6C, 0x61, 0x73, 0x73,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_13[]  = { 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_14[]  = { 0x6F, 0x70, 0x65, 0x6E, 0x65, 0x64,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_15[]  = { 0x73, 0x61, 0x69, 0x64,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_16[]  = { 0x74, 0x68, 0x65, 0x6E,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_17[]  = { 0x74, 0x6F, 0x6F,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_18[]  = { 0x77, 0x61, 0x73, 0x20, 0x61,  antlr3::ANTLR_STRING_TERMINATOR};



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */

using namespace antlr3;


/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */



MAliceLexer::~MAliceLexer()
{
}

void
MAliceLexer::reset()
{
    this->get_rec()->reset();
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g";

/** \brief Return the name of the grammar file that generated this code.
 */
const char* MAliceLexer::getGrammarFileName()
{
	return fileName;
}

/** \brief Create a new lexer called MAliceLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \return
 *     - Success pMAliceLexer initialized for the lex start
 *     - Fail NULL
 */
MAliceLexer::MAliceLexer(StreamType* instream)
:MAliceLexerImplTraits::BaseLexerType(ANTLR_SIZE_HINT, instream, NULL)
{
	// See if we can create a new lexer with the standard constructor
	//
	this->init(instream );
}

/** \brief Create a new lexer called MAliceLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \param[state] state Previously created shared recognizer stat
 * \return
 *     - Success pMAliceLexer initialized for the lex start
 *     - Fail NULL
 */
MAliceLexer::MAliceLexer(StreamType* instream, RecognizerSharedStateType* state)
:MAliceLexerImplTraits::BaseLexerType(ANTLR_SIZE_HINT, instream, state)
{
	this->init(instream );
}

void MAliceLexer::init(StreamType* instream)
{
    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * in base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 lexer function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function.
     *
     * We don't use the macros defined in MAliceLexer.h here so you can get a sense
     * of what goes where.
     */

}

/* =========================================================================
 * Functions to match the lexer grammar defined tokens from the input stream
 */

//   Comes from: 7:6: ( '%' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__7
 *
 * Looks to match the characters the constitute the token T__7
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__7()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__7;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:7:6: ( '%' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:7:8: '%'
    {
         this->matchc('%');
        if  (this->hasException())
        {
            goto ruleT__7Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__7Ex; /* Prevent compiler warnings */
    ruleT__7Ex: ;

}
// $ANTLR end T__7

//   Comes from: 8:6: ( '&' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__8
 *
 * Looks to match the characters the constitute the token T__8
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__8()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__8;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:8:6: ( '&' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:8:8: '&'
    {
         this->matchc('&');
        if  (this->hasException())
        {
            goto ruleT__8Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__8Ex; /* Prevent compiler warnings */
    ruleT__8Ex: ;

}
// $ANTLR end T__8

//   Comes from: 9:6: ( '()' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__9
 *
 * Looks to match the characters the constitute the token T__9
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__9()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__9;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:9:6: ( '()' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:9:8: '()'
    {
        this->matchs(lit_1);
        if  (this->hasException())
        {
            goto ruleT__9Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__9Ex; /* Prevent compiler warnings */
    ruleT__9Ex: ;

}
// $ANTLR end T__9

//   Comes from: 10:7: ( '*' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__10
 *
 * Looks to match the characters the constitute the token T__10
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__10()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__10;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:10:7: ( '*' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:10:9: '*'
    {
         this->matchc('*');
        if  (this->hasException())
        {
            goto ruleT__10Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__10Ex; /* Prevent compiler warnings */
    ruleT__10Ex: ;

}
// $ANTLR end T__10

//   Comes from: 11:7: ( '+' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__11
 *
 * Looks to match the characters the constitute the token T__11
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__11()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__11;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:11:7: ( '+' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:11:9: '+'
    {
         this->matchc('+');
        if  (this->hasException())
        {
            goto ruleT__11Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__11Ex; /* Prevent compiler warnings */
    ruleT__11Ex: ;

}
// $ANTLR end T__11

//   Comes from: 12:7: ( ',' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__12
 *
 * Looks to match the characters the constitute the token T__12
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__12()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__12;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:12:7: ( ',' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:12:9: ','
    {
         this->matchc(',');
        if  (this->hasException())
        {
            goto ruleT__12Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__12Ex; /* Prevent compiler warnings */
    ruleT__12Ex: ;

}
// $ANTLR end T__12

//   Comes from: 13:7: ( '.' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__13
 *
 * Looks to match the characters the constitute the token T__13
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__13()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__13;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:13:7: ( '.' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:13:9: '.'
    {
         this->matchc('.');
        if  (this->hasException())
        {
            goto ruleT__13Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__13Ex; /* Prevent compiler warnings */
    ruleT__13Ex: ;

}
// $ANTLR end T__13

//   Comes from: 14:7: ( '/' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__14
 *
 * Looks to match the characters the constitute the token T__14
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__14()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__14;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:14:7: ( '/' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:14:9: '/'
    {
         this->matchc('/');
        if  (this->hasException())
        {
            goto ruleT__14Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__14Ex; /* Prevent compiler warnings */
    ruleT__14Ex: ;

}
// $ANTLR end T__14

//   Comes from: 15:7: ( 'Alice.' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__15
 *
 * Looks to match the characters the constitute the token T__15
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__15()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__15;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:15:7: ( 'Alice.' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:15:9: 'Alice.'
    {
        this->matchs(lit_2);
        if  (this->hasException())
        {
            goto ruleT__15Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__15Ex; /* Prevent compiler warnings */
    ruleT__15Ex: ;

}
// $ANTLR end T__15

//   Comes from: 16:7: ( 'The' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__16
 *
 * Looks to match the characters the constitute the token T__16
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__16()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__16;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:16:7: ( 'The' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:16:9: 'The'
    {
        this->matchs(lit_3);
        if  (this->hasException())
        {
            goto ruleT__16Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__16Ex; /* Prevent compiler warnings */
    ruleT__16Ex: ;

}
// $ANTLR end T__16

//   Comes from: 17:7: ( '^' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__17
 *
 * Looks to match the characters the constitute the token T__17
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__17()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__17;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:17:7: ( '^' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:17:9: '^'
    {
         this->matchc('^');
        if  (this->hasException())
        {
            goto ruleT__17Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__17Ex; /* Prevent compiler warnings */
    ruleT__17Ex: ;

}
// $ANTLR end T__17

//   Comes from: 18:7: ( 'and' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__18
 *
 * Looks to match the characters the constitute the token T__18
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__18()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__18;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:18:7: ( 'and' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:18:9: 'and'
    {
        this->matchs(lit_4);
        if  (this->hasException())
        {
            goto ruleT__18Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__18Ex; /* Prevent compiler warnings */
    ruleT__18Ex: ;

}
// $ANTLR end T__18

//   Comes from: 19:7: ( 'ate' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__19
 *
 * Looks to match the characters the constitute the token T__19
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__19()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__19;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:19:7: ( 'ate' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:19:9: 'ate'
    {
        this->matchs(lit_5);
        if  (this->hasException())
        {
            goto ruleT__19Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__19Ex; /* Prevent compiler warnings */
    ruleT__19Ex: ;

}
// $ANTLR end T__19

//   Comes from: 20:7: ( 'became' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__20
 *
 * Looks to match the characters the constitute the token T__20
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__20()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__20;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:20:7: ( 'became' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:20:9: 'became'
    {
        this->matchs(lit_6);
        if  (this->hasException())
        {
            goto ruleT__20Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__20Ex; /* Prevent compiler warnings */
    ruleT__20Ex: ;

}
// $ANTLR end T__20

//   Comes from: 21:7: ( 'but' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__21
 *
 * Looks to match the characters the constitute the token T__21
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__21()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__21;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:21:7: ( 'but' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:21:9: 'but'
    {
        this->matchs(lit_7);
        if  (this->hasException())
        {
            goto ruleT__21Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__21Ex; /* Prevent compiler warnings */
    ruleT__21Ex: ;

}
// $ANTLR end T__21

//   Comes from: 22:7: ( 'closed' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__22
 *
 * Looks to match the characters the constitute the token T__22
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__22()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__22;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:22:7: ( 'closed' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:22:9: 'closed'
    {
        this->matchs(lit_8);
        if  (this->hasException())
        {
            goto ruleT__22Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__22Ex; /* Prevent compiler warnings */
    ruleT__22Ex: ;

}
// $ANTLR end T__22

//   Comes from: 23:7: ( 'drank' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__23
 *
 * Looks to match the characters the constitute the token T__23
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__23()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__23;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:23:7: ( 'drank' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:23:9: 'drank'
    {
        this->matchs(lit_9);
        if  (this->hasException())
        {
            goto ruleT__23Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__23Ex; /* Prevent compiler warnings */
    ruleT__23Ex: ;

}
// $ANTLR end T__23

//   Comes from: 24:7: ( 'hatta' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__24
 *
 * Looks to match the characters the constitute the token T__24
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__24()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__24;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:24:7: ( 'hatta' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:24:9: 'hatta'
    {
        this->matchs(lit_10);
        if  (this->hasException())
        {
            goto ruleT__24Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__24Ex; /* Prevent compiler warnings */
    ruleT__24Ex: ;

}
// $ANTLR end T__24

//   Comes from: 25:7: ( 'letter' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__25
 *
 * Looks to match the characters the constitute the token T__25
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__25()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__25;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:25:7: ( 'letter' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:25:9: 'letter'
    {
        this->matchs(lit_11);
        if  (this->hasException())
        {
            goto ruleT__25Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__25Ex; /* Prevent compiler warnings */
    ruleT__25Ex: ;

}
// $ANTLR end T__25

//   Comes from: 26:7: ( 'looking-glass' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__26
 *
 * Looks to match the characters the constitute the token T__26
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__26()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__26;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:26:7: ( 'looking-glass' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:26:9: 'looking-glass'
    {
        this->matchs(lit_12);
        if  (this->hasException())
        {
            goto ruleT__26Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__26Ex; /* Prevent compiler warnings */
    ruleT__26Ex: ;

}
// $ANTLR end T__26

//   Comes from: 27:7: ( 'number' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__27
 *
 * Looks to match the characters the constitute the token T__27
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__27()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__27;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:27:7: ( 'number' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:27:9: 'number'
    {
        this->matchs(lit_13);
        if  (this->hasException())
        {
            goto ruleT__27Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__27Ex; /* Prevent compiler warnings */
    ruleT__27Ex: ;

}
// $ANTLR end T__27

//   Comes from: 28:7: ( 'opened' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__28
 *
 * Looks to match the characters the constitute the token T__28
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__28()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__28;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:28:7: ( 'opened' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:28:9: 'opened'
    {
        this->matchs(lit_14);
        if  (this->hasException())
        {
            goto ruleT__28Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__28Ex; /* Prevent compiler warnings */
    ruleT__28Ex: ;

}
// $ANTLR end T__28

//   Comes from: 29:7: ( 'said' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__29
 *
 * Looks to match the characters the constitute the token T__29
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__29()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__29;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:29:7: ( 'said' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:29:9: 'said'
    {
        this->matchs(lit_15);
        if  (this->hasException())
        {
            goto ruleT__29Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__29Ex; /* Prevent compiler warnings */
    ruleT__29Ex: ;

}
// $ANTLR end T__29

//   Comes from: 30:7: ( 'then' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__30
 *
 * Looks to match the characters the constitute the token T__30
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__30()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__30;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:30:7: ( 'then' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:30:9: 'then'
    {
        this->matchs(lit_16);
        if  (this->hasException())
        {
            goto ruleT__30Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__30Ex; /* Prevent compiler warnings */
    ruleT__30Ex: ;

}
// $ANTLR end T__30

//   Comes from: 31:7: ( 'too' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__31
 *
 * Looks to match the characters the constitute the token T__31
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__31()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__31;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:31:7: ( 'too' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:31:9: 'too'
    {
        this->matchs(lit_17);
        if  (this->hasException())
        {
            goto ruleT__31Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__31Ex; /* Prevent compiler warnings */
    ruleT__31Ex: ;

}
// $ANTLR end T__31

//   Comes from: 32:7: ( 'was a' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__32
 *
 * Looks to match the characters the constitute the token T__32
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__32()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__32;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:32:7: ( 'was a' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:32:9: 'was a'
    {
        this->matchs(lit_18);
        if  (this->hasException())
        {
            goto ruleT__32Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__32Ex; /* Prevent compiler warnings */
    ruleT__32Ex: ;

}
// $ANTLR end T__32

//   Comes from: 33:7: ( '|' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__33
 *
 * Looks to match the characters the constitute the token T__33
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__33()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__33;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:33:7: ( '|' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:33:9: '|'
    {
         this->matchc('|');
        if  (this->hasException())
        {
            goto ruleT__33Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__33Ex; /* Prevent compiler warnings */
    ruleT__33Ex: ;

}
// $ANTLR end T__33

//   Comes from: 34:7: ( '~' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__34
 *
 * Looks to match the characters the constitute the token T__34
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mT__34()
{
    ANTLR_UINT32	_type;
      


    _type	    = T__34;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:34:7: ( '~' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:34:9: '~'
    {
         this->matchc('~');
        if  (this->hasException())
        {
            goto ruleT__34Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleT__34Ex; /* Prevent compiler warnings */
    ruleT__34Ex: ;

}
// $ANTLR end T__34

//   Comes from: 35:3: ( ( 'a' .. 'z' | 'A' .. 'Z' ) ( 'a' .. 'z' )* ( ( '_' ( 'a' .. 'z' | 'A' .. 'Z' ) ) ( 'a' .. 'z' )* )* )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ID
 *
 * Looks to match the characters the constitute the token ID
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mID()
{
    ANTLR_UINT32	_type;
      


    _type	    = ID;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:35:3: ( ( 'a' .. 'z' | 'A' .. 'Z' ) ( 'a' .. 'z' )* ( ( '_' ( 'a' .. 'z' | 'A' .. 'Z' ) ) ( 'a' .. 'z' )* )* )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:35:6: ( 'a' .. 'z' | 'A' .. 'Z' ) ( 'a' .. 'z' )* ( ( '_' ( 'a' .. 'z' | 'A' .. 'Z' ) ) ( 'a' .. 'z' )* )*
    {
        if ( ((this->LA(1) >= 'A') && (this->LA(1) <= 'Z')) || ((this->LA(1) >= 'a') && (this->LA(1) <= 'z')) )
        {
            this->consume();
        }
        else
        {
            new ANTLR_Exception< MAliceLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

            this->recover();
            goto ruleIDEx;
        }


        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:35:26: ( 'a' .. 'z' )*

        for (;;)
        {
            int alt1=2;
            switch ( this->LA(1) )
            {
            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
            case 'g':
            case 'h':
            case 'i':
            case 'j':
            case 'k':
            case 'l':
            case 'm':
            case 'n':
            case 'o':
            case 'p':
            case 'q':
            case 'r':
            case 's':
            case 't':
            case 'u':
            case 'v':
            case 'w':
            case 'x':
            case 'y':
            case 'z':
            	{
            		alt1=1;
            	}
                break;

            }

            switch (alt1)
            {
        	case 1:
        	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:
        	    {
        	        if ( ((this->LA(1) >= 'a') && (this->LA(1) <= 'z')) )
        	        {
        	            this->consume();
        	        }
        	        else
        	        {
        	            new ANTLR_Exception< MAliceLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	            this->recover();
        	            goto ruleIDEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop1;	/* break out of the loop */
        	    break;
            }
        }
        loop1: ; /* Jump out to here if this rule does not match */


        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:35:38: ( ( '_' ( 'a' .. 'z' | 'A' .. 'Z' ) ) ( 'a' .. 'z' )* )*

        for (;;)
        {
            int alt3=2;
            switch ( this->LA(1) )
            {
            case '_':
            	{
            		alt3=1;
            	}
                break;

            }

            switch (alt3)
            {
        	case 1:
        	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:35:39: ( '_' ( 'a' .. 'z' | 'A' .. 'Z' ) ) ( 'a' .. 'z' )*
        	    {
        	        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:35:39: ( '_' ( 'a' .. 'z' | 'A' .. 'Z' ) )
        	        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:35:40: '_' ( 'a' .. 'z' | 'A' .. 'Z' )
        	        {
        	             this->matchc('_');
        	            if  (this->hasException())
        	            {
        	                goto ruleIDEx;
        	            }


        	            if ( ((this->LA(1) >= 'A') && (this->LA(1) <= 'Z')) || ((this->LA(1) >= 'a') && (this->LA(1) <= 'z')) )
        	            {
        	                this->consume();
        	            }
        	            else
        	            {
        	                new ANTLR_Exception< MAliceLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	                this->recover();
        	                goto ruleIDEx;
        	            }


        	        }


        	        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:35:64: ( 'a' .. 'z' )*

        	        for (;;)
        	        {
        	            int alt2=2;
        	            switch ( this->LA(1) )
        	            {
        	            case 'a':
        	            case 'b':
        	            case 'c':
        	            case 'd':
        	            case 'e':
        	            case 'f':
        	            case 'g':
        	            case 'h':
        	            case 'i':
        	            case 'j':
        	            case 'k':
        	            case 'l':
        	            case 'm':
        	            case 'n':
        	            case 'o':
        	            case 'p':
        	            case 'q':
        	            case 'r':
        	            case 's':
        	            case 't':
        	            case 'u':
        	            case 'v':
        	            case 'w':
        	            case 'x':
        	            case 'y':
        	            case 'z':
        	            	{
        	            		alt2=1;
        	            	}
        	                break;

        	            }

        	            switch (alt2)
        	            {
        	        	case 1:
        	        	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:
        	        	    {
        	        	        if ( ((this->LA(1) >= 'a') && (this->LA(1) <= 'z')) )
        	        	        {
        	        	            this->consume();
        	        	        }
        	        	        else
        	        	        {
        	        	            new ANTLR_Exception< MAliceLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	        	            this->recover();
        	        	            goto ruleIDEx;
        	        	        }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop2;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop2: ; /* Jump out to here if this rule does not match */


        	    }
        	    break;

        	default:
        	    goto loop3;	/* break out of the loop */
        	    break;
            }
        }
        loop3: ; /* Jump out to here if this rule does not match */


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleIDEx; /* Prevent compiler warnings */
    ruleIDEx: ;

}
// $ANTLR end ID

//   Comes from: 37:4: ( ( '0' .. '9' )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start INT
 *
 * Looks to match the characters the constitute the token INT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mINT()
{
    ANTLR_UINT32	_type;
      


    _type	    = INT;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:37:4: ( ( '0' .. '9' )+ )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:37:7: ( '0' .. '9' )+
    {
        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:37:7: ( '0' .. '9' )+
        {
            int cnt4=0;

            for (;;)
            {
                int alt4=2;
        	switch ( this->LA(1) )
        	{
        	case '0':
        	case '1':
        	case '2':
        	case '3':
        	case '4':
        	case '5':
        	case '6':
        	case '7':
        	case '8':
        	case '9':
        		{
        			alt4=1;
        		}
        	    break;

        	}

        	switch (alt4)
        	{
        	    case 1:
        	        // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:
        	        {
        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
        	            {
        	                this->consume();
        	            }
        	            else
        	            {
        	                new ANTLR_Exception< MAliceLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	                this->recover();
        	                goto ruleINTEx;
        	            }


        	        }
        	        break;

        	    default:

        		if ( cnt4 >= 1 )
        		{
        		    goto loop4;
        		}
        		/* mismatchedSetEx()
        		 */
        		new ANTLR_Exception< MAliceLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


        		goto ruleINTEx;
        	}
        	cnt4++;
            }
            loop4: ;	/* Jump to here if this rule does not match */
        }

    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleINTEx; /* Prevent compiler warnings */
    ruleINTEx: ;

}
// $ANTLR end INT

//   Comes from: 39:5: ( '\\'' ( 'a' .. 'z' ) '\\'' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start CHAR
 *
 * Looks to match the characters the constitute the token CHAR
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void MAliceLexer::mCHAR()
{
    ANTLR_UINT32	_type;
      


    _type	    = CHAR;


    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:39:5: ( '\\'' ( 'a' .. 'z' ) '\\'' )
    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:39:8: '\\'' ( 'a' .. 'z' ) '\\''
    {
         this->matchc('\'');
        if  (this->hasException())
        {
            goto ruleCHAREx;
        }


        if ( ((this->LA(1) >= 'a') && (this->LA(1) <= 'z')) )
        {
            this->consume();
        }
        else
        {
            new ANTLR_Exception< MAliceLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

            this->recover();
            goto ruleCHAREx;
        }


         this->matchc('\'');
        if  (this->hasException())
        {
            goto ruleCHAREx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleCHAREx; /* Prevent compiler warnings */
    ruleCHAREx: ;

}
// $ANTLR end CHAR

/** This is the entry point in to the lexer from an object that
 *  wants to generate the next token, such as a pCOMMON_TOKEN_STREAM
 */
void
MAliceLexer::mTokens()
{
    {
        //  E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:1:8: ( T__7 | T__8 | T__9 | T__10 | T__11 | T__12 | T__13 | T__14 | T__15 | T__16 | T__17 | T__18 | T__19 | T__20 | T__21 | T__22 | T__23 | T__24 | T__25 | T__26 | T__27 | T__28 | T__29 | T__30 | T__31 | T__32 | T__33 | T__34 | ID | INT | CHAR )

        ANTLR_UINT32 alt5;

        alt5=31;

        switch ( this->LA(1) )
        {
        case '%':
        	{
        		alt5=1;
        	}
            break;
        case '&':
        	{
        		alt5=2;
        	}
            break;
        case '(':
        	{
        		alt5=3;
        	}
            break;
        case '*':
        	{
        		alt5=4;
        	}
            break;
        case '+':
        	{
        		alt5=5;
        	}
            break;
        case ',':
        	{
        		alt5=6;
        	}
            break;
        case '.':
        	{
        		alt5=7;
        	}
            break;
        case '/':
        	{
        		alt5=8;
        	}
            break;
        case 'A':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'l':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'i':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'c':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'e':
        									{
        										switch ( this->LA(6) )
        										{
        										case '.':
        											{
        												alt5=9;
        											}
        										    break;

        										default:
        										    alt5=29;
        										}

        									}
        								    break;

        								default:
        								    alt5=29;
        								}

        							}
        						    break;

        						default:
        						    alt5=29;
        						}

        					}
        				    break;

        				default:
        				    alt5=29;
        				}

        			}
        		    break;

        		default:
        		    alt5=29;
        		}

        	}
            break;
        case 'T':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'h':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'e':
        					{
        						switch ( this->LA(4) )
        						{
        						case '_':
        						case 'a':
        						case 'b':
        						case 'c':
        						case 'd':
        						case 'e':
        						case 'f':
        						case 'g':
        						case 'h':
        						case 'i':
        						case 'j':
        						case 'k':
        						case 'l':
        						case 'm':
        						case 'n':
        						case 'o':
        						case 'p':
        						case 'q':
        						case 'r':
        						case 's':
        						case 't':
        						case 'u':
        						case 'v':
        						case 'w':
        						case 'x':
        						case 'y':
        						case 'z':
        							{
        								alt5=29;
        							}
        						    break;

        						default:
        						    alt5=10;
        						}

        					}
        				    break;

        				default:
        				    alt5=29;
        				}

        			}
        		    break;

        		default:
        		    alt5=29;
        		}

        	}
            break;
        case '^':
        	{
        		alt5=11;
        	}
            break;
        case 'a':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'n':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'd':
        					{
        						switch ( this->LA(4) )
        						{
        						case '_':
        						case 'a':
        						case 'b':
        						case 'c':
        						case 'd':
        						case 'e':
        						case 'f':
        						case 'g':
        						case 'h':
        						case 'i':
        						case 'j':
        						case 'k':
        						case 'l':
        						case 'm':
        						case 'n':
        						case 'o':
        						case 'p':
        						case 'q':
        						case 'r':
        						case 's':
        						case 't':
        						case 'u':
        						case 'v':
        						case 'w':
        						case 'x':
        						case 'y':
        						case 'z':
        							{
        								alt5=29;
        							}
        						    break;

        						default:
        						    alt5=12;
        						}

        					}
        				    break;

        				default:
        				    alt5=29;
        				}

        			}
        		    break;
        		case 't':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'e':
        					{
        						switch ( this->LA(4) )
        						{
        						case '_':
        						case 'a':
        						case 'b':
        						case 'c':
        						case 'd':
        						case 'e':
        						case 'f':
        						case 'g':
        						case 'h':
        						case 'i':
        						case 'j':
        						case 'k':
        						case 'l':
        						case 'm':
        						case 'n':
        						case 'o':
        						case 'p':
        						case 'q':
        						case 'r':
        						case 's':
        						case 't':
        						case 'u':
        						case 'v':
        						case 'w':
        						case 'x':
        						case 'y':
        						case 'z':
        							{
        								alt5=29;
        							}
        						    break;

        						default:
        						    alt5=13;
        						}

        					}
        				    break;

        				default:
        				    alt5=29;
        				}

        			}
        		    break;

        		default:
        		    alt5=29;
        		}

        	}
            break;
        case 'b':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'e':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'c':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'a':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'm':
        									{
        										switch ( this->LA(6) )
        										{
        										case 'e':
        											{
        												switch ( this->LA(7) )
        												{
        												case '_':
        												case 'a':
        												case 'b':
        												case 'c':
        												case 'd':
        												case 'e':
        												case 'f':
        												case 'g':
        												case 'h':
        												case 'i':
        												case 'j':
        												case 'k':
        												case 'l':
        												case 'm':
        												case 'n':
        												case 'o':
        												case 'p':
        												case 'q':
        												case 'r':
        												case 's':
        												case 't':
        												case 'u':
        												case 'v':
        												case 'w':
        												case 'x':
        												case 'y':
        												case 'z':
        													{
        														alt5=29;
        													}
        												    break;

        												default:
        												    alt5=14;
        												}

        											}
        										    break;

        										default:
        										    alt5=29;
        										}

        									}
        								    break;

        								default:
        								    alt5=29;
        								}

        							}
        						    break;

        						default:
        						    alt5=29;
        						}

        					}
        				    break;

        				default:
        				    alt5=29;
        				}

        			}
        		    break;
        		case 'u':
        			{
        				switch ( this->LA(3) )
        				{
        				case 't':
        					{
        						switch ( this->LA(4) )
        						{
        						case '_':
        						case 'a':
        						case 'b':
        						case 'c':
        						case 'd':
        						case 'e':
        						case 'f':
        						case 'g':
        						case 'h':
        						case 'i':
        						case 'j':
        						case 'k':
        						case 'l':
        						case 'm':
        						case 'n':
        						case 'o':
        						case 'p':
        						case 'q':
        						case 'r':
        						case 's':
        						case 't':
        						case 'u':
        						case 'v':
        						case 'w':
        						case 'x':
        						case 'y':
        						case 'z':
        							{
        								alt5=29;
        							}
        						    break;

        						default:
        						    alt5=15;
        						}

        					}
        				    break;

        				default:
        				    alt5=29;
        				}

        			}
        		    break;

        		default:
        		    alt5=29;
        		}

        	}
            break;
        case 'c':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'l':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'o':
        					{
        						switch ( this->LA(4) )
        						{
        						case 's':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'e':
        									{
        										switch ( this->LA(6) )
        										{
        										case 'd':
        											{
        												switch ( this->LA(7) )
        												{
        												case '_':
        												case 'a':
        												case 'b':
        												case 'c':
        												case 'd':
        												case 'e':
        												case 'f':
        												case 'g':
        												case 'h':
        												case 'i':
        												case 'j':
        												case 'k':
        												case 'l':
        												case 'm':
        												case 'n':
        												case 'o':
        												case 'p':
        												case 'q':
        												case 'r':
        												case 's':
        												case 't':
        												case 'u':
        												case 'v':
        												case 'w':
        												case 'x':
        												case 'y':
        												case 'z':
        													{
        														alt5=29;
        													}
        												    break;

        												default:
        												    alt5=16;
        												}

        											}
        										    break;

        										default:
        										    alt5=29;
        										}

        									}
        								    break;

        								default:
        								    alt5=29;
        								}

        							}
        						    break;

        						default:
        						    alt5=29;
        						}

        					}
        				    break;

        				default:
        				    alt5=29;
        				}

        			}
        		    break;

        		default:
        		    alt5=29;
        		}

        	}
            break;
        case 'd':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'r':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'a':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'n':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'k':
        									{
        										switch ( this->LA(6) )
        										{
        										case '_':
        										case 'a':
        										case 'b':
        										case 'c':
        										case 'd':
        										case 'e':
        										case 'f':
        										case 'g':
        										case 'h':
        										case 'i':
        										case 'j':
        										case 'k':
        										case 'l':
        										case 'm':
        										case 'n':
        										case 'o':
        										case 'p':
        										case 'q':
        										case 'r':
        										case 's':
        										case 't':
        										case 'u':
        										case 'v':
        										case 'w':
        										case 'x':
        										case 'y':
        										case 'z':
        											{
        												alt5=29;
        											}
        										    break;

        										default:
        										    alt5=17;
        										}

        									}
        								    break;

        								default:
        								    alt5=29;
        								}

        							}
        						    break;

        						default:
        						    alt5=29;
        						}

        					}
        				    break;

        				default:
        				    alt5=29;
        				}

        			}
        		    break;

        		default:
        		    alt5=29;
        		}

        	}
            break;
        case 'h':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'a':
        			{
        				switch ( this->LA(3) )
        				{
        				case 't':
        					{
        						switch ( this->LA(4) )
        						{
        						case 't':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'a':
        									{
        										switch ( this->LA(6) )
        										{
        										case '_':
        										case 'a':
        										case 'b':
        										case 'c':
        										case 'd':
        										case 'e':
        										case 'f':
        										case 'g':
        										case 'h':
        										case 'i':
        										case 'j':
        										case 'k':
        										case 'l':
        										case 'm':
        										case 'n':
        										case 'o':
        										case 'p':
        										case 'q':
        										case 'r':
        										case 's':
        										case 't':
        										case 'u':
        										case 'v':
        										case 'w':
        										case 'x':
        										case 'y':
        										case 'z':
        											{
        												alt5=29;
        											}
        										    break;

        										default:
        										    alt5=18;
        										}

        									}
        								    break;

        								default:
        								    alt5=29;
        								}

        							}
        						    break;

        						default:
        						    alt5=29;
        						}

        					}
        				    break;

        				default:
        				    alt5=29;
        				}

        			}
        		    break;

        		default:
        		    alt5=29;
        		}

        	}
            break;
        case 'l':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'e':
        			{
        				switch ( this->LA(3) )
        				{
        				case 't':
        					{
        						switch ( this->LA(4) )
        						{
        						case 't':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'e':
        									{
        										switch ( this->LA(6) )
        										{
        										case 'r':
        											{
        												switch ( this->LA(7) )
        												{
        												case '_':
        												case 'a':
        												case 'b':
        												case 'c':
        												case 'd':
        												case 'e':
        												case 'f':
        												case 'g':
        												case 'h':
        												case 'i':
        												case 'j':
        												case 'k':
        												case 'l':
        												case 'm':
        												case 'n':
        												case 'o':
        												case 'p':
        												case 'q':
        												case 'r':
        												case 's':
        												case 't':
        												case 'u':
        												case 'v':
        												case 'w':
        												case 'x':
        												case 'y':
        												case 'z':
        													{
        														alt5=29;
        													}
        												    break;

        												default:
        												    alt5=19;
        												}

        											}
        										    break;

        										default:
        										    alt5=29;
        										}

        									}
        								    break;

        								default:
        								    alt5=29;
        								}

        							}
        						    break;

        						default:
        						    alt5=29;
        						}

        					}
        				    break;

        				default:
        				    alt5=29;
        				}

        			}
        		    break;
        		case 'o':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'o':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'k':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'i':
        									{
        										switch ( this->LA(6) )
        										{
        										case 'n':
        											{
        												switch ( this->LA(7) )
        												{
        												case 'g':
        													{
        														switch ( this->LA(8) )
        														{
        														case '-':
        															{
        																alt5=20;
        															}
        														    break;

        														default:
        														    alt5=29;
        														}

        													}
        												    break;

        												default:
        												    alt5=29;
        												}

        											}
        										    break;

        										default:
        										    alt5=29;
        										}

        									}
        								    break;

        								default:
        								    alt5=29;
        								}

        							}
        						    break;

        						default:
        						    alt5=29;
        						}

        					}
        				    break;

        				default:
        				    alt5=29;
        				}

        			}
        		    break;

        		default:
        		    alt5=29;
        		}

        	}
            break;
        case 'n':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'u':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'm':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'b':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'e':
        									{
        										switch ( this->LA(6) )
        										{
        										case 'r':
        											{
        												switch ( this->LA(7) )
        												{
        												case '_':
        												case 'a':
        												case 'b':
        												case 'c':
        												case 'd':
        												case 'e':
        												case 'f':
        												case 'g':
        												case 'h':
        												case 'i':
        												case 'j':
        												case 'k':
        												case 'l':
        												case 'm':
        												case 'n':
        												case 'o':
        												case 'p':
        												case 'q':
        												case 'r':
        												case 's':
        												case 't':
        												case 'u':
        												case 'v':
        												case 'w':
        												case 'x':
        												case 'y':
        												case 'z':
        													{
        														alt5=29;
        													}
        												    break;

        												default:
        												    alt5=21;
        												}

        											}
        										    break;

        										default:
        										    alt5=29;
        										}

        									}
        								    break;

        								default:
        								    alt5=29;
        								}

        							}
        						    break;

        						default:
        						    alt5=29;
        						}

        					}
        				    break;

        				default:
        				    alt5=29;
        				}

        			}
        		    break;

        		default:
        		    alt5=29;
        		}

        	}
            break;
        case 'o':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'p':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'e':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'n':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'e':
        									{
        										switch ( this->LA(6) )
        										{
        										case 'd':
        											{
        												switch ( this->LA(7) )
        												{
        												case '_':
        												case 'a':
        												case 'b':
        												case 'c':
        												case 'd':
        												case 'e':
        												case 'f':
        												case 'g':
        												case 'h':
        												case 'i':
        												case 'j':
        												case 'k':
        												case 'l':
        												case 'm':
        												case 'n':
        												case 'o':
        												case 'p':
        												case 'q':
        												case 'r':
        												case 's':
        												case 't':
        												case 'u':
        												case 'v':
        												case 'w':
        												case 'x':
        												case 'y':
        												case 'z':
        													{
        														alt5=29;
        													}
        												    break;

        												default:
        												    alt5=22;
        												}

        											}
        										    break;

        										default:
        										    alt5=29;
        										}

        									}
        								    break;

        								default:
        								    alt5=29;
        								}

        							}
        						    break;

        						default:
        						    alt5=29;
        						}

        					}
        				    break;

        				default:
        				    alt5=29;
        				}

        			}
        		    break;

        		default:
        		    alt5=29;
        		}

        	}
            break;
        case 's':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'a':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'i':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'd':
        							{
        								switch ( this->LA(5) )
        								{
        								case '_':
        								case 'a':
        								case 'b':
        								case 'c':
        								case 'd':
        								case 'e':
        								case 'f':
        								case 'g':
        								case 'h':
        								case 'i':
        								case 'j':
        								case 'k':
        								case 'l':
        								case 'm':
        								case 'n':
        								case 'o':
        								case 'p':
        								case 'q':
        								case 'r':
        								case 's':
        								case 't':
        								case 'u':
        								case 'v':
        								case 'w':
        								case 'x':
        								case 'y':
        								case 'z':
        									{
        										alt5=29;
        									}
        								    break;

        								default:
        								    alt5=23;
        								}

        							}
        						    break;

        						default:
        						    alt5=29;
        						}

        					}
        				    break;

        				default:
        				    alt5=29;
        				}

        			}
        		    break;

        		default:
        		    alt5=29;
        		}

        	}
            break;
        case 't':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'h':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'e':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'n':
        							{
        								switch ( this->LA(5) )
        								{
        								case '_':
        								case 'a':
        								case 'b':
        								case 'c':
        								case 'd':
        								case 'e':
        								case 'f':
        								case 'g':
        								case 'h':
        								case 'i':
        								case 'j':
        								case 'k':
        								case 'l':
        								case 'm':
        								case 'n':
        								case 'o':
        								case 'p':
        								case 'q':
        								case 'r':
        								case 's':
        								case 't':
        								case 'u':
        								case 'v':
        								case 'w':
        								case 'x':
        								case 'y':
        								case 'z':
        									{
        										alt5=29;
        									}
        								    break;

        								default:
        								    alt5=24;
        								}

        							}
        						    break;

        						default:
        						    alt5=29;
        						}

        					}
        				    break;

        				default:
        				    alt5=29;
        				}

        			}
        		    break;
        		case 'o':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'o':
        					{
        						switch ( this->LA(4) )
        						{
        						case '_':
        						case 'a':
        						case 'b':
        						case 'c':
        						case 'd':
        						case 'e':
        						case 'f':
        						case 'g':
        						case 'h':
        						case 'i':
        						case 'j':
        						case 'k':
        						case 'l':
        						case 'm':
        						case 'n':
        						case 'o':
        						case 'p':
        						case 'q':
        						case 'r':
        						case 's':
        						case 't':
        						case 'u':
        						case 'v':
        						case 'w':
        						case 'x':
        						case 'y':
        						case 'z':
        							{
        								alt5=29;
        							}
        						    break;

        						default:
        						    alt5=25;
        						}

        					}
        				    break;

        				default:
        				    alt5=29;
        				}

        			}
        		    break;

        		default:
        		    alt5=29;
        		}

        	}
            break;
        case 'w':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'a':
        			{
        				switch ( this->LA(3) )
        				{
        				case 's':
        					{
        						switch ( this->LA(4) )
        						{
        						case ' ':
        							{
        								alt5=26;
        							}
        						    break;

        						default:
        						    alt5=29;
        						}

        					}
        				    break;

        				default:
        				    alt5=29;
        				}

        			}
        		    break;

        		default:
        		    alt5=29;
        		}

        	}
            break;
        case '|':
        	{
        		alt5=27;
        	}
            break;
        case '~':
        	{
        		alt5=28;
        	}
            break;
        case 'B':
        case 'C':
        case 'D':
        case 'E':
        case 'F':
        case 'G':
        case 'H':
        case 'I':
        case 'J':
        case 'K':
        case 'L':
        case 'M':
        case 'N':
        case 'O':
        case 'P':
        case 'Q':
        case 'R':
        case 'S':
        case 'U':
        case 'V':
        case 'W':
        case 'X':
        case 'Y':
        case 'Z':
        case 'e':
        case 'f':
        case 'g':
        case 'i':
        case 'j':
        case 'k':
        case 'm':
        case 'p':
        case 'q':
        case 'r':
        case 'u':
        case 'v':
        case 'x':
        case 'y':
        case 'z':
        	{
        		alt5=29;
        	}
            break;
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        	{
        		alt5=30;
        	}
            break;
        case '\'':
        	{
        		alt5=31;
        	}
            break;

        default:
            ExceptionBaseType* ex = new ANTLR_Exception< MAliceLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            ex->set_decisionNum( 5 );
            ex->set_state( 0 );


            goto ruleTokensEx;

        }

        switch (alt5)
        {
    	case 1:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:1:10: T__7
    	    {
    	        /* 1:10: T__7 */
    	        mT__7();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 2:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:1:15: T__8
    	    {
    	        /* 1:15: T__8 */
    	        mT__8();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 3:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:1:20: T__9
    	    {
    	        /* 1:20: T__9 */
    	        mT__9();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 4:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:1:25: T__10
    	    {
    	        /* 1:25: T__10 */
    	        mT__10();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 5:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:1:31: T__11
    	    {
    	        /* 1:31: T__11 */
    	        mT__11();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 6:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:1:37: T__12
    	    {
    	        /* 1:37: T__12 */
    	        mT__12();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 7:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:1:43: T__13
    	    {
    	        /* 1:43: T__13 */
    	        mT__13();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 8:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:1:49: T__14
    	    {
    	        /* 1:49: T__14 */
    	        mT__14();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 9:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:1:55: T__15
    	    {
    	        /* 1:55: T__15 */
    	        mT__15();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 10:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:1:61: T__16
    	    {
    	        /* 1:61: T__16 */
    	        mT__16();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 11:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:1:67: T__17
    	    {
    	        /* 1:67: T__17 */
    	        mT__17();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 12:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:1:73: T__18
    	    {
    	        /* 1:73: T__18 */
    	        mT__18();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 13:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:1:79: T__19
    	    {
    	        /* 1:79: T__19 */
    	        mT__19();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 14:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:1:85: T__20
    	    {
    	        /* 1:85: T__20 */
    	        mT__20();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 15:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:1:91: T__21
    	    {
    	        /* 1:91: T__21 */
    	        mT__21();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 16:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:1:97: T__22
    	    {
    	        /* 1:97: T__22 */
    	        mT__22();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 17:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:1:103: T__23
    	    {
    	        /* 1:103: T__23 */
    	        mT__23();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 18:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:1:109: T__24
    	    {
    	        /* 1:109: T__24 */
    	        mT__24();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 19:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:1:115: T__25
    	    {
    	        /* 1:115: T__25 */
    	        mT__25();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 20:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:1:121: T__26
    	    {
    	        /* 1:121: T__26 */
    	        mT__26();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 21:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:1:127: T__27
    	    {
    	        /* 1:127: T__27 */
    	        mT__27();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 22:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:1:133: T__28
    	    {
    	        /* 1:133: T__28 */
    	        mT__28();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 23:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:1:139: T__29
    	    {
    	        /* 1:139: T__29 */
    	        mT__29();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 24:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:1:145: T__30
    	    {
    	        /* 1:145: T__30 */
    	        mT__30();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 25:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:1:151: T__31
    	    {
    	        /* 1:151: T__31 */
    	        mT__31();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 26:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:1:157: T__32
    	    {
    	        /* 1:157: T__32 */
    	        mT__32();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 27:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:1:163: T__33
    	    {
    	        /* 1:163: T__33 */
    	        mT__33();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 28:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:1:169: T__34
    	    {
    	        /* 1:169: T__34 */
    	        mT__34();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 29:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:1:175: ID
    	    {
    	        /* 1:175: ID */
    	        mID();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 30:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:1:178: INT
    	    {
    	        /* 1:178: INT */
    	        mINT();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 31:
    	    // E:\\Users\\Owen\\Documents\\Work\\Year2\\Laboratory\\MAlice\\malice\\Milestone 2\\MAlice.g:1:182: CHAR
    	    {
    	        /* 1:182: CHAR */
    	        mCHAR();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;

        }
    }


    goto ruleTokensEx; /* Prevent compiler warnings */
ruleTokensEx: ;
}

/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */
/* End of Lexer code
 * ================================================
 * ================================================
 */



/* End of code
 * =============================================================================
 */
